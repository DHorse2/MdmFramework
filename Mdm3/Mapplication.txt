using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Security;
using System.Windows.Markup;
using System.Windows.Navigation;
using System.Windows.Resources;
using System.Windows.Threading;

namespace System.Windows
{
    // Summary:
    //     Encapsulates a Windows Presentation Foundation (WPF) application.
    public class Application : DispatcherObject
    {
        // Summary:
        //     Initializes a new instance of the System.Windows.Application class.
        //
        // Exceptions:
        //   System.InvalidOperationException:
        //     More than one instance of the System.Windows.Application class is created
        //     per System.AppDomain.
        [SecurityCritical]
        public Application();

        // Summary:
        //     Gets the System.Windows.Application object for the current System.AppDomain.
        //
        // Returns:
        //     The System.Windows.Application object for the current System.AppDomain.
        public static Application Current { get; }
        //
        // Summary:
        //     Gets or sets the main window of the application.
        //
        // Returns:
        //     A System.Windows.Window that is designated as the main application window.
        //
        // Exceptions:
        //   System.InvalidOperationException:
        //     System.Windows.Application.MainWindow is set from an application that's hosted
        //     in a browser, such as an XAML browser applications (XBAPs).
        public Window MainWindow { get; set; }
        //
        // Summary:
        //     Gets a collection of application-scope properties.
        //
        // Returns:
        //     An System.Collections.IDictionary that contains the application-scope properties.
        public IDictionary Properties { get; }
        //
        // Summary:
        //     Gets or sets the System.Reflection.Assembly that provides the pack uniform
        //     resource identifiers (URIs) for resources in a WPF application.
        //
        // Returns:
        //     A reference to the System.Reflection.Assembly that provides the pack uniform
        //     resource identifiers (URIs) for resources in a WPF application.
        //
        // Exceptions:
        //   System.InvalidOperationException:
        //     A WPF application has an entry assembly, or System.Windows.Application.ResourceAssembly
        //     has already been set.
        public static Assembly ResourceAssembly { get; set; }
        //
        // Summary:
        //     Gets or sets a collection of application-scope resources, such as styles
        //     and brushes.
        //
        // Returns:
        //     A System.Windows.ResourceDictionary object that contains zero or more application-scope
        //     resources.
        public ResourceDictionary Resources { get; set; }
        //
        // Summary:
        //     Gets or sets the condition that causes the System.Windows.Application.Shutdown()
        //     method to be called.
        //
        // Returns:
        //     A System.Windows.ShutdownMode enumeration value. The default value is System.Windows.ShutdownMode.OnLastWindowClose.
        public ShutdownMode ShutdownMode { get; set; }
        //
        // Summary:
        //     Gets or sets a UI that is automatically shown when an application starts.
        //
        // Returns:
        //     A System.Uri that refers to the UI that automatically opens when an application
        //     starts.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     System.Windows.Application.StartupUri is set with a value of null.
        public Uri StartupUri { get; set; }
        //
        // Summary:
        //     Gets the instantiated windows in an application.
        //
        // Returns:
        //     A System.Windows.WindowCollection that contains references to all window
        //     objects in the current System.AppDomain.
        public WindowCollection Windows { get; }

        // Summary:
        //     Occurs when an application becomes the foreground application.
        public event EventHandler Activated;
        //
        // Summary:
        //     Occurs when an application stops being the foreground application.
        public event EventHandler Deactivated;
        //
        // Summary:
        //     Occurs when an exception is thrown by an application but not handled.
        public event DispatcherUnhandledExceptionEventHandler DispatcherUnhandledException;
        //
        // Summary:
        //     Occurs just before an application shuts down, and cannot be canceled.
        public event ExitEventHandler Exit;
        //
        // Summary:
        //     Occurs when a navigator in the application begins navigation to a content
        //     fragment, Navigation occurs immediately if the desired fragment is in the
        //     current content, or after the source XAML content has been loaded if the
        //     desired fragment is in different content.
        public event FragmentNavigationEventHandler FragmentNavigation;
        //
        // Summary:
        //     Occurs when content that was navigated to by a navigator in the application
        //     has been loaded, parsed, and has begun rendering.
        public event LoadCompletedEventHandler LoadCompleted;
        //
        // Summary:
        //     Occurs when the content that is being navigated to by a navigator in the
        //     application has been found, although it may not have completed loading.
        public event NavigatedEventHandler Navigated;
        //
        // Summary:
        //     Occurs when a new navigation is requested by a navigator in the application.
        public event NavigatingCancelEventHandler Navigating;
        //
        // Summary:
        //     Occurs when an error occurs while a navigator in the application is navigating
        //     to the requested content.
        public event NavigationFailedEventHandler NavigationFailed;
        //
        // Summary:
        //     Occurs periodically during a download that is being managed by a navigator
        //     in the application to provide navigation progress information.
        public event NavigationProgressEventHandler NavigationProgress;
        //
        // Summary:
        //     Occurs when the StopLoading method of a navigator in the application is called,
        //     or when a new navigation is requested by a navigator while a current navigation
        //     is in progress.
        public event NavigationStoppedEventHandler NavigationStopped;
        //
        // Summary:
        //     Occurs when the user ends the Windows session by logging off or shutting
        //     down the operating system.
        public event SessionEndingCancelEventHandler SessionEnding;
        //
        // Summary:
        //     Occurs when the System.Windows.Application.Run() method of the System.Windows.Application
        //     object is called.
        public event StartupEventHandler Startup;

        // Summary:
        //     Searches for a user interface (UI) resource, such as a System.Windows.Style
        //     or System.Windows.Media.Brush, with the specified key, and throws an exception
        //     if the requested resource is not found (see Resources Overview).
        //
        // Parameters:
        //   resourceKey:
        //     The name of the resource to find.
        //
        // Returns:
        //     The requested resource object. If the requested resource is not found, a
        //     System.Windows.ResourceReferenceKeyNotFoundException is thrown.
        //
        // Exceptions:
        //   System.Windows.ResourceReferenceKeyNotFoundException:
        //     The resource cannot be found.
        public object FindResource(object resourceKey);
        //
        // Summary:
        //     Returns a resource stream for a content data file that is located at the
        //     specified System.Uri (see Windows Presentation Foundation Application Resource,
        //     Content, and Data Files).
        //
        // Parameters:
        //   uriContent:
        //     The relative System.Uri that maps to a loose resource.
        //
        // Returns:
        //     A System.Windows.Resources.StreamResourceInfo that contains a content data
        //     file that is located at the specified System.Uri. If a loose resource is
        //     not found, null is returned.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     The System.Uri that is passed to System.Windows.Application.GetContentStream(System.Uri)
        //     is null.
        //
        //   System.ArgumentException:
        //     The System.Uri.OriginalString property of the System.Uri that is passed to
        //     System.Windows.Application.GetContentStream(System.Uri) is null.
        //
        //   System.ArgumentException:
        //     The System.Uri that is passed to System.Windows.Application.GetContentStream(System.Uri)
        //     is an absolute System.Uri.
        [SecurityCritical]
        public static StreamResourceInfo GetContentStream(Uri uriContent);
        //
        // Summary:
        //     Retrieves a cookie for the location specified by a System.Uri.
        //
        // Parameters:
        //   uri:
        //     The System.Uri that specifies the location for which a cookie was created.
        //
        // Returns:
        //     A System.String value, if the cookie exists; otherwise, a System.ComponentModel.Win32Exception
        //     is thrown.
        //
        // Exceptions:
        //   System.ComponentModel.Win32Exception:
        //     A Win32 error is raised by theÂ InternetGetCookie function (called by System.Windows.Application.GetCookie(System.Uri))
        //     if a problem occurs when attempting to retrieve the specified cookie.
        public static string GetCookie(Uri uri);
        //
        // Summary:
        //     Returns a resource stream for a site-of-origin data file that is located
        //     at the specified System.Uri (see Windows Presentation Foundation Application
        //     Resource, Content, and Data Files).
        //
        // Parameters:
        //   uriRemote:
        //     The System.Uri that maps to a loose resource at the site of origin.
        //
        // Returns:
        //     A System.Windows.Resources.StreamResourceInfo that contains a resource stream
        //     for a site-of-origin data file that is located at the specified System.Uri.
        //     If the loose resource is not found, null is returned.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     The System.Uri that is passed to System.Windows.Application.GetRemoteStream(System.Uri)
        //     is null.
        //
        //   System.ArgumentException:
        //     The System.Uri.OriginalString property of the System.Uri that is passed to
        //     System.Windows.Application.GetRemoteStream(System.Uri) is null.
        //
        //   System.ArgumentException:
        //     The System.Uri that is passed to System.Windows.Application.GetRemoteStream(System.Uri)
        //     is either not relative, or is absolute but not in the pack://siteoforigin:,,,/
        //     form.
        [SecurityCritical]
        public static StreamResourceInfo GetRemoteStream(Uri uriRemote);
        //
        // Summary:
        //     Returns a resource stream for a resource data file that is located at the
        //     specified System.Uri (see Windows Presentation Foundation Application Resource,
        //     Content, and Data Files).
        //
        // Parameters:
        //   uriResource:
        //     The System.Uri that maps to an embedded resource.
        //
        // Returns:
        //     A System.Windows.Resources.StreamResourceInfo that contains a resource stream
        //     for resource data file that is located at the specified System.Uri. If the
        //     resource located at the specified System.Uri is not found, null is returned.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     The System.Uri that is passed to System.Windows.Application.GetResourceStream(System.Uri)
        //     is null.
        //
        //   System.ArgumentException:
        //     The System.Uri.OriginalString property of the System.Uri that is passed to
        //     System.Windows.Application.GetResourceStream(System.Uri) is null.
        //
        //   System.ArgumentException:
        //     The System.Uri that is passed to System.Windows.Application.GetResourceStream(System.Uri)
        //     is either not relative, or is absolute but not in the pack://application:,,,/
        //     form.
        [SecurityCritical]
        public static StreamResourceInfo GetResourceStream(Uri uriResource);
        //
        // Summary:
        //     Loads a XAML file that is located at the specified uniform resource identifier
        //     (URI), and converts it to an instance of the object that is specified by
        //     the root element of the XAML file.
        //
        // Parameters:
        //   resourceLocator:
        //     A System.Uri that maps to a relative XAML file.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     resourceLocator is null.
        //
        //   System.ArgumentException:
        //     The System.Uri.OriginalString property of the resourceLocatorSystem.Uri parameter
        //     is null.
        //
        //   System.ArgumentException:
        //     The resourceLocator is an absolute URI.
        //
        //   System.Exception:
        //     The file is not a XAML file.
        public static object LoadComponent(Uri resourceLocator);
        //
        // Summary:
        //     Loads a XAML file that is located at the specified uniform resource identifier
        //     (URI) and converts it to an instance of the object that is specified by the
        //     root element of the XAML file.
        //
        // Parameters:
        //   component:
        //     An object of the same type as the root element of the XAML file.
        //
        //   resourceLocator:
        //     A System.Uri that maps to a relative XAML file.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     component is null.
        //
        //   System.ArgumentNullException:
        //     resourceLocator is null.
        //
        //   System.ArgumentException:
        //     The System.Uri.OriginalString property of the resourceLocatorSystem.Uri parameter
        //     is null.
        //
        //   System.ArgumentException:
        //     The resourceLocator is an absolute URI.
        //
        //   System.Exception:
        //     component is of a type that does not match the root element of the XAML file.
        [SecurityCritical]
        public static void LoadComponent(object component, Uri resourceLocator);
        //
        // Summary:
        //     Raises the System.Windows.Application.Activated event.
        //
        // Parameters:
        //   e:
        //     An System.EventArgs that contains the event data.
        protected virtual void OnActivated(EventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.Deactivated event.
        //
        // Parameters:
        //   e:
        //     An System.EventArgs that contains the event data.
        protected virtual void OnDeactivated(EventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.Exit event.
        //
        // Parameters:
        //   e:
        //     An System.Windows.ExitEventArgs that contains the event data.
        protected virtual void OnExit(ExitEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.FragmentNavigation event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.Navigation.FragmentNavigationEventArgs that contains the
        //     event data.
        protected virtual void OnFragmentNavigation(FragmentNavigationEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.LoadCompleted event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.Navigation.NavigationEventArgs that contains the event data.
        protected virtual void OnLoadCompleted(NavigationEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.Navigated event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.Navigation.NavigationEventArgs that contains the event data.
        protected virtual void OnNavigated(NavigationEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.Navigating event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.Navigation.NavigatingCancelEventArgs that contains the event
        //     data.
        protected virtual void OnNavigating(NavigatingCancelEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.NavigationFailed event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.Navigation.NavigationFailedEventArgs that contains the event
        //     data.
        protected virtual void OnNavigationFailed(NavigationFailedEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.NavigationProgress event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.Navigation.NavigationProgressEventArgs that contains the
        //     event data.
        protected virtual void OnNavigationProgress(NavigationProgressEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.NavigationStopped event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.Navigation.NavigationEventArgs that contains the event data.
        protected virtual void OnNavigationStopped(NavigationEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.SessionEnding event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.SessionEndingCancelEventArgs that contains the event data.
        protected virtual void OnSessionEnding(SessionEndingCancelEventArgs e);
        //
        // Summary:
        //     Raises the System.Windows.Application.Startup event.
        //
        // Parameters:
        //   e:
        //     A System.Windows.StartupEventArgs that contains the event data.
        protected virtual void OnStartup(StartupEventArgs e);
        //
        // Summary:
        //     Starts a Windows Presentation Foundation (WPF) application.
        //
        // Returns:
        //     The System.Int32 application exit code that is returned to the operating
        //     system when the application shuts down. By default, the exit code value is
        //     0.
        //
        // Exceptions:
        //   System.InvalidOperationException:
        //     System.Windows.Application.Run() is called from a browser-hosted application
        //     (for example, an XAML browser application (XBAP)).
        public int Run();
        //
        // Summary:
        //     Starts a Windows Presentation Foundation (WPF) application and opens the
        //     specified window.
        //
        // Parameters:
        //   window:
        //     A System.Windows.Window that opens automatically when an application starts.
        //
        // Returns:
        //     The System.Int32 application exit code that is returned to the operating
        //     system when the application shuts down. By default, the exit code value is
        //     0.
        //
        // Exceptions:
        //   System.InvalidOperationException:
        //     System.Windows.Application.Run() is called from a browser-hosted application
        //     (for example, an XAML browser application (XBAP)).
        [SecurityCritical]
        public int Run(Window window);
        //
        // Summary:
        //     Creates a cookie for the location specified by a System.Uri.
        //
        // Parameters:
        //   uri:
        //     The System.Uri that specifies the location for which the cookie should be
        //     created.
        //
        //   value:
        //     The System.String that contains the cookie data.
        //
        // Exceptions:
        //   System.ComponentModel.Win32Exception:
        //     A Win32 error is raised by the InternetSetCookie functionÂ (called by System.Windows.Application.SetCookie(System.Uri,System.String))
        //     if a problem occurs when attempting to create the specified cookie.
        public static void SetCookie(Uri uri, string value);
        //
        // Summary:
        //     Shuts down an application.
        public void Shutdown();
        //
        // Summary:
        //     Shuts down an application that returns the specified exit code to the operating
        //     system.
        //
        // Parameters:
        //   exitCode:
        //     An integer exit code for an application. The default exit code is 0.
        [SecurityCritical]
        public void Shutdown(int exitCode);
        //
        // Summary:
        //     Searches for the specified resource.
        //
        // Parameters:
        //   resourceKey:
        //     The name of the resource to find.
        //
        // Returns:
        //     The requested resource object. If the requested resource is not found, a
        //     null reference is returned.
        public object TryFindResource(object resourceKey);
    }
}
