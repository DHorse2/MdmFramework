~SYS.INCL.SCHED.CHECK~
*CODE.SEGMENT: SYS.INCL.SCHED.CHECK
* AUTHOR: DAVID HORSMAN
* DATE WRITTEN: 9 SEP 89
* (c) Copyright 1988, 1989, 1990
* MACROSCOPE DESIGN MATRIX
*
IF NOT(SCHED.OK) THEN
SCHED.OK = TRUE
DT = DATE()
*
DT.VM.MAX = DCOUNT(SCHED.FLAG<6>,VM)
*
IF NOT(DT.VM.MAX) THEN DT.VM = ONE ELSE
*
LOCATE DT IN SCHED.FLAG<6> BY "AR" SETTING DT.VM ELSE
DT.VM = DT.VM - (DT.VM GT ONE)
END
*
IF DT GE SCHED.FLAG<6,DT.VM> THEN
IF DT GT SCHED.FLAG<7,DT.VM> AND SCHED.FLAG<7,DT.VM> THEN DT.VM = ONE
END
*
END
*
IF SCHED.FLAG<8,DT.VM> THEN SCHED.OK = FALSE ELSE
*
TM = TIME()
TM.VM.MAX = DCOUNT(SCHED.FLAG<9>,VM)
*
IF NOT(TM.VM.MAX) THEN TM.VM = ONE ELSE
IF TM.VM.MAX GE DT.VM THEN TM.VM = DT.VM ELSE TM.VM = ONE
END
*
TM.SVM.MAX = DCOUNT(SCHED.FLAG<9,TM.VM>,SVM)
*
IF NOT(TM.SVM.MAX) THEN TM.SVM.MAX = ONE
*
BEGIN CASE
*
CASE TM.SVM.MAX EQ ONE
TM.SVM = ONE
*
CASE TM.SVM.MAX EQ 7
TM.SVM = DT - (INT(DT/7) * 7)
IF NOT(TM.SVM) THEN TM.SVM = 7
TM.SVM = TM.SVM - ONE
IF NOT(TM.SVM) THEN TM.SVM = 7
IF TM GT SCHED.FLAG<TEN,TM.VM,TM.SVM> OR SCHED.FLAG<9,TM.VM,TM.SVM> LE SCHED.FLAG<TEN,TM.VM,TM.SVM> THEN
TM.SVM = TM.SVM + ONE
IF TM.SVM GT 7 THEN TM.SVM = ONE
END
*
CASE TM.SVM.MAX GE 28 AND TM.SVM.MAX LE 31
TM.SVM = (OCONV(DT,"DTWO"))[ONE,2]
TM.SVM = TM.SVM - ONE
IF NOT(TM.SVM) THEN
MM = OCONV(DT,"D2/")[ONE,TWO]; TM.SVM = 31; YY = OCONV(DT,"D2/")[7,TWO]
MM = MM - ONE
LOOP UNTIL ICONV(MM:"/":TM.SVM:"/":YY,"D") DO TM.SVM = TM.SVM - ONE REPEAT
IF TM.SVM GT TM.SVM.MAX THEN TM.SVM = TM.SVM.MAX
END
IF TM GT SCHED.FLAG<TEN,TM.VM,TM.SVM> OR SCHED.FLAG<9,TM.VM,TM.SVM> LE SCHED.FLAG<TEN,TM.VM,TM.SVM> THEN TM.SVM = TM.SVM + ONE; IF TM.SVM GT 31 THEN TM.SVM = ONE
*
CASE TRUE
TM.SVM = DT - SCHED.FLAG<6,DT.VM> + TRUE
IF TM.SVM GT TRUE AND TM.SVM LE TM.SVM.MAX THEN
TM.SVM = TM.SVM - TRUE
IF TM GT SCHED.FLAG<TEN,TM.VM,TM.SVM> OR SCHED.FLAG<9,TM.VM,TM.SVM> LE SCHED.FLAG<TEN,TM.VM,TM.SVM> THEN TM.SVM = TM.SVM + TRUE
END
IF TM.SVM GT TM.SVM.MAX THEN TM.SVM = TM.SVM.MAX
END CASE
*
*
TM.START = SCHED.FLAG<9,TM.VM,TM.SVM>
TM.END  = SCHED.FLAG<TEN,TM.VM,TM.SVM>
IF NOT(TM.END) THEN TM.END = 86400
IF TM.START EQ TM.END THEN
IF TM.START EQ ZERO THEN TM.START = 0; TM.END = 86400 ELSE
IF TM.START LE 43200 THEN TM.END = TM.END + 43200 ELSE
IF TM.START = 86400 THEN TM.START = ZERO ELSE TM.END = 86400
END
END
END
*
BEGIN CASE
CASE TM.START LT TM.END
IF TM GE TM.START AND TM LE TM.END THEN IN.RANGE = TRUE ELSE IN.RANGE = FALSE
CASE TM.START GT TM.END
IF TM GE TM.START OR  TM LE TM.END THEN IN.RANGE = TRUE ELSE IN.RANGE = FALSE
END CASE
*
IF (IN.RANGE AND SCHED.FLAG<ELEVEN,TM.VM,TM.SVM>) OR NOT(IN.RANGE OR SCHED.FLAG<ELEVEN,TM.VM,TM.SVM>) THEN SCHED.OK = FALSE
*
END; *@ OF SCHED.FLAG<8>
*
END; *@ OF SCHED.OK
*
~SYS.INCL.SCHED.CHECK.READ~
*CODE.SEGMENT: SYS.INCL.SCHED.CHECK.READ
*
* AUTHOR: DAVID HORSMAN
*
* DATE WRITTEN: APR 89
*
* (c) Copyright 1988, 1989, 1990
* MACROSCOPE DESIGN MATRIX
*
READ SCHED.FLAG FROM PAR.FILE,FKEY.ID THEN FKEY.FOUND = TRUE; SCHED.OK = FALSE ELSE SCHED.OK = TRUE; FKEY.FOUND = FALSE 
*
~SYS.SCHED.HSREAD~
SUBROUTINE SYS.SCHED.HSREAD(P.ENT,P.V1,P.V2,P.V3,H.S)
*SUBROUTINE: SYS.SCHED.HSREAD
*
* AUTHOR: DAVID G. HORSMAN
*
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
SYS.PROG = "SYS.SCHED.HSREAD":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
*
GOSUB H.S.READ
*
End.of.prog: * bypass GOTO for abnormal end.
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
RETURN
!
H.S.READ: * Determine the next available step on a task.
DISP.WRITE = 0
IF P.ENT = 0 THEN DISP.WRITE = 1
READ PL.REC FROM PS.FILE,"@J@":STRUCT(2):"@":P.V3 ELSE
PL.REC = ""
PL.REC<19> = 0
DISP.WRITE = 1
END
CN.STEP = PL.REC<19>
IF LEN(CN.STEP) = 0 THEN CN.STEP = 0
IF NOT(NUM(CN.STEP)) THEN CN.STEP = 0
IF P.ENT = 0 THEN CN.STEP = CN.STEP + 1
PRINT @(0,21):CLS:@(0,22):"Task # ":P.V3:
IF SCH.FLAG # 5 ! P.ENT = 0 THEN PRINT ", ":PL.REC<1>:
CN.T = 0
LOOP
CN.T = CN.T + 1
WHILE CN.T < CN.STEP + 1 ! PL.REC<CN.T+20> # "" DO
IF CN.T > CN.STEP THEN
CN.STEP = CN.T
IF P.ENT = 0 THEN CN.STEP = CN.STEP + 1
DISP.WRITE = 1
END
IF P.ENT = 0 & CN.T = CN.STEP THEN
PL.REC<CN.T+20,1> = "DS"
IF PL.REC<CN.T+20,2> # P.V2 THEN PL.REC<CN.T+20,2> = P.V1
DISP.WRITE = 1
END
IF PL.REC<CN.T+20,3> # P.V3 THEN
PL.REC<CN.T+20,3> = P.V3
DISP.WRITE = 1
END
IF PL.REC<CN.T+20,4> # CN.T THEN
PL.REC<CN.T+20,4> = CN.T
DISP.WRITE = 1
END
IF PL.REC<CN.T+20,1> = "" THEN
PL.REC<CN.T+20,1> = "?"
DISP.WRITE = 1
END
IF SCH.FLAG # 5 ! P.ENT = 0 THEN PRINT @(0,23):CLL:"Step # ":CN.T:", ":PL.REC<CN.T+20,2>:
IF WAIT.FLAG THEN FOR WAIT.TEMP = 1 TO WAIT.FLAG; RQM; NEXT WAIT.TEMP
REPEAT
IF LEN(PL.REC<1>) = 0 THEN
PRINT @(0,22):CLL:BELL:"Enter Task Description: ":
RSP = ""
INPUT RSP:
PL.REC<1> = RSP
END
PRINT @(0,22):CLL:"Task # ":P.V3:
IF SCH.FLAG # 5 ! P.ENT = 0 THEN PRINT ", ":PL.REC<1>:
IF DISP.WRITE THEN
PL.REC<19> = CN.STEP
WRITE PL.REC ON PS.FILE,"@J@":STRUCT(2):"@":P.V3
END
H.S = CN.STEP
PRINT @(0,21):CLL:"For task # ":P.V3:" your high STEP is ":H.S:
IF WAIT.FLAG THEN FOR WAIT.TEMP = 1 TO WAIT.FLAG; RQM; NEXT WAIT.TEMP
PL.REC = ""
RETURN
*
*
END
~SYS.SCHED.HTROUTINE~
SUBROUTINE SYS.SCHED.HTROUTINE
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.CPORT
*
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
DIM MODE.DESC(30), STAT.DESC(15)
*
$INCLUDE IBP SYS.INCL.USER.MODE.DESC
$INCLUDE IBP SYS.INCL.STATUS.CHECK
$INCLUDE IBP SYS.INCL.STATUS.DESC
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.SALES.MODE
$INCLUDE IBP SYS.INCL.LO.TCL.MODE
$INCLUDE IBP SYS.INCL.LO.TRAIN.MODE
$INCLUDE IBP SYS.INCL.HI.TRAIN.MODE
*
SYS.PROG = "SYS.SCHED.HSREAD":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
SYS.PROG.DESC = "Task Viewing Utility"
SCR.HEADING = SYS.PROG.DESC
*
*
* P.ENT = 1      Print tasks report
* P.ENT = 2      Display task report
* P.ENT = 3      ???????
* P.ENT >= 900    Locate highest task quickly
*
CN = 1; CPAGE = 1; CPAGETEN = 0
P.ENT = SUBR.FUNCTION<1>
H.T = SUBR.SUB.FUNCTION<1>
SUBR.FUNCTION<1> = ""
IF P.ENT EQ 1 OR P.ENT EQ 2 THEN
OUT.TO.DEVICE = 1
END ELSE
OUT.TO.DEVICE = 0
END
*
GOSUB H.T.ROUTINE
*
End.of.prog: * bypass GOTO for abnormal end.
*
CALL.SUB.FUNCTION<1> = ""
IF SUBR.FUNCTION<1> = "" THEN
SUBR.FUNCTION<1> = P.ENT
IF P.ENT > 900 THEN
SUBR.SUB.FUNCTION<1> = H.T.READ
END ELSE
SUBR.SUB.FUNCTION<1> = H.T
END
END ELSE
CALL.SUB.FUNCTION<1> = SUBR.FUNCTION<1>:" ":SUBR.SUB.FUNCTION<1>
END
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
RETURN
!
H.T.ROUTINE: * Subroutine to Display and Determine next Journal
IF P.ENT = 2 THEN
ERROR.CODE = "2900221"
ERROR.TEXT = "Should I print this on the printer? "
ERROR.RSP = "N"
GOSUB ERROR.CONTROL
IF INDEX(YES,"*":ERROR.RSP:"*",1) # 0 THEN
OUT.TO.PRINT = 1
SCR.LINES = 50
END ELSE
OUT.TO.PRINT = 0
SCR.LINES = 20
END
*
ERROR.CODE = "2900221"
ERROR.TEXT = "Enter the status you would like to process: "
ERROR.RSP = ""
GOSUB ERROR.CONTROL
IF ERROR.RSP = "" THEN ERROR.RSP = "*"
DISP.STATUS = ERROR.RSP[1,1]
IF NOT(INDEX(",*,+,-,?,N,D,I,H,X,Z,C,",",":DISP.STATUS:",",1)) THEN DISP.STATUS = "+"
*
*
END ELSE
SCR.LINES = 20
SCR.HEADING = "Task Viewing Utility"
OUT.TO.PRINT = ""
IF P.ENT = 1 THEN OUT.TO.PRINT = 1
DISP.STATUS = '*'
END
HI.PRINT.CN = 99
*
PRINT @(0,21):CLS:
READV H.T.READ FROM SY.FILE,"@SCHED@":CO.DATA<4>:"@HJRN",1 ELSE
H.T.READ = 1
END
*#H.T.READ = H.T
IF NOT(NUM(H.T.READ)) THEN H.T.READ = 1
IF H.T.READ LE 0 THEN H.T.READ = 1
H.T = H.T.READ
TASK.TEMP = ""
CONT5 = 1
IF P.ENT < 900 THEN H.T = 0 ELSE IF H.T.READ > 5 THEN H.T = H.T.READ - 5 ELSE H.T = 0
*
*
PRINT @(0,22):CLL:@(70,22):H.T:"-":H.T.READ:
*
LOOP
SUBR.FUNCTION<1> = ""
H.T = H.T + 1
H.K = STR("0",(5-LEN(H.T))):H.T
READ TASK.REC FROM PS.FILE,"@J@":CO.DATA<4>:"@":H.K THEN
H.D = TASK.REC<1>
IF P.ENT EQ 3 OR P.ENT > 900 THEN PRINT @(0,22):"Task # ":H.T:", ":H.D "L#50":
IF OUT.TO.DEVICE THEN
H.S = TASK.REC<19>
IF HI.PRINT.CN > SCR.LINES THEN
GOSUB S.HEADING
GOSUB S.HEADING1
IF OUT.TO.PRINT THEN HI.PRINT.CN = 5 ELSE HI.PRINT.CN = 11; PRINT @(0,11):CLS:
END
*
*
TASK.STATUS = TASK.REC<14>
TASK.VERIFY = "*":TASK.STATUS:"*"
TASK.VALID = ''
*
BEGIN CASE
CASE DISP.STATUS EQ "*"
TASK.VALID = 1
*
CASE DISP.STATUS EQ "+"
TASK.VALID = INDEX("*?*N*D*I*H**",TASK.VERIFY,1)
*
CASE DISP.STATUS EQ "-"
TASK.VALID = INDEX("*Z*X*C*P*?*",TASK.VERIFY,1)
*
CASE DISP.STATUS EQ TASK.STATUS
TASK.VALID = 1
*
CASE NOT(INDEX("*?*N*D*I*H*P*X*C*P*",TASK.VERIFY,1))
*ERROR
END CASE
IF TASK.VALID THEN
PRINT
*
*
IF LEN(H.D) > 40 THEN
HI.PRINT.CN = HI.PRINT.CN + 1
H.T.CN = 40
LOOP
H.T.CN = H.T.CN - 1
WHILE H.D[H.T.CN,1] # " " & H.T.CN > 20 DO REPEAT
H.D1 = H.D[H.T.CN,99]
H.D = H.D[1,H.T.CN]
END ELSE H.D1 = ""
*
IF OUT.TO.PRINT THEN
PRINTER ON
PRINT
END ELSE
PRINT @(0,HI.PRINT.CN):
END
*
TEMP = TASK.REC<13>
PRINT H.T "R#4":"  ":H.D "L#40":" ":TASK.REC<14> "L#3":
PRINT " ":FIELD(TEMP,"*",5) "L#8":H.S "R#3":
PRINT FIELD(TEMP,"*",1) "R#2":" ":OCONV(FIELD(TEMP,"*",2),"D2") "R#9"
HI.PRINT.CN = HI.PRINT.CN + 1
*
*:OCONV(FIELD(TEMP,"*",3),"MTS") "R#9"
IF LEN(H.D1) NE 0 OR FIELD(TEMP,"*",3) NE '' THEN
IF LEN(H.D1) LE 1 THEN H.D1 = STR(".",35)
PRINT SPACE(6):H.D1 "L#40":SPACE(8):FIELD(TEMP,"*",4) "L#9":" ":OCONV(FIELD(TEMP,"*",3),"MTS") "R#9"
HI.PRINT.CN = HI.PRINT.CN + 1
END
*
PRINT SPACE(5):"Sptm: ":TASK.REC<2>
HI.PRINT.CN = HI.PRINT.CN + 1
*
*IF OUT.TO.DEVICE THEN
COM.MAX = DCOUNT(TASK.REC<4>,VM)
FOR COM.CN = 1 TO COM.MAX
IF OUT.TO.PRINT THEN
PRINT SPACE(30):
END ELSE
*PRINT SPACE(3):
END
PRINT ("C":(COM.CN:") ") "R#5") "L#5":" ":TASK.REC<4,COM.CN>
HI.PRINT.CN = HI.PRINT.CN + 1
NEXT COM.CN
*END
*
IF OUT.TO.PRINT THEN PRINTER OFF
*HI.PRINT.CN = HI.PRINT.CN + 1
*
END ELSE
IF OUT.TO.PRINT OR OUT.TO.DEVICE THEN
PRINT TASK.STATUS:
*HI.PRINT.CN = HI.PRINT.CN + 1
END
END; *# OF TASK.VALID
*
END; *# OF OUT.TO.DEVICE
*
END ELSE
*#H.D = ""
*H.D = "not on file"
CONT5 = 0
*#H.T = H.T - 1
H.T.READ = H.T
END; *# OF READ TASK.REC
*
IF LEN(H.D) = 0 AND NOT(CONT5) AND P.ENT >= 900 THEN
ERROR.TEXT = "Enter Task Desc for # ":H.K:" : "
ERROR.CODE = "2901222"
ERROR.RSP = H.D
GOSUB ERROR.CONTROL
H.D = ERROR.RSP
*#PRINT @(0,22):CLS:"Task # ":H.T:", ":H.D:
*#H.T.READ = H.T
IF LEN(H.D) # 0 THEN
TASK.REC<1> = H.D
WRITE TASK.REC ON PS.FILE,"@J@":CO.DATA<4>:"@":H.K
END
END; *# OF LEN(H.D)=0...
*
IF NOT(CONT5) THEN PRINT @(0,22):CLS:"Task # ":H.T:", ":H.D:
*#H.T.READ = H.T
*
!
*
IF HI.PRINT.CN GT SCR.LINES THEN
IF NOT(SYSTEM(11)) THEN
FOR TEMP = 1 TO WAIT.FLAG UNTIL SYSTEM(11); RQM; NEXT TEMP
RQM
END
IF (SYSTEM(11) OR NOT(CONT5)) AND P.ENT EQ 2 THEN
ERROR.TEXT = "what Task are you working on? "
ERROR.CODE = "29002"
GOSUB ERROR.CONTROL
IF LEN(ERROR.RSP) > 0 THEN
*
IF ERROR.RSP[1,1] = "B" THEN
TEMP = ERROR.RSP[2,99]
IF NOT(NUM(TEMP)) THEN TEMP = 0
IF TEMP > 1 THEN H.T = H.T - ((TEMP-1) * 10)
IF H.T > 10 THEN H.T = H.T - 11 ELSE H.T = 0
GOSUB S.HEADING
GOSUB S.HEADING1
HI.PRINT.CN = 11; PRINT @(0,11):CLS:
CONT5 = 1
*
END ELSE IF ERROR.RSP[1,1] = "N" THEN
TEMP = ERROR.RSP[2,99]
IF NOT(NUM(TEMP)) THEN TEMP = 0
IF TEMP > 1 THEN H.T = H.T + ((TEMP-1) *10)
H.T = H.T + 9
IF H.T > H.T.READ AND H.T.READ > 0 THEN PRINT BELL:; H.T = 0
GOSUB S.HEADING
GOSUB S.HEADING1
HI.PRINT.CN = 11; PRINT @(0,11):CLS:
CONT5 = 1
*
END ELSE
IF INDEX("*TASK *TASK.*","*":ERROR.RSP[1,5]:"*",1) THEN ERROR.RSP=ERROR.RSP[6,999]
TEMP = FIELD(ERROR.RSP," ",2)
ERROR.RSP = FIELD(ERROR.RSP," ",1)
IF NUM(ERROR.RSP) THEN
IF ERROR.RSP < 1 THEN ERROR.RSP = TASK.NUM; TEMP = TASK.STEP
END ELSE ERROR.RSP = TASK.NUM; TEMP = TASK.STEP
SUBR.FUNCTION<1> = ERROR.RSP
IF NOT(NUM(TEMP)) THEN TEMP = 1
IF TEMP < 1 THEN TEMP = 1
SUBR.SUB.FUNCTION<1> = TEMP
END;* OF ELSE FOR ERROR.RSP = ???????
END;* OF LEN(ERROR.RSP)
*
END; *# of (SYSTEM(11) OR NOT(CONT5)) AND P.ENT EQ 2
END; *# of HI.PRINT.CN GT SCR.LINES 
*
IF NOT(CONT5) AND P.ENT = 2 THEN
ERROR.TEXT = 'High Task Subroutine completed'
ERROR.CODE = '19001'
GOSUB ERROR.CONTROL
IF ERROR.RSP = "B" THEN
CONT5 = 1
H.T = 0
SUBR.FUNCTION<1> = ""
END
END
*
WHILE CONT5 AND SUBR.FUNCTION<1> = "" DO REPEAT
*
IF NOT(OUT.TO.PRINT OR OUT.TO.DEVICE) THEN
IF P.ENT < 900 AND LEN(H.D) # 0 THEN
H.T = H.T + 1
P.ENT = H.T
END
WRITEV H.T ON SY.FILE,"@SCHED@":CO.DATA<4>:"@HJRN",1
PRINT @(0,21):CLL:"Your high TASK # is ":H.T:
IF WAIT.FLAG THEN PRINT BELL:; FOR WAIT.TEMP = 1 TO WAIT.FLAG; RQM; NEXT WAIT.TEMP
RQM
END
IF OUT.TO.PRINT THEN OUT.TO.PRINT = ""
RETURN
*
*
$INCLUDE IBP SYS.SCHED.HEADING
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
*
END
~SYS.SCHED.INPUT~
SUBROUTINE SYS.SCHED.INPUT(F.T,CONT.DISP,SCR.LINES,CN,P.S,P.V,P.ENT,DISP.JRNL)
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
SYS.PROG = "SYS.SCHED.INPUT":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
SYS.PROG.DESC = "System Scheduler Input Line Subroutine"
*
GOSUB INPUT.TASK
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
*
*
RETURN
!
INPUT.TASK: * Input a line for a item
*
CPAGETEN = INT( ( CN - 1) / SCR.LINES ) * SCR.LINES
ENT.LN =CN-CPAGETEN+10
P.V1 = P.V<1,2>
P.V2 = P.V<1,1>
P.V3 = P.V<1,3>
P.V4 = P.V<1,4>
P.V5 = P.V<1,5>
P.V6 = P.V<1,6>
P.V7 = P.V<1,7>
P.V10 = P.V<1,10>
P.V11 = P.V<1,11>; *# NEW FIELD (COMPANY)
*
**
*
P.ENT = P.V2
INPUT @(6,ENT.LN):P.ENT:
IF LEN(P.ENT) EQ 0 THEN P.ENT = P.V2
IF LEN(P.ENT) EQ 0 THEN P.ENT = "N"
IF P.ENT EQ "END" THEN CONT.DISP = 0 ELSE
IF P.ENT EQ "H" THEN
SAVE.F.T = F.T
F.T = P.ENT
GOSUB INPUT.DATE.CODE
F.T = SAVE.F.T
END
P.V2 = P.ENT
*
**
*
P.ENT = P.V3
IF SCH.FLAG EQ 5 THEN P.ENT = DISP.JRNL ELSE INPUT @(8,ENT.LN):P.ENT:
IF NOT(LEN(P.ENT)) THEN P.ENT = P.V3
IF NOT(NUM(P.ENT)) THEN P.ENT = 0
IF P.ENT EQ 0 THEN P.ENT = P.V3
IF P.ENT EQ 0 THEN P.ENT = 999
H.T = 1
IF P.ENT EQ 999 THEN
SUBR.FUNCTION = 999:AM:SUBR.FUNCTION
SUBR.SUB.FUNCTION = H.T:AM:SUBR.SUB.FUNCTION
CALL SYS.SCHED.HTROUTINE
IF SUBR.FUNCTION<1> = 999 THEN
H.T = SUBR.SUB.FUNCTION<1>
P.ENT = H.T
END
SUBR.FUNCTION = DELETE(SUBR.FUNCTION,1)
SUBR.SUB.FUNCTION = DELETE(SUBR.SUB.FUNCTION,1)
END
IF P.ENT = "END" THEN CONT.DISP = 0 ELSE
P.V3 = STR("0",(5-LEN(P.ENT))):P.ENT
*
**
*
*#P.ENT = P.V1
*#INPUT @(6,ENT.LN):P.ENT:
*#IF LEN(P.ENT) = 0 THEN P.ENT = P.V1
*#IF P.ENT = "END" THEN CONT.DISP = 0 ELSE
*#P.V1 = P.ENT
*
**
*
P.ENT = P.V4
PRINT @(14,ENT.LN):"  ":
INPUT @(14,ENT.LN):P.ENT:
IF NOT(LEN(P.ENT)) THEN P.ENT = P.V4
IF NOT(NUM(P.ENT)) THEN P.ENT = 0
IF LEN(P.ENT) = 0 THEN P.ENT = 0
H.S = 0
CALL SYS.SCHED.HSREAD(P.ENT,P.V1,P.V2,P.V3,H.S)
IF P.ENT = 0 THEN P.ENT = H.S
IF P.ENT = "END" THEN CONT.DISP = 0 ELSE
P.V4 = P.ENT
*
**
*
P.ENT = P.V1
INPUT @(17,ENT.LN):P.ENT:
IF LEN(P.ENT) = 0 THEN P.ENT = P.V1
IF P.ENT = "END" THEN CONT.DISP = 0 ELSE
P.V1 = P.ENT
*
**
*
LOOP
P.ENT = ""
INPUT @(53,ENT.LN):P.ENT:
IF P.ENT = "CLEAR" THEN P.V7 = ""; P.ENT = ""
IF LEN(P.ENT) = 0 THEN P.ENT = OCONV(P.V7,"D2")
IF P.ENT = "C" THEN P.ENT = OCONV(DATE(),"D2")
IF ICONV(P.ENT,"D2") = 0 THEN P.ENT = "REPEAT"
IF P.ENT = "END" THEN CONT.DISP = 0 ELSE
P.V7 = ICONV(P.ENT,"D2")
END
WHILE P.ENT = "REPEAT" DO PRINT BELL: REPEAT
END
END
END
END
IF P.ENT # "END" THEN
P.S<CN,2> = P.V1
P.S<CN,1> = P.V2
IF LEN(P.V3) < 5 THEN P.V3 = STR("0",(5-LEN(P.V3))):P.V3
P.S<CN,3> = P.V3
P.S<CN,4> = P.V4
P.S<CN,5> = P.V5
P.S<CN,6> = P.V6
P.S<CN,7> = P.V7
P.S<CN,10> = P.V10
IF NOT(LEN(P.V11)) THEN P.V11 = CO.DATA<3>
P.S<CN,11> = P.V11
P.V = P.S<CN>
PR.FL = 0
*GOSUB P.TASK
END
RETURN
*
$INCLUDE IBP SYS.INPUT.DATE.CODE
*
!
END
~SYS.SCHED.LOAD~
SUBROUTINE SYS.SCHED.LOAD
*#
$INCLUDE IBP SYS.COMMON
*#
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.CPORT
*#
DIM MODE.DESC(30),STAT.DESC(15)
*#
$INCLUDE IBP SYS.INCL.SYS.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP.SYNONYM
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.MENU.RSP
*#
$INCLUDE IBP SYS.INCL.AVG.DAY
$INCLUDE IBP SYS.INCL.USER.MODE.DESC
$INCLUDE IBP SYS.INCL.STATUS.CHECK
$INCLUDE IBP SYS.INCL.STATUS.DESC
*#
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.DEV.MODE
*#
SYS.PROG = "SYS.SCHED.LOAD":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
SYS.PROG.DESC = "System Scheduler Input Line Subroutine"
EQ.PROG.STATUS = TRUE
*#
*#
$INCLUDE IBP SYS.INCL.STAT.LINE
IF SYS.ABORT OR USER.ABORT THEN RETURN
SYS.ABORT = 0; USER.ABORT = 0
FIRST = 3
TASK.PRVL = ''
TOP.DISPLAY.FLAG = 0
*
SYS.SLOC<1> = "FILES"
DISP.JRNL = ""
*
LOOP
SYS.SLOC<1> = "LOCK"
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
$INCLUDE IBP SYS.INCL.STAT.LINE
$INCLUDE IBP SYS.INCL.11.ABORT
LCK.STAT = 0
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 & LCK.STAT < 9000 AND NOT(SYS.ABORT OR USER.ABORT) DO REPEAT
*
IF LCK.STAT # PORT+1 THEN
ERROR.TEXT = "The reading of your user record was unsuccessful"
ERROR.CODE = 15110
GOSUB ERROR.CONTROL
SYS.ABORT = LCK.STAT
END ELSE
READV TEMP FROM SY.FILE,SYS.ITEM,70 ELSE TEMP = 0
IF TEMP = 0 THEN
TEMP = PORT+1
WRITEV TEMP ON SY.FILE,SYS.ITEM,70
END
STRUCT(70) = TEMP
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
*
IF TEMP # PORT+1 & TEMP > 0 THEN
ERROR.TEXT = "you are using the scheduler on PORT ":STRUCT(70)-1:"...(SYS FORCE)"
ERROR.CODE = 15111
GOSUB ERROR.CONTROL
SYS.ABORT = LCK.STAT
IF ERROR.RSP = "SYS FORCE" THEN
SYS.ABORT = 0
STRUCT(70) = PORT+1
WRITEV STRUCT(70) ON SY.FILE,SYS.ITEM
END
END
END
*
IF USER.ABORT OR SYS.ABORT THEN RETURN
*
*
*@*LOCK
LOOP
LCK.STAT = 1
SYS.ITEM = "@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 AND LCK.STAT < 9000 AND NOT(SYS.ABORT OR USER.ABORT) DO REPEAT
*
IF LCK.STAT # PORT+1 THEN
SYS.ABORT = LCK.STAT
END ELSE
READ P.S FROM SY.FILE,SYS.ITEM ELSE P.S = ""
END
*
IF USER.ABORT ! SYS.ABORT THEN NULL ELSE
*
**
* PROMPT FOR OVERRIDE
*
PRINT "[=|"
ERROR.RSP = ''
ERROR.TEXT = "do you want to reload loaded steps? "
ERROR.CODE = 19001
GOSUB ERROR.CONTROL
RSP = ERROR.RSP
IF INDEX(YES,"*":RSP:"*",1) THEN RELOAD.FLAG = 1 ELSE RELOAD.FLAG = ''
*
**
*
* TASK
*
GOSUB Load.Task
*
*#PRINTER ON
LOOP WHILE LEN(TASK.PRVL) AND NOT(SYS.ABORT OR USER.ABORT) DO
PRINTER ON
PRINT TASK.PRVL<1>
PRINTER OFF
PRINT TASK.PRVL<1>
TASK.PRVL = DELETE(TASK.PRVL,1)
REPEAT
*#PRINTER OFF
*
TEMP = 0
MAX.CN = DCOUNT(P.S,AM)
LOOP
TEMP = TEMP+1
IF P.S<TEMP> EQ "" OR P.S<TEMP> EQ VM:VM:VM:VM:VM THEN
P.S = DELETE(P.S,TEMP,0,0)
TEMP = TEMP - 1
MAX.CN = MAX.CN - 1
END
PRINT ".":
WHILE TEMP < MAX.CN DO REPEAT
*
SYS.ITEM = "@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
WRITE P.S ON SY.FILE,SYS.ITEM
$INCLUDE IBP SYS.INCL.STAT.LINE
*#
*#
END; * OF ABORT
*
*
*IF NOT(SYS.ABORT OR USER.ABORT) THEN
OLD.CALL.SUB.FUNCTION = "DAILY"
*
*
SCH.FLAG = 2
OLD.SCH.FLAG = 2
GOSUB UPDATE.FILE
GOSUB RECORD.SCHEDULE
*END
SYS.FILE = "PSD"; SYS.ITEM = "@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
CALL SYS.UNLOCK.ITEM
*
*
End.of.prog: * bypass GOTO for abnormal end.
*
*
IF NOT(SYS.ABORT >= 9000) THEN
LOOP
LCK.STAT = 1
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 & LCK.STAT < 9000 AND NOT(SYS.ABORT OR USER.ABORT) DO REPEAT
*
IF LCK.STAT # PORT+1 THEN
ERROR.TEXT = "The reading of your user record was unsuccessful"
ERROR.CODE = 15110
GOSUB ERROR.CONTROL
SYS.ABORT = LCK.STAT
END ELSE
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
READV TEMP FROM SY.FILE,SYS.ITEM,70 ELSE TEMP = 0
IF TEMP = PORT+1 THEN
TEMP = 0
STRUCT(70) = 0
WRITEV TEMP ON SY.FILE,SYS.ITEM,70
READV TEMP FROM SY.FILE,SYS.ITEM,21 ELSE TEMP = ""
CN = 0
LOOP CN = CN + 1 WHILE (CN LT 20 AND TEMP<1,CN> NE "") AND NOT(SYS.ABORT OR USER.ABORT) DO
IF NOT(NUM(TEMP<1,CN>)) THEN TEMP<1,CN> = 0
IF LEN(TEMP<1,CN>) = 0 THEN TEMP<1,CN> = 0
IF TEMP<1,CN>  NE "" AND TEMP<1,CN> NE 0 THEN TEMP<1,CN> = 2
REPEAT
STRUCT(21) = TEMP
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
WRITEV TEMP ON SY.FILE,SYS.ITEM,21
GOSUB RECORD.SCHEDULE
END
END
CALL SYS.UNLOCK.ITEM
END; * OF LCK.STAT
*
*
LCK.STAT = 0
SYS.ITEM = "@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
CALL SYS.UNLOCK.ITEM
*
*
ERROR.TEXT = "Enter <CR> to return the menu. . . "
ERROR.CODE = "19002"
GOSUB ERROR.CONTROL
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
*
*
RETURN
!
Load.Task: * Input a line for a item
*
*#PRINT @(0,5):CLS:"Stategic Planning - Daily Schedule Loading":
TASK.PRVL = TASK.PRVL:AM:FF:"[=| Stategic Planning - Daily Schedule Loading":AM:"[=| ":AM:"[=| "
*
*SYS.FILE = "SYS"
*SYS.ITEM = "CO.DATA"
*READ CO.DATA FROM SY.FILE,SYS.ITEM ELSE CO.DATA = AM:DATE()
$INCLUDE IBP SYS.INCL.COMPANY.READ
CO.PREFIX1 = CO.DATA<4>
CO.PREFIX2 = CO.DATA<3>
CLIENT.TO.LIST = CO.DATA<4>
SYS.PREFIX = "@SYS@SPTM@":CO.PREFIX1:"@M@":CO.PREFIX2:"@"
*
SYS.LIST = 1
SYS.FILE = ''
SYS.ITEM = ''
SYS.TASK = 0
SYS.STEP = 0
SYS.PREFIX1 = "@J@":CO.PREFIX1:"@"
IF LEN(CALL.FUNCTION<1>) THEN
IF CALL.FUNCTION[1,6] EQ "@LIST@"  OR CALL.FUNCTION[1,1] EQ "(" THEN
IF CALL.FUNCTION[1,1] EQ "(" THEN
SYS.FILE = FIELD(CALL.FUNCTION<1>[2,999]," ",1)
SYS.ITEM = FIELD(CALL.FUNCTION<1>," ",2)
END ELSE
SYS.FILE = "LISTS"
SYS.ITEM = FIELD(CALL.FUNCTION<1>," ",1)
END
SYS.LIST = 2
END ELSE
*TASK SPECIFIC
IF SUBR.SUB.FUNCTION<1> EQ "TASK" THEN
SYS.TASK = FIELD(CALL.FUNCTION<1>," ",1)
IF SYS.TASK EQ "*" OR SYS.TASK EQ "ALL" THEN SYS.TASK = "]"
IF SYS.TASK EQ "" THEN SYS.TASK = TASK.NUM
TC = 1
LOOP
LOOP TC.CHAR = SYS.TASK[TC,1] WHILE NOT(INDEX("1234567890]",TC.CHAR,1)) AND TC.CHAR NE "" DO
SYS.TASK = SYS.TASK[2,9999]
REPEAT
WHILE TC LT LEN(SYS.TASK) DO TC = TC + 1 REPEAT
IF NOT(INDEX(SYS.TASK,"]",1)) THEN
IF NOT(NUM(SYS.TASK)) THEN SYS.TASK = TASK.NUM
END
*
IF SYS.TASK EQ "" OR NOT(NUM(SYS.TASK) OR INDEX(SYS.TASK,"]",1)) THEN SYS.TASK = TASK.NUM
SYS.STEP = FIELD(CALL.FUNCTION<1>," ",2)
IF SYS.STEP EQ "" OR NOT(NUM(SYS.STEP)) THEN SYS.STEP = 0
IF SYS.STEP LE 0 THEN
IF SYS.TASK EQ TASK.NUM THEN SYS.STEP = TASK.STEP ELSE SYS.STEP = 1
END
IF NUM(SYS.TASK) THEN
SYS.PREFIX1 = SYS.PREFIX1:(100000+SYS.TASK)[2,5]
SYS.LIST = 0
END ELSE
SYS.LIST = 1
END
END ELSE IF SUBR.SUB.FUNCTION<1> EQ "ALL" THEN
*
*GLOBAL SELECT
*
SYS.LIST = 1
END ELSE
*
*REGULAR SELECT
*
SYS.LIST = 1
END
END
END
SLIST = ""
USER.TO.LIST = ""
LP.LOCT = ""
T.CN = -1
PRINT @(0,5):CLS:"Stategic Planning - Daily Schedule Loading":
PRINT @(0,12):"Selecting documents. . . ":
TASK.PRVL = TASK.PRVL:AM:"[=| ":AM:"[=| ":"[=| ":@(0,5):CLS:"[=| Stategic Planning - Daily Schedule Loading"
TASK.PRVL = TASK.PRVL:AM:"[=| ":AM:"[=| Selecting documents. . . ":AM:"[=| ":AM
*
IF SYS.LIST EQ 2 THEN
EXEC.VERB = 'QSELECT ':SYS.FILE:' ':SYS.ITEM
END ELSE IF SYS.LIST EQ 1 THEN
EXEC.VERB = 'SSELECT PSD EQ "':SYS.PREFIX1:']" WITH STATUS EQ "N" OR "I" OR "D" OR "H" OR ""'
*EXEC.VERB = 'SELECT PSD "':SYS.PREFIX1:'" WITH STATUS EQ "N" OR "I" OR "D" OR "H" OR ""'
END ELSE
EXEC.VERB = 'SELECT PSD "':SYS.PREFIX1:'"'
* WITH STATUS EQ "N" OR "I" OR "D" OR "H" OR ""'
*EXEC.VERB = 'SSELECT PSD EQ "':SYS.PREFIX1:']" WITH STATUS EQ "N" OR "I" OR "D" OR "H" OR ""'
END
TASK.PRVL = TASK.PRVL:AM:"[=| "
TASK.PRVL = TASK.PRVL:AM:"[=| ":STR("=",40):" |=]"
TASK.PRVL = TASK.PRVL:AM:"[=| ":STR("=",40):" |=]"
TASK.PRVL = TASK.PRVL:AM:"[=| ":EXEC.VERB
* WITH SUMMARY-KEY EQ "M@':CO.PREFIX2:'@]"'
EXEC.INPUT = 'SAVE-LIST PSD@TEMP@':PORT
TASK.PRVL = TASK.PRVL:AM:"[=| ":EXEC.INPUT
EXEC.RESULTS = ''
PRINT
PRINT EXEC.VERB
*EXECUTE EXEC.VERB, //SELECT. > SLIST, //OUT. > EXEC.RESULTS
*EXECUTE EXEC.VERB, //IN. < EXEC.INPUT, //OUT. > EXEC.RESULTS
EXECUTE EXEC.VERB, //SELECT. > SLIST
*, //OUT. > EXEC.RESULTS
PRINT BELL:
TASK.PRVL = TASK.PRVL:BELL
*, //IN. < EXEC.INPUT
* //SELECT. > SLIST,
$INCLUDE IBP SYS.INCL.11.ABORT
SELECTED.CN = ""
IF NOT(SYS.ABORT OR USER.ABORT) THEN
TEMP = DCOUNT(EXEC.RESULTS,AM)
FOR CN = 1 TO TEMP
TEMP1 = INDEX(EXEC.RESULTS<CN>,"selected",1)
IF TEMP1 THEN
SELECTED.CN = EXEC.RESULTS<CN>[1,TEMP1]
END
*#PRINT EXEC.RESULTS<CN>
TASK.PRVL = TASK.PRVL:AM:"[=| ":EXEC.RESULTS<CN> "L#50":" |=] "
NEXT CN
IF SELECTED.CN NE "" THEN
IF NOT(NUM(SELECTED.CN)) THEN SYS.ABORT = 8
END ELSE
*
*#EXEC.VERB = 'COPY-LIST PSD@TEMP@':PORT:' (O,D)'
*#EXEC.INPUT = '(PSD ':SYS.PREFIX:CLIENT.TO.LIST:'@TASK@LIST'
*#PRINT
*#PRINT EXEC.VERB
*#EXECUTE EXEC.VERB, //IN. < EXEC.INPUT
*#PRINT BELL:
*#*
*EXEC.VERB = 'GET-LIST "PSD@TEMP':PORT:'"'
*EXEC.INPUT = ""
*PRINT
*PRINT EXEC.VERB
*EXECUTE EXEC.VERB, //SELECT. > SLIST
*#PRINT BELL:
PRINT
PRINT "  .....   "
PRINT
RQM
*
PRINT @(0,8):CLS
PRINT "Daily Schedule Loading started at ":OCONV(TIME(),"MTS"):". Date........":OCONV(DATE(),"D2"):
TASK.PRVL = TASK.PRVL:AM:"[=| ":AM:"[=| ":AM:"[=| Daily Schedule Loading started at ":OCONV(TIME(),"MTS"):". Date........":OCONV(DATE(),"D2"):AM:"[=| "
RQM
END; * OF NOT(NUM(SELECTED.CN))
END; * OF SYS.ABORT OR USER.ABORT
*
*
CONT = 1
LOOP
ERROR.RSP = ""
$INCLUDE IBP SYS.INCL.11.ABORT
READNEXT TASK.ID FROM SLIST ELSE TASK.ID = ""; CONT = ""
WHILE CONT AND NOT(SYS.ABORT OR USER.ABORT) AND NOT(SYS.ABORT OR USER.ABORT) DO
T.CN = T.CN + 1
*#PRINT @(0,10):CLL:"[=| Task ":T.CN 'R#5':" ":TASK.ID
GOSUB Load.Verification
REPEAT
*
PRINT "[=| "
PRINT "[=| "
PRINT "[=| "
PRINT "[=| "
ERROR.TEXT = "[=| Thank you, Loading completed"
ERROR.CODE = "1901023"
GOSUB ERROR.CONTROL
*
PRINTER CLOSE
*
RETURN
*
!
Load.Verification: *
*#
*#    Lock Task Record
DISP.JRNL = FIELD(TASK.ID,"@",4)
TASK.PRVL = TASK.PRVL:AM:"[=| "
*
LOOP
LCK.STAT = 0
SYS.FILE = "PSD"; SYS.ITEM = TASK.ID
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 & LCK.STAT < 9000 AND NOT(SYS.ABORT OR USER.ABORT) DO REPEAT
*#
*#    Read in Task Record
*#PRINT @(0,10):CLS:"Task ":T.CN 'R#5':".  ":TASK.ID
*TASK.PRVL = TASK.PRVL:AM:"[=| Task ":T.CN 'R#5':".  ":TASK.ID
READ TASK.REC FROM PS.FILE,TASK.ID THEN
TASK.STATUS = TASK.REC<14>
IF TASK.STATUS = "" THEN TASK.STATUS =  "N"
IF RELOAD.FLAG OR (INDEX(TASK.STATUS,"CXZ",1) NE 0 AND SYS.LIST EQ 1) THEN
*TASK.PRVL = TASK.PRVL:AM:"[=|   ":TASK.STATUS
IF NOT(RELOAD.FLAG) THEN RETURN
END
TASK.UPDATE = 0
*#
*#    Check if Task is Inactive
*#IF INDEX("CXZ",TASK.STATUS,1) EQ 0 OR SYS.LIST THEN
IF INDEX("CXZ",TASK.STATUS,1) EQ 0 OR RELOAD.FLAG THEN
S.CN = 20
IF NOT(NUM(TASK.REC<19>)) THEN TASK.REC<19> = 0
*
N.STAT = 0
O.STAT = 0
I.STAT = 0
D.STAT = 0
H.STAT = 0
C.STAT = 0
X.STAT = 0
LOOP S.CN = S.CN + 1 WHILE TASK.REC<S.CN> # "" OR NOT(S.CN > TASK.REC<19> + 20) AND NOT(SYS.ABORT OR USER.ABORT) DO
IF TASK.REC<S.CN,3> # DISP.JRNL THEN
TASK.UPDATE = 1
TASK.REC<S.CN,3> = DISP.JRNL
END
IF TASK.REC<S.CN,4> # S.CN - 20 THEN
TASK.REC<S.CN,4> = S.CN - 20
TASK.UPDATE = 1
END
TEMP = TASK.REC<S.CN,1>
IF NOT(LEN(TEMP)) THEN
TASK.REC<S.CN,1> = "?"
TASK.UPDATE = 1
END ELSE
IF TEMP EQ "N" OR TEMP EQ "?" OR TEMP EQ "" THEN
N.STAT = N.STAT + 1
END ELSE IF TEMP EQ "O" THEN
O.STAT = O.STAT + 1
END ELSE IF TEMP EQ "I" OR TEMP EQ "D" THEN
I.STAT = I.STAT + 1
END ELSE IF TEMP EQ "H" THEN
H.STAT = H.STAT + 1
END ELSE IF TEMP EQ "C" THEN
C.STAT = C.STAT + 1
END ELSE IF TEMP EQ "X" THEN
X.STAT = X.STAT + 1
END
END
IF TASK.REC<19> < S.CN - 20 THEN
TASK.REC<19> = S.CN - 20
TASK.UPDATE = 1
END
*P.S<S.CN-20> = TASK.REC<S.CN>
REPEAT
H.S = TASK.REC<19>
H.S.VER = DCOUNT(TASK.REC,AM)-20
IF H.S.VER GT H.S THEN H.S = H.S.VER
TASK.FLAG = 0
NEW.TASK.STATUS = ""
IF (C.STAT OR X.STAT) AND NOT(N.STAT+I.STAT+O.STAT+H.STAT) THEN
IF X.STAT AND NOT(C.STAT) THEN NEW.TASK.STATUS = "X" ELSE NEW.TASK.STATUS = "C"
END ELSE IF H.STAT AND NOT(I.STAT) THEN
NEW.TASK.STATUS = "H"
END ELSE IF (N.STAT OR O.STAT) AND NOT(I.STAT OR H.STAT OR C.STAT OR X.STAT) THEN
NEW.TASK.STATUS = "N"
END
IF NEW.TASK.STATUS NE TASK.STATUS AND NEW.TASK.STATUS NE "" THEN
PRINT
PRINT "TASK: ":TASK.ID:", status ":TASK.STATUS:" changed to ":NEW.TASK.STATUS
FOR TEMP = 1 TO 3
PRINT BELL
RQM; RQM
NEXT TEMP
PRINT
TASK.STATUS = NEW.TASK.STATUS
END
*#
*#    Check if Task is Active
*#
*#
IF INDEX("CXZH?",TASK.STATUS,1) EQ 0 OR RELOAD.FLAG OR SYS.LIST EQ 0 THEN
*#PRINT
*#PRINT "[=| ":SPACE(5):TASK.ID:" is active."
TASK.PRVL = TASK.PRVL:AM:"[=| Task ":T.CN 'R#5':".  ":TASK.ID
TASK.PRVL = TASK.PRVL:AM:"[=| ":SPACE(5):TASK.ID:" is active."
TASK.PRVL = TASK.PRVL:AM:"[=| ":SPACE(5):"Title: ":TASK.REC<1>
TASK.PRVL = TASK.PRVL:AM:"[=| ":SPACE(5):"SPTM : ":TASK.REC<2>
TEMP = TASK.REC<7>
TEMP.LAST = TEMP<1,1>:AM:TEMP<1,2>:AM:TASK.REC<15,1>
TEMP.NELP = TASK.REC<11,1,1>:VM:TASK.REC<11,1,2>:AM:AVG.DAY
TEMP.CK = 1
CALL SYS.ELP.CONVERT(TEMP.LAST,TEMP.NELP,TEMP.CK)
TASK.LAST = TEMP.LAST
*#
*#    Process Task Steps for Loading into user's Schedule
*#
*#
STEP.ACTIVE = 0
TEMP.FLAG = 0
STEP.LAST = 0:AM:0
S.CN = 1
*#
LOOP
S.R = TASK.REC<S.CN+20>
*#
WHILE S.R # "" OR S.CN < H.S AND NOT(SYS.ABORT OR USER.ABORT) DO
S.STATUS = S.R<1,1>
IF S.STATUS = "" THEN S.STATUS = "N"
*#
IF RELOAD.FLAG OR SYS.LIST EQ 0 OR INDEX("NIHO?D",S.STATUS,1) # 0 THEN
TASK.PRVL = TASK.PRVL:AM:"[=| ":AM:"[=| ":SPACE(5):"Step ":S.CN:" ":S.R<1,2>
*#    Check if Step is Active
TEMP.FLAG = 0
*
IF S.STATUS EQ "D" THEN
STEP.ACTIVE = 1
IF RELOAD.FLAG THEN TEMP.FLAG = 1
*# 'D'aily Schedule
TEMP = " is LOADed in the DAILY SCHEDULE(s)."
IF TASK.FLAG < 3 THEN TASK.FLAG = 2
*#
END ELSE IF INDEX("NIO",S.STATUS,1) # 0 THEN
STEP.ACTIVE = 1
TEMP.FLAG = 1
*#  'D' removed.
*# TASK AVAILABLE
IF TASK.FLAG < 3 THEN TASK.FLAG = 2
TEMP = " is active."
END ELSE
*#
*# (C)ompleted, (X)cancelled or (Z)system cancelled
*#
TEMP = " is NOT active."
END
*#PRINT TEMP
TASK.PRVL = TASK.PRVL:AM:"[=| ":SPACE(5):"Step ":S.CN:TEMP
TEMP.LAST = (100000+S.R<1,7,1>)[2,5]:(100000+S.R<1,7,2>)[2,5]
TEMP.NELP = S.R<1,11,1>:VM:S.R<1,11,2>
TEMP.CK = 0
CALL SYS.CHECK.ELP(TEMP.LAST,TEMP.NELP,TEMP.CK)
*#
*#    Place Step in Progress (Activate)
IF (TEMP.CK AND TEMP.FLAG) OR (SYS.LIST EQ 0 AND SUBR.SUB.FUNCTION<1> NE "ALL") OR RELOAD.FLAG THEN
*IF INDEX("CXZHD?",S.STATUS,1) EQ 0 OR (S.STATUS = "D" AND RELOAD.FLAG) THEN
*IF INDEX("?ONIH",S.STATUS,1) OR (S.STATUS = "D" AND RELOAD.FLAG) THEN
IF NOT(INDEX("CXZD",S.STATUS,1))OR (S.STATUS = "D" AND RELOAD.FLAG) THEN
TASK.FLAG = 3
TASK.UPDATE = 1
*SCH.FLAG = 4
*
TASK.REC<S.CN+20,10> = "L*":DATE():"*":TIME():"*":STRUCT(2):"*LOAD":SVM:TASK.REC<S.CN+20,10>
*#*P.S = TASK.REC<S.CN+20>:AM:P.S
*IF TASK.REC<S.CN+20> NE "" THEN P.S = P.S:TASK.REC<S.CN+20>:AM
IF TASK.REC<S.CN+20> NE "" THEN P.S = P.S:AM:TASK.REC<S.CN+20>
*IF TASK.REC<S.CN+20> NE "" THEN P.S = TASK.REC<S.CN+20>:AM:P.S
TASK.REC<S.CN+20,1> = "D"
TASK.REC<S.CN+20,10> = "D":TASK.REC<S.CN+20,10>[2,9999]
TEMP = SPACE(10):"Step Status changed to 'D'."
*#PRINT TEMP
TASK.PRVL = TASK.PRVL:AM:"[=| ":TEMP
IF FIRST THEN FIRST = FIRST - 1; *#PRINT BELL:
STEP.ADDED = 1
END ELSE
STEP.ADDED = 0
END
IF STEP.ADDED THEN
*#PRINT SPACE(10):"Step added to daily schedule."
TASK.PRVL = TASK.PRVL:AM:"[=| ":SPACE(10):"Step added to daily schedule."
STEP.ACTIVE = 1
END
END ELSE
STEP.ADDED = 0
END
IF NOT(STEP.ADDED) THEN
*#PRINT SPACE(10):"Step not added to schedule."
TASK.PRVL = TASK.PRVL:AM:"[=| ":SPACE(10):"Step not added to schedule."
END
*
TEMP.LAST = 0:AM:0:AM:TASK.LAST<3>
TEMP.NELP = FIELD(S.R<1,11,1>,"*",1):VM:FIELD(S.R<1,11,1>,"*",2):AM:AVG.DAY
TEMP.CK = 1
CALL SYS.ELP.CONVERT(TEMP.LAST,TEMP.NELP,TEMP.CK)
*
STEP.LAST<1> = STEP.LAST<1> + TEMP.LAST<1>
STEP.LAST<2> = STEP.LAST<2> + TEMP.LAST<2>
END
*
S.CN = S.CN + 1
*
REPEAT
*
IF (NOT(TASK.FLAG) AND NOT(STEP.ACTIVE)) AND INDEX("CXH",TASK.STATUS,1) = 0 THEN
*#PRINT SPACE(10):"Task completed, Status set to 'C'."
TASK.PRVL = TASK.PRVL:AM:"[*| ":SPACE(10):"Task completed, Status set to 'C'."
TASK.REC<13> = "C*":DATE():"*":TIME():"*":STRUCT(2):"*":"LOAD":SVM:TASK.REC<13>
TASK.REC<14> = "C"
TASK.STATUS = 'C'
TASK.UPDATE = 1
TASK.FLAG = 1
END
*
IF TASK.FLAG AND (STEP.LAST<1> > TASK.LAST<1> OR STEP.LAST<2> > TASK.LAST<2>) THEN
TASK.REC<11> = TASK.REC<14>:"*":DATE():"*":TIME():"*":STRUCT(2):"*LOAD*":(STEP.LAST<1>+STEP.LAST<2>):SVM:TASK.REC<11>
*#PRINT SPACE(10):"Task updated for completion requirements."
TASK.PRVL = TASK.PRVL:AM:"[u| ":SPACE(10):"Task updated for completion requirements."
TASK.UPDATE = 1
END ELSE
*#PRINT SPACE(10):"Task not updated for completion requirements."
TASK.PRVL = TASK.PRVL:AM:"[=| ":SPACE(10):"Task not updated for completion requirements."
END
*#
*#    Update Task Record if required.
*IF TASK.FLAG AND TASK.STATUS # "I" THEN
IF TASK.FLAG AND INDEX("*C*X*H*N*O*","*":TASK.STATUS:"*",1) EQ 0 THEN
TASK.REC<13> = "I*":DATE():"*":TIME():"*":STRUCT(2):"*LOAD":SVM:TASK.REC<13>
TASK.REC<14> = "I"
TASK.STATUS = "I"
TASK.UPDATE = 1
END
*#
*#    Update Task
IF TASK.UPDATE THEN
OLD.CALL.SUB.FUNCTION = "LOAD"
DISP.JRNL = FIELD(TASK.ID,"@",4)
***SCH.FLAG = 5
***OLD.SCH.FLAG = 5
GOSUB UPDATE.FILE
END; *# of Update of Task Record.
*#
*#
END; *# OF TASK.STATUS NE 'CXZH?' result of INDEX
*#
END; *# OF IF TASK.STATUS NE 'CXZ' result of INDEX
*     # Now strictly enforced.
*     # 870626 DGH
*#
*#
*#    Generate Report
IF TASK.PRVL NE '' AND TASK.UPDATE THEN
*#PRINTER ON
LOOP WHILE LEN(TASK.PRVL) AND NOT(SYS.ABORT OR USER.ABORT) DO
PRINTER ON
PRINT TASK.PRVL<1>
PRINTER OFF
PRINT TASK.PRVL<1>
TASK.PRVL = DELETE(TASK.PRVL,1)
REPEAT
PRINT "[=| "
PRINT "[=| "
*#PRINTER OFF
END
*#
*#
*#
*#    Task not on file
END ELSE
ERROR.TEXT = "This item does not exist..."
ERROR.CODE = "16010"
GOSUB ERROR.CONTROL
END
*#
*#    Unlock Task Record
SYS.ITEM = TASK.ID
SYS.FILE = "PSD"
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
*
*
RETURN
*
*
$INCLUDE IBP SYS.SCHED.UPD
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.SCHED.NEXT~
SUBROUTINE SYS.SCHED.NEXT(F.T,CN,C.W,MAX.CN,P.S)
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
SYS.PROG = "SYS.SCHED.NEXT":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
*
GOSUB C.W.NEXT
*
End.of.prog: * bypass GOTO for abnormal end.
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
RETURN
!
C.W.NEXT: *
IF F.T # "WOR" THEN
IF P.S<CN,1> # F.T THEN P.S<CN,10> = F.T:"*":DATE():"*":TIME():"*":STRUCT(2):SVM:P.S<CN,10>
P.S<CN,1> = F.T
GOSUB INPUT.DATE.CODE
END
TEMP.CN = 0; TPV6 = P.S<CN,6>; TEMP.CK = 0
TPV6.MAX = DCOUNT(TPV6,SVM)
LOOP
TEMP.CN = TEMP.CN + 1
WHILE TEMP.CN LE TPV6.MAX DO
IF TPV6<1,1,TEMP.CN> = PORT+1 THEN TEMP.CK = 1
REPEAT
IF TEMP.CK & INDEX("*WOR*C*X*Z*H*N*","*":F.T:"*",1) # 0 THEN
L.W = 0
TEMP.CW = CN
GOSUB CLEAR.PORT
CN3 = 0
CONT3 = 1
LOW.NOTSTARTED = 0
LOW.INPROGRESS = 0
LOW.HOLD = 0
LOW.OPTION = 0
LOOP CN3 = CN3 + 1 WHILE CN3 < MAX.CN + 1 & CONT3 DO
P.V2 = P.S<CN3,1>
IF P.V2 = "O" & LOW.OPTION = 0 THEN LOW.OPTION = CN3
IF P.V2 = "H" & LOW.HOLD = 0 THEN LOW.HOLD = CN3
IF INDEX("*H*O*X*Z*C*","*":P.V2:"*",1) = 0 THEN
IF P.V2 = "N" & LOW.NOTSTARTED = 0 THEN LOW.NOTSTART = CN3
IF P.V2 = "I" & LOW.INPROGRESS = 0 THEN LOW.INPROGRESS = CN3
IF CN3 > CN THEN
TEMP.CW = CN3
GOSUB RECORD.PORT
CONT3 = 0
END
END
REPEAT
CN.SET = 0
IF CONT3 THEN
CONT3 = 0
IF LOW.INPROGRESS # 0 THEN
CN.SET = LOW.INPROGRESS
END ELSE IF LOW.NOTSTARTED # 0 THEN
CN.SET = LOW.NOTSTARTED
END ELSE IF LOW.OPTION # 0 THEN
CN.SET = LOW.OPTION
END ELSE IF LOW.HOLD # 0 THEN
CN.SET = LOW.HOLD
END ELSE CONT3 = 1
IF NOT(CONT3) THEN
TEMP.CW = CN.SET
IF F.T = "WOR" AND CN = C.W THEN CN = TEMP.CW
GOSUB RECORD.PORT
END ELSE
TEMP.CW = MAX.CN
IF F.T = "WOR" AND CN = C.W THEN CN = TEMP.CW
GOSUB RECORD.PORT
END
END
END
RETURN
!
*
*
$INCLUDE IBP SYS.SCHED.UPD
*
$INCLUDE IBP SYS.INPUT.DATE.CODE
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
*
END
~SYS.SCHED.PRIORITIZE~
SUBROUTINE SYS.SCHED.PRIORITIZE(MAX.CN,P.S,MAX.CN,C.W)
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
SYS.PROG = "SYS.SCHED.PRIORITIZE":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
PROG = "Prioritize Items by Date Required"
PRINT @(0,5):CLS:@(40-(LEN(PROG)/2),6):RVB:PROG:RVE:@(9,10):"Item":@(25):"Verification":
*
GOSUB PRIORITY.LOOP
*
End.of.prog: * bypass GOTO for abnormal end.
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
RETURN
!
PRIORITY.LOOP: *
CN = 1
CONT = 1
LOOP
P.V = P.S<CN>
IF LEN(P.V) = 0 THEN CONT = 0
*
WHILE CONT DO
PRINT @(10,12):CN "L#3":
DT.RQ = P.V<1,7>
IF DT.RQ = 0 ! LEN(DT.RQ) = 0 THEN DT.RQ = 9999
DT.ES = P.V<1,8>
IF NOT(NUM(DT.ES)) THEN
P.V<1,8> = 0
DT.ES = 0
END
*
*
CN1 = 1
CONT1 = 1
TRF.FLAG = 0
LOOP
IF CONT1 THEN
P.V1 = P.S<CN1>
DT.RQ1 = P.V1<1,7>
IF DT.RQ1 = 0 ! LEN(DT.RQ1) = 0 THEN DT.RQ1 = 9999
DT.ES1 = P.V1<1,8>
IF NOT(NUM(DT.ES1)) THEN
P.V1<1,8> = 0
DT.ES1 = 0
END
IF LEN(P.V1) = 0 THEN CONT1 = 0
IF CN1 >= CN THEN CONT1 = 0
END
*
WHILE CONT1 DO
PRINT @(30,12):CN1 "L#3":
IF DT.RQ - DT.ES < DT.RQ1 - DT.ES1 THEN
CONT1 = 0
TRF.FLAG = 1
END ELSE
CN1 = CN1 + 1
END
REPEAT
*
*
IF TRF.FLAG THEN
P.S = DELETE(P.S,CN)
IF CN LT C.W THEN C.W = C.W - 1
TEMP.VM = CN1
IF TEMP.VM = 1 THEN
P.S = P.V:VM:P.S
END ELSE
P.S = INSERT(P.S,TEMP.VM;P.V)
IF TEMP.VM LE C.W THEN C.W = C.W + 1
END
GOSUB STRUCT.UPDATE
END
CN = CN + 1
REPEAT
*
*
RETURN
!
STRUCT.UPDATE: *
TEMP.CN = 0
LOOP
IF STRUCT(60)<1,PORT+1> > 0 THEN
IF STRUCT(60)<1,TEMP.CN+1> = CN THEN
STRUCT(60)<1,TEMP.CN+1> = CN1
END ELSE IF STRUCT(60)<1,TEMP.CN+1> < CN THEN
IF STRUCT(60)<1,TEMP.CN+1> > CN1 THEN
STRUCT(60)<1,TEMP.CN+1> = STRUCT(60)<1,TEMP.CN+1> + 1
END
END
END
TEMP.CN = TEMP.CN + 1
WHILE TEMP.CN < 10 DO REPEAT
*
RETURN
*
*
END
~SYS.SCHEDULE~
SUBROUTINE SYS.SCHEDULE
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.CPORT
*
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP.SYNONYM
*
DIM MODE.DESC(30), STAT.DESC(15)
*
$INCLUDE IBP SYS.INCL.USER.MODE.DESC
$INCLUDE IBP SYS.INCL.STATUS.CHECK
$INCLUDE IBP SYS.INCL.STATUS.DESC
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.SALES.MODE
$INCLUDE IBP SYS.INCL.LO.TCL.MODE
$INCLUDE IBP SYS.INCL.LO.TRAIN.MODE
$INCLUDE IBP SYS.INCL.HI.TRAIN.MODE
*
SYS.PROG = "SYS.SCHEDULE":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
SYS.PROG.DESC = "Daily Work Schedule"
*
SYS.SLOC<1> = "FILES"
OLD.SCH.FLAG = ""; OLD.C.W = ""
DISP.JRNL = ""
SYS.ABORT = 0; USER.ABORT = 0
ERROR.RSP = ""
H.T = 0; WRITE.FLAG = 0
*
PRINT @(0,5):CLS:
*
LOOP
LCK.STAT = 1
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
CALL SYS.LOCK.ITEM
WHILE LCK.STAT NE PORT+1 AND LCK.STAT LT 9000 DO REPEAT
*
IF LCK.STAT NE PORT+1 THEN
ERROR.TEXT = "The reading of your user record was unsuccessful"
ERROR.CODE = 15110
GOSUB ERROR.CONTROL
GOTO End.of.prog
END ELSE
READV TEMP FROM SY.FILE,SYS.ITEM,70 ELSE TEMP = 0
IF TEMP EQ 0 THEN
TEMP = PORT+1
WRITEV TEMP ON SY.FILE,SYS.ITEM,70
END
STRUCT(70) = TEMP
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
*
IF TEMP NE PORT+1 AND TEMP GT 0 THEN
ERROR.TEXT = "you are using the scheduler on PORT ":STRUCT(70)-1
ERROR.CODE = 15110
GOSUB ERROR.CONTROL
GOTO End.of.prog
END
END
*
IF USER.ABORT OR SYS.ABORT THEN PRINT BELL:" ABORT!":; STOP
*
*
IF LEN(CO.DATA<1,1,1>) EQ 0 THEN CO.DATA<1,1,1> = SPACE(10)
CN = 1
SYS.PROG.DESC = "Daily Work Schedule - Company Code ":CO.DATA<4>
SCR.LINES = 10
SCR.HEADING = ""
VRF.EXTRA = 0
CPAGE = 0
CPAGETEN = 0
MAX.CN = 0
C.W = 0
OUT.TO.PRINT = ""
TOP.DISPLAY.FLAG = 0
SAVE.WAIT.FLAG = WAIT.FLAG + 1
WAIT.FLAG = SAVE.WAIT.FLAG - 1
SCH.INIT = 1
REVIEW.FLAG = 0
SCH.FUNCTION = "REVIEW":AM:"LOAD":AM:"PURGE":AM:"DAILY":AM:"TASK"
TEMP2 = FIELD(CALL.SUB.FUNCTION<1>," ",1)
LOCATE(TEMP2,SCH.FUNCTION;TEMP) ELSE TEMP = 0
IF TEMP THEN SCH.FLAG = TEMP
*
REDISPLAY.SCREEN: * Return point for redisplaying screen.
*
LOOP
*
LOOP WHILE SCH.INIT DO
SCH.INIT = 0
IF OUT.TO.PRINT NE 9 THEN SCR.HEADING = ""
IF REVIEW.FLAG = 2 THEN REVIEW.FLAG = 1 ELSE REVIEW.FLAG = ""
*
IF NOT(SCH.FLAG) THEN
ERROR.TEXT = "Enter your function (LOAD, PURGE, DAILY or TASK) : "
ERROR.CODE = "1900210"
GOSUB ERROR.CONTROL
LOCATE(ERROR.RSP,SCH.FUNCTION;SCH.FLAG) ELSE SCH.FLAG = 0; SCH.INIT = 1
END ELSE
IF SCH.FLAG EQ 3 THEN REVIEW.FLAG = 1
ERROR.TEXT = SCH.FUNCTION<SCH.FLAG>
ERROR.CODE = "19000"
GOSUB ERROR.CONTROL
END
IF SCH.FLAG LE 0 OR SCH.FLAG GT 5 THEN
ERROR.TEXT = "your entry was invalid"
ERROR.CODE = "15010"
GOSUB ERROR.CONTROL
SCH.INIT = 1; SCH.FLAG = 0
END
*
IF OLD.SCH.FLAG AND OLD.SCH.FLAG NE SCH.FLAG THEN GOSUB UPDATE.FILE
*
IF SCH.FLAG GT 0 AND SCH.FLAG LT 5 THEN
CALL.SUB.FUNCTION<1> = "DAILY"
*@*LOCK
SYS.ITEM = "@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
READ P.S FROM SY.FILE,SYS.ITEM ELSE P.S = ""
IF NOT(OUT.TO.PRINT OR REVIEW.FLAG) THEN
ERROR.TEXT = "would you like a review printed (Y/N)?"
ERROR.CODE = "1900212"
GOSUB ERROR.CONTROL
**IF INDEX(YES,"*":ERROR.RSP:"*",1) NE 0 THEN
**REVIEW.FLAG = 1
**OUT.TO.PRINT = 1
**ERROR.TEXT = "How many waits ( 1 - 5 )? "
**ERROR.CODE = "1900214"
**GOSUB ERROR.CONTROL
**WAIT.TEMP = ERROR.RSP
**IF NUM(WAIT.TEMP) THEN
**IF WAIT.TEMP LT 6 THEN WAIT.FLAG = WAIT.TEMP ELSE WAIT.FLAG = 5
**END ELSE WAIT.FLAG = SAVE.WAIT.FLAG - 1
**END ELSE WAIT.FLAG = SAVE.WAIT.FLAG - 1
END ELSE
OUT.TO.PRINT = 8
END
*
IF SCH.FLAG = 2 THEN
SUBR.FUNCTION     = "LOAD":AM:SUBR.FUNCTION
SUBR.SUB.FUNCTION = "ALL":AM:SUBR.SUB.FUNCTION
CALL.FUNCTION     = "LOAD":AM:CALL.FUNCTION
CALL.SUB.FUNCTION = "":AM:CALL.SUB.FUNCTION
CALL SYS.SCHED.LOAD
CALL.FUNCTION     = DELETE(CALL.FUNCTION,1)
CALL.SUB.FUNCTION = DELETE(CALL.SUB.FUNCTION,1)
SUBR.FUNCTION     = DELETE(SUBR.FUNCTION,1)
SUBR.SUB.FUNCTION = DELETE(SUBR.SUB.FUNCTION,1)
*SYS.ITEM = "@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
*READ P.S FROM SY.FILE,SYS.ITEM ELSE P.S = ""
*
SCH.INIT = 1; SCH.FLAG = 4
END ELSE
IF SCH.FLAG = 3 THEN SUBR.FUNCTION<1> = "PURGE" ELSE
SUBR.FUNCTION<1> = ""
END
END
END ELSE IF SCH.FLAG >= 5 THEN
SCH.FLAG = 5
CALL.SUB.FUNCTION<1> = "TASK"
*
* TASK
*
IF OUT.TO.PRINT NE 9 THEN
C.W = 1
DISP.JRNL = ""
ERROR.TEXT = "Enter the TASK # you wish to display: "
ERROR.CODE = "1900220"
IF NUM(SUBR.FUNCTION<1>) AND LEN(SUBR.FUNCTION<1>) GT 0 THEN
DISP.JRNL = SUBR.FUNCTION<1> 
DISP.JRNL = STR("0",(5-LEN(DISP.JRNL))):DISP.JRNL
ERROR.RSP = DISP.JRNL
ERROR.TEXT = ERROR.TEXT:" ":DISP.JRNL
ERROR.CODE = "1900020"
GOSUB ERROR.CONTROL
END ELSE
GOSUB ERROR.CONTROL
IF ERROR.RSP = '' THEN ERROR.RSP = DISP.JRNL
DISP.JRNL = ERROR.RSP
END
SUBR.FUNCTION<1> = ""
END; * OF OUT.TO.PRINT NE 9
*
IF NOT(NUM(DISP.JRNL)) THEN DISP.JRNL = TASK.NUM
IF LEN(DISP.JRNL) EQ 0 THEN DISP.JRNL = TASK.NUM
DISP.JRNL = STR("0",5-LEN(DISP.JRNL)):DISP.JRNL
*
IF OUT.TO.PRINT EQ 9 THEN
OUT.TO.PRINT = 1
END ELSE IF OUT.TO.PRINT = 8 THEN
OUT.TO.PRINT = 0
END ELSE
ERROR.TEXT = "Should I print this on the printer? "
ERROR.CODE = "1900218"
GOSUB ERROR.CONTROL
YES.NO = ERROR.RSP
IF YES.NO EQ '' THEN YES.NO = 'N'
IF INDEX(YES,"*":YES.NO:"*",1) NE 0 THEN
OUT.TO.PRINT = 1
END ELSE OUT.TO.PRINT = ""
END; * OF OUT.TO.PRINT NE 9
*
*@*LOCK
P.S = ""
READ TASK.REC FROM PS.FILE,"@J@":CO.DATA<4>:"@":DISP.JRNL ELSE
TASK.REC = ""
MAX.CN = 1
TASK.REC<19> = 1
C.W = 1
ERROR.TEXT = "This item does not exist..."
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
END
CN.T = 20
IF NOT(NUM(TASK.REC<19>)) THEN
TEMP = DCOUNT(TASK.REC,AM)-20
IF TEMP LE 1 THEN TEMP = 1
TASK.REC<19> = TEMP
C.W = 1
END
P.S = ""
LOOP CN.T = CN.T + 1 WHILE TASK.REC<CN.T> NE "" OR NOT(CN.T GT TASK.REC<19> + 20) DO
IF TASK.REC<CN.T,3> NE DISP.JRNL THEN
TASK.REC<CN.T,3> = DISP.JRNL
END
IF TASK.REC<CN.T,4> NE CN.T - 20 THEN
TASK.REC<CN.T,4> = CN.T - 20
END
IF LEN(TASK.REC<CN.T,1>) EQ 0 THEN
TASK.REC<CN.T,1> = "?"
END
IF TASK.REC<19> LT CN.T - 20 THEN
TASK.REC<19> = CN.T - 20
END
P.S<CN.T-20> = TASK.REC<CN.T>
REPEAT
MAX.CN = CN.T
IF WAIT.FLAG OR (NOT(LEN(TASK.REC<1>)) AND NOT(OUT.TO.PRINT)) THEN
PRINT @(0,23):CLL:BELL:"Enter Task Desc for # ":DISP.JRNL "L#6":" : ":TASK.REC<1> "L#45":
PRINT @(31):
RSP = ""
INPUT RSP:
IF LEN(RSP) GT 0 THEN TASK.REC<1> = RSP
END
*
SCR.HEADING = "***** Task # ":DISP.JRNL:", ":TASK.REC<1>:" *****"
*
*
END ELSE
SCH.INIT = 1; SCH.FLAG = 0
END; *# OF SCH.FLAG 1-4,5,INVALID
*
REPEAT; *# OF WHILE SCH.INIT
*
OLD.SCH.FLAG = SCH.FLAG
*
GOSUB S.HEADING
IF NOT(OUT.TO.PRINT) THEN
PRINT @(0,18):CLL:"Thank you . . .":
RQM
END ELSE IF SCH.FLAG = 5 AND TASK.REC<4> NE "" THEN
TEMP = TASK.REC<4>
LOOP WHILE TEMP NE "" DO
PRINTER ON
PRINT SPACE(5):TEMP<1,1>
PRINTER OFF
TEMP = DELETE(TEMP,1,1)
VRF.EXTRA = VRF.EXTRA + 1
IF VRF.EXTRA GT 45 THEN
GOSUB S.HEADING
END
REPEAT
END
GOSUB S.HEADING1
CN = 0
CPAGETEN = 0
CONT.DISP = 1
PR.FL = 0
PR.DISP = 1
PURGED = 0
TOP.DISPLAY.FLAG = 0
F.T = "RED"
CPAGE = 0
CPAGE1 = 0
GOSUB S.DISP
*
WHILE OUT.TO.PRINT DO
*
PRINTER ON
IF SCH.FLAG = 5 THEN
PRINT
PRINT "The highest STEP is ":TASK.REC<19> "L#3"
END
PRINT FF
PRINTER OFF
IF REVIEW.FLAG THEN REVIEW.FLAG = ""
SCR.HEADING = ""
ERROR.TEXT = "printing completed"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
PRINTER CLOSE
*SCH.INIT = 1
*SCH.FLAG = 0
*GOTO REDISPLAY.SCREEN
OUT.TO.PRINT = ""
REPEAT; *# OF OUT.TO.PRINT
*
*
IF REVIEW.FLAG THEN REVIEW.FLAG = ""
IF SCH.FLAG EQ 5 THEN
PRINT @(0,21):CLS:"Task # ":DISP.JRNL:", ":TASK.REC<1>[1,60]:
PRINT @(0,22):"The highest STEP is ":TASK.REC<19> "L#3":
END
!
CONT = 1
LOOP WHILE CONT DO
L.W = ""
GOSUB C.TASK
PRINT @(0,21):CLL:@(0,22):CLL:@(0,23):CLL:"Enter the item you wish to access: ":
IF LEN(SUBR.FUNCTION<1>) NE 0 THEN L.W = "" ELSE INPUT L.W:
IF LEN(L.W) EQ 0 THEN L.W = 0
*
IF L.W NE "END" THEN
CONT1 = 1
IF NOT(NUM(L.W)) THEN
ERROR.TEXT = "Sorry but your entry must be numeric!"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
END ELSE
IF L.W GT MAX.CN THEN
ERROR.TEXT = "WARNING!! Entry is greater than your highest item number!"
ERROR.CODE =  "19010"
GOSUB ERROR.CONTROL
END
*
PR.FL = 1
IF L.W EQ 0 THEN
CN = C.W
*L.W = CN
*L.W = 1
*L.W = 0
END ELSE
CN = L.W
END
IF CN EQ 0 THEN CN = 1
SAVE.CN = CN
S.PAGE = INT( ( CN - 1) / SCR.LINES) + 1
IF CN GT 0 THEN
CPAGE1 = INT( ( CN - 1) / SCR.LINES ) + 1
IF CPAGE1 NE CPAGE THEN
PR.DISP = 2
GOSUB S.DISP; CN = SAVE.CN; CPAGE = S.PAGE
GOSUB C.TASK
END
PR.DISP = 1
PR.FL = 1
P.V = P.S<CN>
GOSUB P.TASK
END
!
LOOP WHILE CONT1 DO
F.T = ""
PRINT @(0,21):CLL:RVB:
PLINE ="(WOR)k scan, (DESC)ription, (RED)isplay, (REV)iew, (ADD), (MOD)ify, (DEL)ete,"
PRINT PLINE:SPACE(75-LEN(PLINE)):
PRINT @(0,22):CLL:
PLINE = "(PUR)ge, (LOA)d, (UPD)ate, (DATE.SORT),  insert (LIN)e, (TASK), (V)iew tasks,"
PRINT PLINE:SPACE(75-LEN(PLINE)):
PRINT @(0,23):CLL:
PLINE = "(PRINT), (S)can tasks, or (change) Status to (N,O,I,H,C,Z, or X):":RVE:" "
PRINT PLINE:
*
IF SUBR.FUNCTION<1> = "LOAD" THEN
F.T = "LOA"
*
END ELSE IF SUBR.FUNCTION<1> = "PURGE" THEN
F.T = "PUR"
*
END ELSE IF SUBR.FUNCTION<1> = "TASK" THEN
TEMP = SUBR.SUB.FUNCTION<1>
RSP = "TASK ":TEMP
IF NUM(TEMP) AND LEN(TEMP) THEN
TASK.NUM = TEMP
TASK.STEP = 1
END
F.T = "TASK"
*
END ELSE
INPUT F.T:
END
*
RSP = F.T
F.T = FIELD(F.T," ",1)
SUBR.FUNCTION<1> = ""
PRINT @(0,21):CLS:
*
IF F.T = "END" THEN CONT1 = 0 ELSE
*
IF F.T[1,4] = "WAIT" THEN
WAIT.TEMP = F.T
GOSUB WAIT.RTN
F.T = ""
*
END ELSE IF F.T = "DATE.SORT" THEN
CALL SYS.SCHED.PRIORITIZE(MAX.CN,P.S,MAX.CN,C.W)
F.T = "RED"
CONT1 = 0
WRITE.FLAG = 1
*
END ELSE IF F.T = "DESC" THEN
IF SCH.FLAG EQ 5 THEN
PRINT @(0,23):CLL:BELL:"Enter Task Desc for # ":DISP.JRNL "L#6":" : ":TASK.REC<1> "L#45":
PRINT @(31):
RSP = ""
INPUT RSP:
IF LEN(RSP) GT 0 THEN TASK.REC<1> = RSP
SCR.HEADING = "***** Task # ":DISP.JRNL:", ":TASK.REC<1>:" *****"
GOSUB S.HEADING1
END
*
END ELSE IF INDEX("*WOR*RED*REV*PRINT*UPD*ADD*MOD*DEL*PUR*LOA*LIN*TASK*V*S*N*O*I*H*C*X*Z**","*":F.T:"*",1) EQ 0 THEN 
ERROR.TEXT = "Sorry but (":F.T:") is an invalid action!"
ERROR.CODE =  "19000"
GOSUB ERROR.CONTROL
*
END ELSE IF L.W EQ 0 THEN
IF INDEX("*RED*LIN**","*":F.T:"*",1) = 0 AND C.W NE 0 THEN
CN = C.W
CONT1 = 0
END ELSE IF INDEX("*RED**","*":F.T:"*",1) EQ 0 THEN
ERROR.TEXT = "Sorry  but zero is not a valid number for that action!"
ERROR.CODE = "19000"
GOSUB ERROR.CONTROL
END ELSE CONT1 = 0
*
END ELSE CONT1 = 0
!
IF L.W GT MAX.CN AND F.T NE "ADD" AND F.T NE "LIN" THEN
ERROR.TEXT = "Entry is greater than your highest item number!"
ERROR.CODE = "19000"
GOSUB ERROR.CONTROL
END
END
REPEAT
SAVE.CN = CN
S.PAGE = CPAGE
*
IF F.T NE "END" THEN
P.V = P.S<CN>
*
IF F.T EQ "WOR" AND L.W NE 0 THEN
PRINT "!":
TEMP.CW = C.W; GOSUB CLEAR.PORT
IF S.PAGE = INT( ( C.W - 1) / SCR.LINES) + 1 THEN
CN = L.W
SAVE.CN = CN
PR.FL = 0
P.V = P.S<CN>
GOSUB P.TASK
CN = SAVE.CN
CPAGE = S.PAGE
END
IF P.S<CN,1> NE "I" THEN P.S<CN,10> = "I":"*":DATE():"*":TIME():"*":STRUCT(2):SVM:P.S<CN,10>
P.S<CN,1> = "I"
TEMP.CW = CN; GOSUB RECORD.PORT
PR.FL = 1
P.V = P.S<CN>
GOSUB P.TASK
TASK.NUM = P.S<CN,3>
TASK.STEP = P.S<CN,4>
WRITE.FLAG = 1
*
END ELSE IF F.T = "TASK" THEN
SUBR.FUNCTION<1> = FIELD(RSP," ",2)
OUT.TO.PRINT = 8
IF NOT(NUM(SUBR.FUNCTION<1>)) THEN SUBR.FUNCTION<1> = ""
F.T = ""; SCH.INIT = 1; SCH.FLAG = 5; GOTO REDISPLAY.SCREEN
*
END ELSE IF F.T = "V" THEN
SUBR.FUNCTION = 2:AM:SUBR.FUNCTION
SUBR.SUB.FUNCTION = H.T:AM:SUBR.SUB.FUNCTION
CALL SYS.SCHED.HTROUTINE
P.ENT = SUBR.FUNCTION<1>
H.T = SUBR.SUB.FUNCTION<1>
SUBR.FUNCTION = DELETE(SUBR.FUNCTION,1)
SUBR.SUB.FUNCTION = DELETE(SUBR.SUB.FUNCTION,1)
PRINTER CLOSE
F.T = ""; SCH.INIT = 1; GOTO REDISPLAY.SCREEN
*
END ELSE IF F.T = "RED" OR F.T = "REV" THEN
IF F.T = "REV" THEN REVIEW.FLAG = 2; SCH.FLAG = 0
F.T = ""; SCH.INIT = 1; GOTO REDISPLAY.SCREEN
*
END ELSE IF F.T = "UPD" THEN
WRITE.FLAG = 1
GOSUB UPDATE.TO.DISK
*
END ELSE IF F.T = "PRINT" THEN
F.T = ""; SCH.INIT = 1; OUT.TO.PRINT = 9; GOTO REDISPLAY.SCREEN
*
END ELSE IF F.T[1,3] = "LOA" THEN
WRITE.FLAG = 1
GOSUB UPDATE.FILE
GOSUB UPDATE.TO.DISK
PRINT @(0,22):CLL:"Enter Task: ":; INPUT RSP:
SUBR.FUNCTION = "LOAD":AM:SUBR.FUNCTION
SUBR.SUB.FUNCTION = "TASK":AM:SUBR.SUB.FUNCTION
CALL.FUNCTION = RSP:AM:CALL.FUNCTION
CALL.SUB.FUNCTION = "":AM:CALL.SUB.FUNCTION
CALL SYS.SCHED.LOAD
CALL.FUNCTION = DELETE(CALL.FUNCTION,1)
SUBR.FUNCTION = DELETE(SUBR.FUNCTION,1)
SUBR.SUB.FUNCTION = DELETE(SUBR.SUB.FUNCTION,1)
*@*LOCK
SYS.ITEM = "@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
READ P.S FROM SY.FILE,SYS.ITEM ELSE P.S = ""
*
F.T = ""; GOTO REDISPLAY.SCREEN
*
END ELSE IF F.T = "PUR" THEN
PR.DISP = 3
OUT.TO.PRINT = 8
GOSUB S.DISP
SCH.FLAG = 3
GOSUB RECORD.SCHEDULE
OUT.TO.PRINT = ""; F.T = ""; GOTO REDISPLAY.SCREEN
*
END ELSE IF F.T = "MOD" THEN
P.V = P.S<CN>
P.ENT = ""
WRITE.FLAG = 1
CALL SYS.SCHED.INPUT(F.T,CONT.DISP,SCR.LINES,CN,P.S,P.V,P.ENT,DISP.JRNL)
IF P.ENT NE "END" THEN GOSUB P.TASK
*
END ELSE IF F.T = "DEL" THEN
YES.NO = "N"
ERROR.TEXT = "Are you sure?"
ERROR.CODE = "19012"
GOSUB ERROR.CONTROL
IF INDEX(YES,"*":ERROR.RSP:"*",1) NE 0 THEN
P.S = DELETE(P.S,CN)
IF CN LT C.W THEN C.W = C.W - 1
MAX.CN = MAX.CN - 1
WRITE.FLAG = 1
END
PR.DISP = 2
GOSUB S.DISP; CN = SAVE.CN; CPAGE = S.PAGE
GOSUB C.TASK
*
END ELSE IF F.T = "ADD" OR F.T = "LIN" THEN
PRINT @(0,11):CLS
CN1 = 0
P.SAVE = ""
WRITE.FLAG = 1
LOOP
CN1 = CN1 + 1
WHILE (F.T = "ADD" AND CN1 LT (L.W + 1)) OR (F.T = "LIN" AND CN1 LT L.W) DO
IF P.S<CN1> = "" THEN P.S<CN1> = " "
P.SAVE<CN1> = P.S<CN1>
REPEAT
CN1 = CN1 - 1
CN2  = CN1
P.SAVE1 = ""
LOOP
CN2 = CN2 + 1
WHILE P.S<CN2> NE "" DO
P.SAVE1<CN2-CN1> = P.S<CN2>
REPEAT
PR.DISP = 0
CN = 0
CONT.DISP = 1
P.S = ""
PR.FL = 0
GOSUB S.DISP; CN = SAVE.CN; CPAGE = S.PAGE; GOSUB C.TASK
IF LEN(P.S) GT 0 THEN
IF P.SAVE1<1> NE "" THEN P.S = P.S:AM
P.S = P.S:P.SAVE1
END ELSE
P.S = P.SAVE1
END
IF P.S <1> NE "" AND LEN(P.SAVE) NE 0 THEN
P.S = P.SAVE:AM:P.S
END ELSE P.S = P.SAVE:P.S
MAX.CN = MAX.CN + 1
PR.DISP = 2
P.SAVE=''; P.SAVE1=''
GOSUB S.DISP; CN = SAVE.CN; CPAGE = S.PAGE; GOSUB C.TASK
*
END ELSE IF INDEX("*H*I*C*X*Z*O*N*WOR*","*":F.T:"*",1) NE 0 THEN
IF L.W EQ 0 THEN
OLD.C.W = C.W
END ELSE
OLD.C.W = L.W
END
*#TEMP.CW = C.W; GOSUB CLEAR.PORT
CALL SYS.SCHED.NEXT(F.T,OLD.C.W,C.W,MAX.CN,P.S)
IF NOT(C.W) THEN C.W = 1
*IF L.W EQ 0 OR SAVE.CN = OLD.C.W THEN CN = C.W ELSE CN = SAVE.CN
CN = C.W
*TEMP.CW = C.W; GOSUB RECORD.PORT
CPAGE1 = INT( ( CN - 1) / SCR.LINES) + 1
*
IF CPAGE1 NE S.PAGE AND L.W EQ 0 THEN
SAVE.CN = CN
PR.DISP = 2
GOSUB S.DISP; CN = SAVE.CN; CPAGE = S.PAGE; GOSUB C.TASK
END ELSE
*
CN = SAVE.CN
CPAGE = S.PAGE
P.V = P.S<CN>
PR.FL = 0
GOSUB P.TASK
IF L.W EQ 0 THEN
CN = C.W
P.V = P.S<CN>
PR.FL = 1
GOSUB P.TASK
END
END
*
END ELSE
IF CN NE 0 THEN
P.V = P.S<CN>
GOSUB CHECK.MV.6
PR.FL = TEMP.CK
GOSUB P.TASK
END
END
IF CN NE 0 THEN
CPAGE = INT( ( CN - 1) / SCR.LINES) + 1
S.PAGE = CPAGE
SAVE.CN = CN
END
END ELSE CONT = 0
END
END ELSE CONT = 0
REPEAT
*
ERROR.RSP = ""
ERROR.TEXT = "Enter <CR> to return the menu. . . "
ERROR.CODE = "19002"
GOSUB ERROR.CONTROL
IF INDEX(NO,"*":ERROR.RSP:"*",1) THEN
SCH.INIT = 1; SCH.FLAG = 0; GOTO REDISPLAY.SCREEN
END
*
IF OLD.SCH.FLAG NE 0 THEN GOSUB UPDATE.FILE
LOOP
LCK.STAT = 0
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
CALL SYS.LOCK.ITEM
WHILE LCK.STAT NE PORT+1 AND LCK.STAT LT 9000 DO REPEAT
*
IF LCK.STAT NE PORT+1 THEN
ERROR.TEXT = "The reading of your user record was unsuccessful"
ERROR.CODE = "16110"
GOSUB ERROR.CONTROL
END
*
READV TEMP FROM SY.FILE,SYS.ITEM,70 ELSE TEMP = 0
IF TEMP = PORT+1 THEN
TEMP = 0
STRUCT(70) = 0
WRITEV TEMP ON SY.FILE,SYS.ITEM,70
READV TEMP FROM SY.FILE,SYS.ITEM,21 ELSE TEMP = ""
CN = 0
LOOP CN = CN + 1 WHILE CN LT 10 DO
IF NOT(NUM(TEMP<1,CN>)) THEN TEMP<1,CN> = 0
IF LEN(TEMP<1,CN>) EQ 0 THEN TEMP<1,CN> = 0
IF TEMP<1,CN> = 1 THEN TEMP<1,CN> = 2
REPEAT
STRUCT(21) = TEMP
WRITEV TEMP ON SY.FILE,SYS.ITEM,21
GOSUB RECORD.SCHEDULE
END
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
*#END
*
*WAIT.FLAG = SAVE.WAIT.FLAG
WAIT.FLAG = SAVE.WAIT.FLAG - 1
*
End.of.prog: * bypass GOTO for abnormal end.
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
RETURN
!
CHECK.MV.6: * Subroutine to check for current port
TPV6 = P.S<CN,6>; TEMP.CN = 0; TEMP.CK = 0
LOOP TEMP.CN = TEMP.CN + 1 WHILE TPV6<1,1,TEMP.CN> NE "" DO
IF NUM(TPV6<1,1,TEMP.CN>) THEN
IF TPV6<1,1,TEMP.CN> = PORT+1 THEN TEMP.CK = 1
END
REPEAT
RETURN
!
*
*
$INCLUDE IBP SYS.SCHED.HEADING
*
*
!
$INCLUDE IBP SYS.SCHED.PTASK
*
!
C.TASK: * Prints current tast,status and page of pages.
IF C.W GT 0 THEN
PR.VAL = INDEX(STAT.CHECK,"*":P.S<C.W,1>[1,1]:"*",1)
IF PR.VAL NE 0 THEN
PR.VAL = (PR.VAL + 1) / 2
PR.DESC = STAT.DESC(PR.VAL)
END ELSE PR.DESC = "Unknown"
PRINT @(0,0):RVB:OCONV(DATE(),"D2"):"  ":OCONV(TIME(),"MTS"):
PRINT @(65,3):("Page ":CPAGE:" of ":(INT( ( MAX.CN - 1) / SCR.LINES) + 1):".") "R#15":RVE:
PRINT @(0,5):CLL:
PRINT "Item ":C.W:" of ":
PRINT MAX.CN:" items":
PRINT ", it's  status is ":PR.DESC:
PRINT ".":
END
RETURN
!
S.DISP: * Loop to display screen
*
IF OUT.TO.PRINT THEN
SCR.LINES = 30
END ELSE
SCR.LINES = 10
*PRINT @(0,6):CLS:@(0,10):RVB:"Item Description.of.Step":SPACE(20):"Status Task... Step  Date.Rqrd":RVE:
END
VRF.EXTRA = 0
YES.NO = ""
IF PR.DISP = 1 OR PR.DISP = 3 THEN
IF PR.DISP = 1 THEN C.W = STRUCT(60)<1,PORT+1>
CPAGE = 1
CPAGE1 = CPAGE
CN = 0
END ELSE IF PR.DISP = 2 THEN
CPAGE = CPAGE1
CN = (CPAGE - 1) * SCR.LINES
END ELSE
CN = 0
CPAGE1 = 1
END
CPAGETEN = 0
CONT.DISP = 1
PURGED = 0
PURGED.CN = 0
LOOP
IF NOT(PURGED) THEN CN = CN + 1; VRF.EXTRA = VRF.EXTRA + 1
P.V = P.S<CN>
IF P.V = "" AND PR.DISP THEN
CONT.DISP = 0
IF NOT(C.W) THEN C.W = 1
END
PURGED = 0
WHILE CONT.DISP DO
CPAGETEN = INT( ( CN - 1) / SCR.LINES ) * SCR.LINES
IF (NOT(OUT.TO.PRINT) AND ((CN - 1) - CPAGETEN) = 0 AND CN GT CPAGE * SCR.LINES) OR VRF.EXTRA GT 45 THEN
YES.NO = ""
WAIT.FL = 0
IF OUT.TO.PRINT THEN
YES.NO = "N"
WAIT.FL = 1
END ELSE IF PR.DISP = 1 THEN
IF (CN LT C.W OR C.W = 0) THEN
YES.NO = "N"
WAIT.FL = 1
END
END ELSE IF PR.DISP = 2 THEN
IF SAVE.CN GT CN THEN
YES.NO = "N"
WAIT.FL = 1
END
END ELSE IF PR.DISP = 3 THEN
YES.NO = "N"
WAIT.FL = 1
END
*#IF PR.DISP NE 3 AND (NOT(WAIT.FLAG) AND YES.NO = "N") OR (PR.DISP LT 1 OR PR.DISP GT 3) THEN
IF (NOT(WAIT.FLAG) AND YES.NO = "N") OR (PR.DISP LT 1 OR PR.DISP GT 2) THEN
IF OUT.TO.PRINT THEN
YES.NO = "N"
END ELSE
YES.NO = ""
PRINT @(0,23):CLL:'Enter "N" for next page or <CR> to end... ':;INPUT YES.NO:
IF YES.NO[1,4] = "WAIT" THEN
WAIT.TEMP = YES.NO
GOSUB WAIT.RTN
YES.NO = "N"
END
END
END
IF YES.NO NE "N" THEN
CONT.DISP = 0
S.PAGE = CPAGE
END ELSE
IF OUT.TO.PRINT THEN
VRF.EXTRA = 0
GOSUB S.HEADING
GOSUB S.HEADING1
END ELSE
IF WAIT.FLAG AND WAIT.FL THEN FOR WAIT.TEMP = 1 TO WAIT.FLAG; RQM; NEXT WAIT.TEMP
*PRINT @(0,10):CLS:RVB:"Item Description.of.Step":SPACE(20):"Status Task... Step  Date.Rqrd":RVE:
GOSUB S.HEADING1
VRF.EXTRA = 0
END
CPAGE = INT(CPAGETEN / SCR.LINES) + 1
END
END
IF CONT.DISP THEN
GOSUB CHECK.MV.6
PR.FL = TEMP.CK
IF PR.DISP THEN
IF PR.DISP = 3 THEN GOSUB PG.LO.TASK
TOP.DISPLAY.FLAG = 0
IF NOT(PURGED) THEN GOSUB P.TASK
END ELSE
P.ENT = ""
CALL SYS.SCHED.INPUT(F.T,CONT.DISP,SCR.LINES,CN,P.S,P.V,P.ENT,DISP.JRNL)
IF P.ENT NE "END" THEN GOSUB P.TASK
END
END
GOSUB CHECK.MV.6
IF NOT(C.W) AND TEMP.CK AND PR.DISP THEN TEMP.CW = CN; GOSUB RECORD.PORT
IF REVIEW.FLAG OR PR.DISP = 3 THEN GOSUB V.TASK
IF OUT.TO.PRINT THEN
PRINTER ON
PRINT
PRINTER OFF
END
REPEAT
IF PR.DISP THEN
LOOP WHILE P.S<CN> NE "" DO
CN = CN + 1
GOSUB CHECK.MV.6
IF NOT(C.W) AND TEMP.CK THEN TEMP.CW = CN; GOSUB RECORD.PORT
IF NUM(P.S<CN,3>) THEN
END
P.V = P.S<CN>
IF PR.DISP = 3 THEN GOSUB PG.LO.TASK
IF REVIEW.FLAG OR PR.DISP = 3 THEN GOSUB V.TASK
IF OUT.TO.PRINT THEN
PRINTER ON
PRINT
PRINTER OFF
END
REPEAT
MAX.CN = CN - 1
IF NOT(C.W) THEN TEMP.CW = MAX.CN; GOSUB RECORD.PORT
END
*
IF PR.DISP = 3 THEN
PRINT @(0,6):CLL:BELL:
PRINT PURGED.CN:" items purged to history...":
PRINTER ON
PRINT; PRINT; PRINT
PRINT PURGED.CN:" items purged to history...":
PRINT; PRINT
PRINTER OFF
IF WAIT.FLAG THEN FOR WAIT.TEMP = 1 TO WAIT.FLAG; RQM; NEXT WAIT.TEMP
END
*
RETURN
!
V.TASK: * Prints warning messages for steps.
*WRITE.FLAG = ""
IF INDEX("*C*X*Z*","*":P.V<1,1>:"*",1) EQ 0 THEN
DT.CK = P.V<1,7>
PR.DESC = ""
PR.DESC1 = ""
PR.DESC2 = ""
PR.RVB.ON = 0
IF LEN(DT.CK) GT 0 THEN
IF DT.CK NE 0 THEN
DT.COMPARE = DATE()
IF NOT(DT.CK GT DT.COMPARE) THEN
IF DT.CK = DT.COMPARE THEN
PR.DESC = "Warning!!! "
PR.DESC1 = "due today."
IF NOT(OUT.TO.PRINT) THEN PRINT @(0,6):CLL:
END ELSE
IF WAIT.FLAG THEN PR.DESC = BELL ELSE PR.DESC = ""
IF P.V<1,1> = "H" THEN
PR.DESC = "Warning!!! "
IF FIELD(P.V<1,12>,"*",1) GT DT.COMPARE THEN PR.DESC = "Remember, "
END
PR.DESC1 = DT.COMPARE-DT.CK:" days overdue."
IF NOT(OUT.TO.PRINT) THEN
IF DT.COMPARE-DT.CK GT 7 THEN
PR.DESC = RVB:PR.DESC
PR.RVB.ON = 1
PRINT @(0,8):CLL:
END ELSE
PRINT @(0,7):CLL:
END
END
END
IF OUT.TO.PRINT THEN
PRINTER ON
PR.DESC2 = PR.DESC:" ":PR.DESC1
PRINT "     ":PR.DESC2[1,45]:
PRINTER OFF
*#END ELSE
END
IF NOT(OUT.TO.PRINT) THEN
PR.DESC2 = PR.DESC:"Item #":CN:" (":P.V<1,2>:") is ":PR.DESC1
PRINT PR.DESC2[1,77]:
IF PR.RVB.ON THEN PRINT RVE:
IF WAIT.FLAG GT 1 THEN FOR WAIT.TEMP = 1 TO WAIT.FLAG; RQM; NEXT WAIT.TEMP
END
END
END
END
END
*
*
*
IF INDEX("*H*X*Z*","*":P.V<1,1>:"*",1) NE 0 THEN
DT.CK = FIELD(P.V<1,12>,"*",1)
IF LEN(DT.CK) EQ 0 THEN DT.CK = 0
IF NOT(NUM(DT.CK)) THEN DT.CK = 0
DT.CK.DESC = FIELD(P.V<1,12>,"*",2)
IF OUT.TO.PRINT THEN
PRINTER ON
IF DT.CK NE 0 THEN
PRINT
PRINT SPACE(40):"Date: ":OCONV(DT.CK,"D2"):
VRF.EXTRA = VRF.EXTRA + 1
END
IF LEN(DT.CK.DESC) NE 0 THEN
PRINT
PRINT SPACE(40):"Comment: ":DT.CK.DESC:
VRF.EXTRA = VRF.EXTRA + 1
END
END
IF DT.CK NE 0 AND NOT(DATE() LT DT.CK) AND P.V<1,1> = "H" THEN
IF OUT.TO.PRINT THEN
PRINT; PRINT SPACE(40):
VRF.EXTRA = VRF.EXTRA + 1
END ELSE
PRINT @(0,21):CLS:@(0,22):
END
IF LEN(DT.CK.DESC) NE 0 THEN
PRINT "Comment: ":DT.CK.DESC:".  ":
END
PRINT "Step now removed from HOLD status."
IF NOT(OUT.TO.PRINT) THEN
TOP.DISPLAY.FLAG = 1
GOSUB P.TASK
TOP.DISPLAY.FLAG = 0
P.V<1,1> = "N"
P.V<1,10> = "N":"*":DATE():"*":TIME():SVM:P.V<1,10>
P.V<1,12> = "0*":FIELD(P.V<1,12>,"*",2):" (removed ":OCONV(FIELD(P.V<1,12>,"*",1),"D2"):")"
WRITE.FLAG = 1
IF CONT.DISP THEN GOSUB P.TASK
P.S<CN> = P.V
END
IF OUT.TO.PRINT THEN PRINTER OFF
END
END
*
*
*
IF OUT.TO.PRINT THEN
IF LEN(P.V<1,10>) NE 0 THEN
PRINTER ON
PRINT
VRF.EXTRA = VRF.EXTRA + 1
VRF.CN = 0
LOOP
VRF.CN = VRF.CN + 1
WHILE LEN(P.V<1,10,VRF.CN>) NE 0 AND VRF.CN LT 6 DO
VRF.EXTRA = VRF.EXTRA + 1
IF VRF.EXTRA GT 45 THEN
GOSUB S.HEADING
GOSUB S.HEADING1
PRINTER ON
END
VRF.STAT = (INDEX(STAT.CHECK,"*":FIELD(P.V<1,10,VRF.CN>[1,1],"*",1):"*",1) + 1) / 2
IF NOT(NUM(VRF.STAT)) THEN VRF.STAT = 15
IF VRF.STAT LT 1 OR VRF.STAT GT 15 THEN VRF.STAT = 15
VRF.DATE = FIELD(P.V<1,10,VRF.CN>,"*",2)
IF NOT(NUM(VRF.DATE)) THEN VRF.DATE = 0
VRF.TIME = FIELD(P.V<1,10,VRF.CN>,"*",3)
IF NOT(NUM(VRF.TIME)) THEN VRF.TIME = 0
PRINT SPACE(40):
IF VRF.DATE GT 0 THEN PRINT OCONV(VRF.DATE,"D2") "L#11": ELSE PRINT SPACE(11):
IF VRF.TIME GT 0 THEN PRINT OCONV(VRF.TIME,"MT") "L#7": ELSE PRINT SPACE(7):
PRINT STAT.DESC(VRF.STAT)
*
REPEAT
PRINTER OFF
END
END
*
IF WRITE.FLAG THEN GOSUB UPDATE.TO.DISK
RETURN
!
UPDATE.TO.DISK: * Subroutine to update SPTM file with Daily records.
IF OLD.SCH.FLAG GT 0 AND OLD.SCH.FLAG LT 5 THEN
WRITE P.S ON SY.FILE,"@SCHED@STACK@":CO.DATA<4>:"@":STRUCT(2)
IF WRITE.FLAG THEN
TEMP.CN = 1
TEMP.CONT = 1
LOOP
*IF NOT(WRITE.FLAG) THEN P.V = P.S<TEMP.CN>
P.V = P.S<TEMP.CN>
IF P.V = "" THEN TEMP.CONT = ""
WHILE TEMP.CONT DO
P.V11 = P.V<1,11>
IF NOT(LEN(P.V11)) THEN P.V11 = CO.DATA<4>; P.V<1,11> = P.V11
WRITE.H.S = ""
READV H.S FROM PS.FILE,"@J@":P.V11:"@":P.V<1,3>,19 ELSE H.S = 1
IF NOT(NUM(P.V<1,4>)) THEN
P.V<1,4> = H.S + 1
END ELSE IF P.V<1,4> LT 1 THEN
P.V<1,4> = H.S + 1
END ELSE IF WRITE.H.S NE "YES" THEN WRITE.H.S = "NO"
PSTEP = P.V<1,4>
IF H.S LT PSTEP THEN H.S = PSTEP; WRITE.H.S = "YES"
PSTEP = PSTEP + 20
WRITEV P.V ON PS.FILE,"@J@":P.V11:"@":P.V<1,3>,PSTEP
IF WRITE.H.S = "YES" THEN
WRITEV H.S ON PS.FILE,"@J@":P.V11:"@":P.V<1,3>,19
END
TEMP.CN = TEMP.CN + 1
IF WRITE.FLAG THEN TEMP.CONT = ""
REPEAT
END
WRITE.FLAG = ""
ERROR.TEXT = "finished updating files."
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
RETURN
!
PG.LO.TASK: * Transfer completed and cancelled items back to PL/TM.
IF F.T = "PUR" THEN
TOP.DISPLAY.FLAG = 1
PG.FLAG = 0
IF INDEX("*C*X*Z*","*":P.V<1,1>:"*",1) NE 0 THEN PG.FLAG = 1
*
IF NOT(PG.FLAG) THEN
IF P.V<1,1> = "H" THEN
DT.CK = FIELD(P.V<1,12>,"*",1)
TEMP = 30
END ELSE
DT.CK = P.V<1,7>
TEMP = 60
END
IF LEN(DT.CK) GT 0 THEN
IF DT.CK NE 0 THEN
DT.COMPARE = DATE()
IF NOT(DT.CK - TEMP LT DT.COMPARE) THEN
PG.FLAG = 1
END
END
END
END
*
IF PG.FLAG THEN
GOSUB P.TASK
PL.ATTR = P.V<1,4>
IF NOT(NUM(PL.ATTR)) THEN PL.ATTR = 0
IF PL.ATTR EQ 0 THEN
PL.ATTR = 21
P.V11 = P.V<1,11>
IF NOT(LEN(P.V11)) THEN P.V11 = CO.DATA<4>; P.V<1,11> = P.V11
READ PL.REC FROM PS.FILE,"@J@":P.V11:"@":P.V<1,3> THEN
LOOP WHILE PL.REC<PL.ATTR> NE "" DO PL.ATTR = PL.ATTR + 1 REPEAT
END
END ELSE PL.ATTR = PL.ATTR + 20
P.V<1,10> = F.T:"*":DATE():"*":TIME():"*":STRUCT(2):SVM:P.V<1,10>
P.V<1,6> = ""
WRITEV P.V ON PS.FILE,"@J@":P.V11:"@":P.V<1,3>,PL.ATTR
P.S = DELETE(P.S,CN)
IF CN LT C.W THEN C.W = C.W - 1
MAX.CN = MAX.CN - 1
TEMP.CN = 0
LOOP
IF STRUCT(60)<1,PORT+1> GT 0 THEN
IF STRUCT(60)<1,TEMP.CN+1> GT CN THEN
STRUCT(60)<1,TEMP.CN+1> = STRUCT(60)<1,TEMP.CN+1> - 1
END ELSE IF STRUCT(60)<1,TEMP.CN+1> = CN THEN
STRUCT(60)<1,TEMP.CN+1> = 0
STRUCT(61)<1,TEMP.CN+1> = 0
STRUCT(62)<1,TEMP.CN+1> = "Purged from daily schedule"
STRUCT(69)<1,TEMP.CN+1> = 0
IF TEMP.CN+1 = PORT+1 THEN GOSUB CLEAR.PORT
END
END
TEMP.CN = TEMP.CN + 1
WHILE TEMP.CN LT 10 DO REPEAT
PURGED = 1
PURGED.CN = PURGED.CN + 1
END ELSE PURGED = 0
TOP.DISPLAY.FLAG = 0
*
END ELSE IF F.T = "LOA" THEN
PRINT @(0,23):CLL:"Not implemented":
END
*
RETURN
*
*
$INCLUDE IBP SYS.SCHED.UPD
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
*
END
~SYS.SPTM.ESTIMATE~
SUBROUTINE SYS.SPTM.ESTIMATE(MAT SPTM.REC,S.CL,S.LN)
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
*
DIM MODE.DESC(30), STAT.DESC(15)
*
$INCLUDE IBP SYS.INCL.USER.MODE.DESC
$INCLUDE IBP SYS.INCL.STATUS.CHECK
$INCLUDE IBP SYS.INCL.STATUS.DESC
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.SALES.MODE
$INCLUDE IBP SYS.INCL.LO.TCL.MODE
$INCLUDE IBP SYS.INCL.LO.TRAIN.MODE
$INCLUDE IBP SYS.INCL.HI.TRAIN.MODE
*
SYS.PROG = "SYS.SPTM.ESTIMATE":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "DIM":AM:SYS.SLOC
*
DIM SPTM.REC(100)
*
*
SYS.SLOC<1> = "VAR"
IF NOT(NUM(S.CL)) OR NOT(NUM(S.LN)) THEN S.CL = 0; S.LN = 16
SPTM = ""
SPTM.FIRST = 1
SUBR.FUNCTION = ""
XREF.DESC = "Upward":AM:"Downward"
XREF.DESC = XREF.DESC:AM"Time Sheets":AM:"Estimating"
TEMP.TASK = TASK.NUM
IF LEN(TEMP.TASK) < 9 THEN TEMP.TASK = STR("0",5-LEN(TEMP.TASK)):TEMP.TASK
OPT.LINE = "(T)ype, (S), (U), (D)ue, (P)riority, (L)ag,"
OPT.LINE1 = "  (E)stimating, Status (C)hange, (END) or <CR>:"
*
Prog.restart: *
SYS.LOCT<1> = "READ"
SYS.SLOC<1> = "ID"
RSP = ""
SPTM.INP = "DESCNP"
IF STRUCT(36)<1,PORT+1> MATCHES '5N' THEN
SPTM.ID = "@J@":STRUCT(2):"@":STRUCT(36)<1,PORT+1>
SPTM.TYPE = "T"
END ELSE
SPTM.ID = "@SYS@SPTM@":STRUCT(2):"@":STRUCT(36)<1,PORT+1>
SPTM.TYPE = "S"
END
*
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
CALL.FUNCTION = "MENU"
PRINT @(0,S.LN):CLS:
SPTM.RED = 1
*
LOOP
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
IF CALL.FUNCTION = "MENU" THEN
IF SPTM.RED THEN GOSUB Sptm.est.BG; SPTM.RED = ""
GOSUB Sptm.est.disp
GOSUB Sptm.est.entry
RSP = ""
*GOSUB Sptm.est.clr
END
RSP = ""
*
WHILE CALL.FUNCTION = "MENU" AND SPTM.INP # "END" DO REPEAT
*
SYS.LOCT<1> = "END"
SYS.SLOC<1> = ""
SYS.FILE = ""
!
End.of.prog: *
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
RETURN
*
Sptm.est.BG: * Subroutine to display background.
*
PRINT @(S.CL,S.LN+0):CLL:"Item Type ................ Mod . s............ u............ Priority ..":
PRINT @(S.CL,S.LN+1):CLL:"Status_History___________   Estimating_and_Actual___________":
PRINT @(S.CL,S.LN+2):CLL:" . mm.dd.yy  ............   a.... ... mm.dd.yy    Compl% ... Due mm.dd.yy   ":
PRINT @(S.CL,S.LN+3):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Lag .... ... ":
PRINT @(S.CL,S.LN+4):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ EDC mm.dd.yy ":
PRINT @(S.CL,S.LN+5):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Upd mm.dd.yy ":
RETURN
*          1         2         3         4         5         6         7
*01234567890123456789012345678901234567890123456789012345678901234567890
*Item type ................ Mod . s............ u............ Priority ..
*Status_History___________   Estimating_and_Actual___________
* . mm.dd.yy  ............   a.... ... mm.dd.yy    Compl% ... Due mm.dd.yy 
* . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Lag .... ... 
* . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ EDC mm.dd.yy 
* . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Upd mm.dd.yy 
!
Sptm.est.disp: * Subroutine to display fields
PRINT @(S.CL+10,S.LN+0):
IF SPTM.REC(5) # "" THEN PRINT SPTM.REC(5):
IF SPTM.REC(10)<1,3,2> # "" THEN PRINT @(S.CL+31):SPTM.REC(10)<1,3,2>:
IF SPTM.REC(7) # "" THEN PRINT @(S.CL+33):RVB:"s":RVE:SPTM.REC(7):
IF SPTM.REC(6) # "" THEN PRINT @(S.CL+47):RVB:"u":RVE:SPTM.REC(6):
IF SPTM.REC(8) # "" THEN PRINT @(S.CL+70):SPTM.REC(8):
CN = 1
CONT = 1
LOOP
IF SPTM.REC(13)<1,CN> = "" THEN CONT = "" ELSE
S.LN1 = CN - (INT((CN-1) / 4) * 4)
IF S.LN1 - 1 = 0 AND CN # 1 THEN
PRINT @(0,22):CLS:'Enter "N" for next or <CR> to end. . .':
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RSP = "" ELSE
INPUT RSP,1:
END
IF RSP # "N" THEN CONT = "" ELSE GOSUB Sptm.est.status.clr
END
IF CONT THEN
PRINT @(S.CL+1,S.LN+S.LN1+1):SPTM.REC(13)<1,CN,1> "L#1":@(S.CL+3):OCONV(SPTM.REC(13)<1,CN,3>,"D2/") "L#9":
PRINT @(S.CL+13):SPTM.REC(13)<1,CN,5>:
CN = CN + 1
END
END
WHILE CONT DO REPEAT
PRINT @(S.CL+29,S.LN+2):
IF SPTM.REC(12)<1,1,2> > 0 THEN PRINT SPTM.REC(12)<1,1,2> "R#4":@(S.CL+34):SPTM.REC(12)<1,1,1> "L#4":
IF SPTM.REC(12)<1,1,3> > 0 THEN PRINT OCONV(SPTM.REC(12)<1,1,3>,"D2/") "L#9":
IF SPTM.REC(10)<1,2,2> > 0 THEN PRINT @(S.CL+57):SPTM.REC(10)<1,2,2> "R#3":
IF SPTM.REC(9)<1,1,1> > 0 THEN PRINT @(S.CL+65):OCONV(SPTM.REC(9)<1,1,1>,"D2/") "L#9":
*
CN = 1
CONT = 1
LOOP
IF SPTM.REC(11)<1,CN> = "" THEN CONT = "" ELSE
S.LN1 = CN - (INT((CN-1) / 3) * 3)
IF S.LN1 - 1 = 0 AND CN # 1 THEN
PRINT @(0,22):CLS:'Enter "N" for next or <CR> to end. . .':
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RSP = "" ELSE
INPUT RSP,1:
END
IF RSP # "N" THEN CONT = "" ELSE GOSUB Sptm.est.estimate.clr
END
IF CONT THEN
PRINT @(S.CL+29,S.LN+S.LN1+2):
PRINT SPTM.REC(11)<1,CN,2> "R#4":" ":SPTM.REC(11)<1,CN,1> "L#3":" ":OCONV(SPTM.REC(11)<1,CN,3>,"D2/") "L#10":SPTM.REC(11)<1,CN,5>:
CN = CN + 1
END
END
WHILE CONT DO REPEAT
*
PRINT @(S.CL+65,S.LN+3):
IF SPTM.REC(10)<1,1,2> > 0 THEN PRINT SPTM.REC(10)<1,1,2> "R#4":@(S.CL+70):SPTM.REC(10)<1,1,1> "L#3":
IF SPTM.REC(10)<1,2,1> > 0 THEN PRINT @(S.CL+65,S.LN+4):OCONV(SPTM.REC(10)<1,2,1>,"D2/") "L#9":
IF SPTM.REC(10)<1,3,1> > 0 THEN PRINT @(S.CL+65,S.LN+5):OCONV(SPTM.REC(10)<1,3,1>,"D2/") "L#9":
RETURN
!
Sptm.est.entry: * Subroutine to allow maintenance of estimating.
CONT = 1
VALID = ""
FOUND = ""
LOOP
PRINT @(0,22):CLS:RVB:OPT.LINE:@(0,23):OPT.LINE1:RVE:" ":
INPUT SPTM.INP:
IF SPTM.INP = "" THEN
SPTM.RED = 1
END ELSE
SPTM.RED = 0
IF INDEX("*T*S*U*D*P*L*E*C*END*","*":SPTM.INP:"*",1) = 0 THEN
ERROR.TEXT = "your entry was invalid"
ERROR.CODE = "19000"
GOSUB ERROR.CONTROL
END
END
VALID = 1
*
BEGIN CASE
CASE SPTM.INP = "END" OR SPTM.RED
CONT = 0
*
CASE SPTM.INP = "T"
PRINT @(S.CL+10,S.LN+0):
INPUT RSP1,16:
TEMP.KEY = "@SYS@SPTM@TYPE@":RSP1
SYS.ITEM = TEMP.KEY
SYS.FILE = "SYS"
FOUND = 1
READV TEMP FROM SY.FILE,SYS.ITEM,1 ELSE FOUND = 0
IF NOT(FOUND) THEN
ERROR.TEXT = "Not on file"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID = 0
CONT = 0
END ELSE
SPTM.REC(5) = RSP1
END
*
CASE SPTM.INP = "S" OR SPTM.INP =  "U"
IF SPTM.INP = "U" THEN TEMP = 14 ELSE TEMP = 0
PRINT @(S.CL+34+TEMP,S.LN+0):
INPUT RSP1,12:
TEMP.KEY = "@SYS@USER@":RSP1
SYS.ITEM = TEMP.KEY
SYS.FILE = "SYS"
FOUND = 1
READV TEMP FROM SY.FILE,SYS.ITEM,1 ELSE FOUND = 0
IF NOT(FOUND) THEN
EXECUTE "SYS.UL"
VALID = 0
SPTM.RED = 1
CONT = 0
END ELSE
IF SPTM.INP = "U" THEN SPTM.REC(6) = RSP1[1,12] ELSE SPTM.REC(7) = RSP1[1,12]
END
*
CASE SPTM.INP = "P"
PRINT @(S.CL+70,S.LN+0):
INPUT RSP1,2:
SPTM.REC(8) = RSP1[1,2]
*
CASE SPTM.INP = "D"
PRINT @(S.CL+65,S.LN+2):
INPUT RSP1,9:
IF RSP1 = "" THEN RSP1 = OCONV(SPTM.REC(9),"D2/")
IF ICONV(RSP1,"D") = 0 THEN VALID = 0
IF VALID THEN SPTM.REC(9) = RSP1
IF SPTM.REC(9) > 0 THEN PRINT @(S.CL+65,S.LN+2):OCONV(SPTM.REC(9),"D2/"):
*
CASE SPTM.INP = "L"
LOOP
PRINT @(S.CL+65,S.LN+3):
INPUT RSP1,4:
IF RSP1 = "" THEN RSP1 = SPTM.REC(10)<1,1,2>
WHILE NOT(NUM(RSP1)) DO
VALID = 0
ERROR.TEXT = "you are entering how many units":AM:"enter a number here"
ERROR.CODE = "19010":AM:"19000"
GOSUB ERROR.CONTROL
REPEAT
SPTM.REC(10)<1,1,2> = RSP1
VALID = 1
LOOP
PRINT @(S.CL+70,S.LN+3):
INPUT RSP2,3:
IF RSP2 = "" THEN RSP2 = SPTM.REC(10)<1,1,1>
TEMP1 = "SMHDWBMQSYXCG"
IF INDEX(TEMP1,RSP2[1,1],1) = 0 THEN
VALID = 0
END ELSE
VALID = 1
SPTM.REC(10)<1,1,1> = RSP2
END
WHILE NOT(VALID) DO
ERROR.TEXT = "your choice must start with on of these leters (":TEMP1:")"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
REPEAT
SPTM.RED = 1
CONT = 0
*
CASE SPTM.INP = "E"
GOSUB Sptm.est.estimate.clr
LOOP
PRINT @(S.CL+29,S.LN+3):
RSP1 = ""
INPUT RSP1,4:
VALID = 1
IF RSP1 =  "" THEN RSP1 = "END"
IF RSP1 = "END" THEN
SPTM.RED = 1
END ELSE
IF NOT(NUM(RSP1)) THEN VALID = 0; RSP1 = 0
IF NOT(VALID) THEN
ERROR.TEXT = "you must enter a number here"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID = 0
END ELSE
LOOP
VALID1 = 1
PRINT @(S.CL+34,S.LN+3):
RSP2 =  ""
INPUT RSP2,3:
IF RSP2 = "" THEN RSP2 = SPTM.REC(11)<1,1,1>
TEMP1 = "SMHDWMY"
IF INDEX(TEMP1,RSP2[1,1],1) = 0 THEN
VALID = 0
END ELSE
VALID = 1
END
WHILE NOT(VALID) DO
ERROR.TEXT = "your choice must start with on of these leters (":TEMP1:")"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
REPEAT
*
LOOP
RSP3 = ""
PRINT @(S.CL+38,S.LN+3):
INPUT RSP3,9:
IF RSP3 = "" THEN RSP3 = OCONV(DATE(),"D2/"); RSP4 = TIME() ELSE RSP4 = 0
IF ICONV(RSP3,"D") = 0 THEN
ERROR.TEXT = "invalid date format"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID1 = 0
END
WHILE NOT(VALID1) DO REPEAT
IF VALID1 THEN
SPTM.REC(11) = RSP2:SVM:RSP1:SVM:RSP3:SVM:RSP4:SVM:STRUCT(2):VM:SPTM.REC(11)
END
END
END
WHILE NOT(VALID) AND NOT(SPTM.RED) DO REPEAT
SPTM.RED = 1
CONT = 0
*
CASE SPTM.INP = "C"
GOSUB Sptm.est.status.clr
LOOP
PRINT @(S.CL+1,S.LN+2):
RSP1 = ""
INPUT RSP1,1:
VALID = 1
IF RSP1 =  "" THEN RSP1 = "END"
IF RSP1 = "END" THEN
SPTM.RED = 1
END ELSE
IF INDEX(STAT.CHECK,"*":RSP1:"*",1) = 0 OR RSP1 = SPTM.REC(13)<1,1,1> THEN
ERROR.TEXT = "that was an invalid status or the same status"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID = 0
END ELSE
LOOP
VALID1 = 1
PRINT @(S.CL+3,S.LN+2):
RSP2 =  ""
INPUT RSP2,9:
IF RSP2 = "" THEN RSP2 = OCONV(DATE(),"D2/"); RSP3 = TIME() ELSE RSP3 = 0
IF ICONV(RSP2,"D") = 0 THEN
ERROR.TEXT = "invalid date format"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID1 = 0
END
WHILE NOT(VALID1) DO REPEAT
IF VALID1 THEN
ERROR.TEXT = "enter any comments you have: "
ERROR.CODE = "19002"
GOSUB ERROR.CONTROL
RSP4 = ERROR.RSP
SPTM.REC(13) = RSP1:SVM:RSP4:SVM:RSP2:SVM:RSP3:SVM:STRUCT(2):VM:SPTM.REC(13)
END
END
END
WHILE NOT(VALID) AND NOT(SPTM.RED) DO REPEAT
SPTM.RED = 1
CONT = 0
*
CASE 0
PRINT "?":BELL
RQM; RQM
END CASE
WHILE CONT DO REPEAT
*
RETURN
!
Sptm.est.clr: * Subroutine to clear foreground.
*
PRINT @(S.CL+10,S.LN+0)STR(".",14):@(S.CL+31):".":@(S.CL+34):STR(".",12):@(S.CL+48):STR(".",12):@(S.CL+65):"mm.dd.yy ":
PRINT @(S.CL,S.LN+2):CLL:" . mm.dd.yy  ............   a.... ... mm.dd.yy    Compl% ... Due mm.dd.yy ":
PRINT @(S.CL,S.LN+3):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Lag .... ...":
PRINT @(S.CL,S.LN+4):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ EDC mm.dd.yy ":
PRINT @(S.CL,S.LN+5):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............              ":
RETURN
!
Sptm.est.status.clr: * Subroutine to clear status lines
*
PRINT @(S.CL,S.LN+2):" . mm.dd.yy  ............":
PRINT @(S.CL,S.LN+3):" . mm.dd.yy  ............":
PRINT @(S.CL,S.LN+4):" . mm.dd.yy  ............":
PRINT @(S.CL,S.LN+5):" . mm.dd.yy  ............":
RETURN
!
Sptm.est.estimate.clr: * Subroutine to clear estamating lines
PRINT @(S.CL+28,S.LN+3):"e.... ... mm.dd.yy  ............":
PRINT @(S.CL+28,S.LN+4):"e.... ... mm.dd.yy  ............":
PRINT @(S.CL+28,S.LN+5):"e.... ... mm.dd.yy  ............":
RETURN
*
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.SPTM.REPORT~
*PROGRAM: SYS.SPTM.REPORT
$INCLUDE IBP SYS.COMMON
TERMINAL = "?"
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
SYS.PROG.DESC = "System Structure and Control Report"
SYS.PROG = "SYS.SPTM.REPORT"
SYS.LOCT = "INIT"
SYS.SLOC = "VAR"
*
OFF.RSP = "*OFF*off*Off*END*end*End*STOP*stop*HALT*halt*Halt*BYE*bye*Bye*LOGOFF*logoff*Logoff*"
TCL.RSP = "*COMMAND*TCL*tcl*Tcl*"
SYS.RSP = "*SCHEDULE*MESSAGE*WAIT*HELP*TIME*WHO*WHERE*STATUS*CONTACTS*TCL*OFF*"
SYS.RSP = SYS.RSP:"EXPENSES*NOTES*PHONE.BOOK*SHOPPING*ACCOUNTS*USERS*PORTS*UTILITIES*"
*
*
SYS.FILE = "SYS"
SYS.ITEM = ""
OPEN "SYS" TO SY.FILE ELSE
ERROR.TEXT = "No SYS file"
ERROR.CODE = "11111"
GOSUB ERROR.CONTROL
END
*
PRINT @(0,21):CLS:@(0,22):"Enter the format # to use: ":
INPUT SPTM.FORMAT:
*
*READV EXEC.LIST.SELECT FROM SY.FILE,"@SYS@SPTM@REPORT@S@SELECT@":SPTM.FORMAT,1 ELSE
*ERROR.TEXT = "The selection criteria of the fields to be listed is missing"
*ERROR.CODE = "13111"
*GOSUB ERROR.CONTROL
*STOP
*END
*
READV EXEC.LIST.FIELDS FROM SY.FILE,"@SYS@SPTM@REPORT@S@FIELDS@":SPTM.FORMAT,1 ELSE
ERROR.TEXT = "The fields to be listed are missing"
ERROR.CODE = "13111"
GOSUB ERROR.CONTROL
STOP
END
*
PRINT @(0,5):CLS:"Stategic Planning Documents Report":
*
*SYS.FILE = "SYS"
*SYS.ITEM = "CO.DATA"
*READ CO.DATA FROM SY.FILE,SYS.ITEM ELSE CO.DATA = AM:DATE()
$INCLUDE IBP SYS.INCL.COMPANY.READ
CO.PREFIX1 = CO.DATA<3>
CO.PREFIX2 = CO.DATA<4>
SYS.PREFIX = "@SYS@SPTM@":CO.PREFIX1:"@M@":CO.PREFIX2:"@"
*
*
LOOP
SLIST = ""
USER.TO.LIST = ""
LP.LOCT = ""
SPTM.AREA = ""
*
PRINT @(0,5):CLS:"Stategic Planning Documents Report":
PRINT @(0,7):"Enter the client to be listed: ":
INPUT SPTM.CLIENT:
IF SPTM.CLIENT = "" THEN STOP
WHILE SPTM.CLIENT # "" DO
*
LOOP
PRINT @(0,8):"Enter the area to be listed: ":
INPUT SPTM.AREA:
IF SPTM.AREA = "END" THEN STOP
WHILE SPTM.AREA = "LIST" OR SPTM.AREA = "XREF" DO REPEAT
*
LOOP
PRINT @(0,9):"List this on the (T)erminal or (P)rinter? ":
INPUT LP.LOCT:
IF LP.LOCT = "" THEN LP.LOCT = "T"
WHILE LP.LOCT # "T" AND LP.LOCT # "P" DO
IF LP.LOCT = "END" THEN STOP
REPEAT
LP.LOCT = " (":LP.LOCT:")"
*
IF LP.LOCT = " (P)" THEN
LP.COPIES = 0
LOOP
PRINT @(0,10):"How many copies would you like? ":
INPUT LP.COPIES:
IF LP.COPIES = "END" THEN STOP
IF NOT(NUM(LP.COPIES)) THEN LP.COPIES = 0
IF LP.COPIES > 100 THEN LP.COPIES = 0
WHILE LP.COPIES < 1 DO REPEAT
END ELSE LP.COPIES = 1
*
LOOP
LP.FORMAT = "D"
PRINT @(0,11):"(S)ummary or (D)etailed format? ":
INPUT LP.FORMAT:
IF LP.FORMAT = "END" THEN STOP
IF LP.FORMAT = "" THEN LP.FORMAT = "D"
WHILE LP.FORMAT # "D" AND LP.FORMAT # "S" DO REPEAT
*
PRINT @(0,13):"Selecting documents. . . ":
*
EXEC.VERB = 'SSELECT PSD = "':SYS.PREFIX:SPTM.CLIENT:'@'
IF SPTM.AREA # "" THEN EXEC.VERB = EXEC.VERB:SPTM.AREA:'@'
EXEC.VERB = EXEC.VERB:']"'
EXECUTE EXEC.VERB, //SELECT. > SLIST
*
EXEC.VERB = 'SAVE-LIST "PSD@TEMP"'
EXECUTE EXEC.VERB, //SELECT. < SLIST
EXEC.VERB = 'COPY-LIST "PSD@TEMP" (O,D)'
EXEC.INPUT = '(PSD ':SYS.PREFIX:SPTM.CLIENT:'@LIST'
EXECUTE EXEC.VERB, //IN. < EXEC.INPUT
*
PRINT @(0,17):CLS:"Starting report at ":OCONV(TIME(),"MTS"):
RQM
*
*
FOR TEMP = 1 TO LP.COPIES
ERROR.RSP = ""
IF SYSTEM(11) THEN
ERROR.TEXT = "Yes?"
ERROR.CODE = "19012"
GOSUB ERROR.CONTROL
END
IF ERROR.RSP = "END" THEN TEMP = LP.COPIES+1 ELSE
IF LP.FORMAT = "S" THEN
EXEC.VERB = 'LIST PSD ':EXEC.LIST.FIELDS
EXECUTE EXEC.VERB:LP.LOCT, //SELECT. < SLIST
END ELSE
SUBR.FUNCTION = CO.PREFIX1:AM:CO.PREFIX2:AM:SPTM.CLIENT
SUBR.SUB.FUNCTION = LP.COPIES:AM:LP.LOCT:AM:SYS.PREFIX
CALL SYS.SPTM.REPORT.D
END
END
NEXT TEMP
*
*
ERROR.TEXT = "Thank you, listing completed"
ERROR.CODE = "19001"
GOSUB ERROR.CONTROL
REPEAT
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.SPTM.REPORT.D~
SUBROUTINE SYS.SPTM.REPORT.D
*
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
*
SYS.PROG.DESC = "System Structure and Control Report - Detail Format"
SYS.PROG = "SYS.SPTM.REPORT.D":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "VAR":AM:SYS.SLOC
*
PRINT @(0,5):CLS:"Stategic Planning Documents Report - Detailed Format":
*
SYS.FILE = "SYS"
SYS.ITEM = "CO.DATA"
IF SUBR.FUNCTION = "" OR SUBR.SUB.FUNCTION = "" THEN
READ CO.DATA FROM SY.FILE,SYS.ITEM ELSE CO.DATA = AM:DATE()
CO.PREFIX1 = CO.DATA<3>
CO.PREFIX2 = CO.DATA<4>
CLIENT.TO.LIST = CO.DATA<3>
SYS.PREFIX = "@SYS@SPTM@":CO.PREFIX1:"@M@":CO.PREFIX2:"@"
LP.COPIES = 1
LP.LOCT = " (P)"
END ELSE
CO.PREFIX1 = SUBR.FUNCTION<1>
CO.PREFIX2 = SUBR.FUNCTION<2>
CLIENT.TO.LIST = SUBR.FUNCTION<3>
LP.COPIES = SUBR.SUB.FUNCTION<1>
LP.LOCT = SUBR.SUB.FUNCTION<2>
SYS.PREFIX = SUBR.SUB.FUNCTION<3>
END
*
*
SYS.PREFIX1 = "@J@":CO.PREFIX1:"@]"
LOOP
SLIST = ""
USER.TO.LIST = ""
LP.LOCT = ""
PRINT @(0,5):CLS:"Stategic Planning Documents Report - Detailed Format":
PRINT @(0,12):"Selecting documents. . . ":
*
EXEC.VERB = 'SSELECT PSD = "':SYS.PREFIX1:']" AND WITH SUMMARY-KEY ="':SYS.PREFIX:CLIENT.TO.LIST:']"'
EXECUTE EXEC.VERB, //SELECT. > SLIST
*
EXEC.VERB = 'SAVE-LIST "PSD@TEMP"'
EXECUTE EXEC.VERB, //SELECT. < SLIST
EXEC.VERB = 'COPY-LIST "PSD@TEMP" (O,D)'
EXEC.INPUT = '(PSD ':SYS.PREFIX:CLIENT.TO.LIST:'@TASK@LIST'
EXECUTE EXEC.VERB, //IN. < EXEC.INPUT
*
PRINT @(0,17):CLS:"Starting report at ":OCONV(TIME(),"MTS"):
RQM
*
*
*FOR TEMP = 1 TO LP.COPIES
ERROR.RSP = ""
IF SYSTEM(11) THEN
ERROR.TEXT = "Yes?"
ERROR.CODE = "19012"
GOSUB ERROR.CONTROL
END
IF ERROR.RSP = "END" THEN TEMP = LP.COPIES+1 ELSE
GOSUB Generate.report
END
*NEXT TEMP
*
*
ERROR.TEXT = "Thank you, listing completed"
ERROR.CODE = "19001"
GOSUB ERROR.CONTROL
REPEAT
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SUBR.FUNCTION = ""
SUBR.SUB.FUCTION = ""
*
RETURN
*
!
Generate.report: *
*
ERROR.TEXT = "Thank you, listing completed"
ERROR.CODE = "19001"
GOSUB ERROR.CONTROL
RETURN
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.SPTM.STRUCT~
SUBROUTINE SYS.SPTM.STRUCT
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
SYS.PROG = "SYS.SPTM.STRUCT":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "DIM":AM:SYS.SLOC
*
*
DIM SPTM.REC(100)
MAT SPTM.REC = ""
*
SYS.SLOC<1> = "VAR"
EQ.PROG.STATUS = 11
W1.SCR.LINES = 14
W1.SCR.ADJ   = 5
W2.SCR.LINES = 10
W2.SCR.ADJ   = 10
SPTM = ""
SPTM.FIRST = 1
SUBR.FUNCTION<1> = ""
XREF.DESC = "Upward":AM:"Downward"
TEMP.TASK = TASK.NUM
IF LEN(TEMP.TASK) < 9 THEN TEMP.TASK = STR("0",5-LEN(TEMP.TASK)):TEMP.TASK
SPTM.ID.NEW = ""
SPTM.ID.LOW = ""
SPTM.ITEM.OLD = ""
SPTM.ITEM.AM.OLD = 0
OPT.LINE1 = ', enter: B, N, M##, M##-##, A, D##-##, I, T,'
OPT.LINE2 = '"PRINT", "END", or "C" . . .'
SPTM.INP = "DESCNP"
*
Prog.restart: *
SYS.LOCT<1> = "READ"
SYS.SLOC<1> = "ID"
IF STRUCT(36)<1,PORT+1> MATCHES '5N' THEN
SPTM.ID = "@J@":CO.DATA<3>:"@":STRUCT(36)<1,PORT+1>
SPTM.TYPE = "T"
END ELSE
IF STRUCT(36)<1,PORT+1>[1,1] EQ "@" THEN
SPTM.ID = "@S@":CO.DATA<3>:STRUCT(36)<1,PORT+1>
END ELSE
SPTM.ID = "@S@":CO.DATA<3>:"@":STRUCT(36)<1,PORT+1>
END
SPTM.TYPE = "S"
END
*
SYS.SLOC<1> = "LOCK"
SYS.FILE = "PSD"
SYS.ITEM = SPTM.ID
LOOP
LCK.STAT = 0
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 AND LCK.STAT # 9998 DO
REPEAT
IF LCK.STAT GT 9000 THEN
ERROR.TEXT = "your control record is locked":AM:"try again later"
ERROR.CODE = "16110":AM:"16110"
GOSUB ERROR.CONTROL
SLAVE.ACCESS.OK = 0
GOTO End.of.prog
END
*
SYS.SLOC<1> = "LINK"
IF SPTM.ITEM.OLD # "" AND SPTM.ITEM.AM.OLD # 0 THEN
IF SPTM.ITEM.AM.OLD = 20 THEN
TEMP = COUNT(SPTM.ITEM.OLD,"@")
TEMP1 = FIELD(SPTM.ITEM.OLD,"@",TEMP)
TEMP2 = SPTM.ITEM.OLD[COL2()+1,99]
END ELSE TEMP2 = SPTM.ITEM.OLD
END ELSE TEMP2 = ""
*
SYS.SLOC<1> = "READ"
MATREAD SPTM.REC FROM PS.FILE,SPTM.ID THEN
IF SPTM.ITEM.AM.OLD = 0 OR SPTM.ITEM.AM.OLD = 21 THEN
SPTM.AM = 21; SPTM.VM = SPTM.REC(3)
END ELSE SPTM.AM = 20; SPTM.VM = SPTM.REC(2)
IF SPTM.TYPE = "T" THEN
IF SPTM.ITEM.OLD = "" THEN SPTM.ITEM.OLD = SPTM.REC(2) ELSE SPTM.REC(2) = SPTM.ITEM.OLD
SPTM.AM = 2
SPTM.VM = 1
END
END ELSE
ERROR.TEXT = "new item, add it? "
ERROR.CODE = "18002"
GOSUB ERROR.CONTROL
IF INDEX(YES,ERROR.RSP,1) # 0 THEN
MAT SPTM.REC = ""
IF SPTM.TYPE = "S" THEN
SPTM.REC(2) = 1; SPTM.REC(3) = 1; SPTM.VM = 1; SPTM.AM = 20; SPTM.INP = "A"
IF SPTM.ITEM.AM.OLD # 0 THEN
SPTM.AM = SPTM.ITEM.AM.OLD
IF SPTM.ITEM.AM.OLD = 20 THEN SPTM.REC(21) = TEMP2 ELSE SPTM.REC(20) = TEMP2
END
SYS.ES<2,1,11> = SPTM.REC(1)
PRINT @(0,W1.SCR.ADJ-2):CLS:RVB:"Title:":RVE:" ":SPTM.REC(1) "L#70":
GOSUB SPTM.INP.TITLE
IF LEN(TITLE.RSP) # 0 THEN
SPTM.REC(1) = TITLE.RSP
PRINT @(0,W1.SCR.ADJ-2):CLL:RVB:"Title:":RVE:" ":SPTM.REC(1) "L#70":
END
END ELSE
SPTM.REC(19) = 1
SPTM.REC(2) = SPTM.ITEM.OLD
END
END ELSE
IF STRUCT(36)<1,PORT+1> = SPTM.ITEM.OLD THEN SPTM.ITEM.OLD = "M"
STRUCT(36)<1,PORT+1> = SPTM.ITEM.OLD
USER.UPD(2) = 1
GOTO Prog.restart
END
END
*
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
CALL.FUNCTION<1> = "MENU"
PRINT @(0,W1.SCR.ADJ-2):CLS:
*
LOOP
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
*IF CALL.FUNCTION<1> = "MENU" THEN
IF SPTM.INP[1,4] EQ "DESC" OR SPTM.INP EQ "A" OR SPTM.INP EQ "I" OR SPTM.TYPE EQ "T" THEN
GOSUB Sptm.desc.display
*#END ELSE
*#SPTM.INP = ""
END
IF SPTM.INP NE "END" AND SPTM.INP NE "DESCRED" THEN
IF NOT(SPTM.INP EQ "U" OR SPTM.INP EQ "D" OR SPTM.INP EQ "*") THEN 
IF SPTM.INP[1,4] NE "DESC" THEN
PRINT @(0,22):CLS:"Will you view the (U)pward or (D)ownward paths? ":
*#INPUT SPTM.INP:
INPUT TC,1:
IF TC EQ "" THEN SPTM.INP = "" ELSE
IF TC EQ "0" THEN SPTM.INP = "U" ELSE
IF TC EQ "v" OR TC EQ "2" THEN SPTM.INP = "*":SPTM.VM+1 ELSE
IF TC EQ "." OR TC EQ "5" THEN SPTM.INP = "*" ELSE
IF TC EQ "^" OR TC EQ "8" THEN
IF SPTM.VM > 1 THEN
SPTM.INP = "*":SPTM.VM-1
END
END ELSE
INPUT SPTM.INP:
SPTM.INP = TC:SPTM.INP
END; *# OF TC EQ "^"
END; *# OF TC NE "."
END
END
END
*
END ELSE
SPTM.INP = "D"
END
END
*#IF SPTM.INP EQ "D" OR SPTM.INP EQ "*" OR SPTM.INP EQ "" THEN
IF SPTM.TYPE NE "T" THEN
IF SPTM.INP[1,1] NE "U" THEN
SPTM.AM = 21
SPTM.VM = SPTM.REC(3)
*#END ELSE IF SPTM.INP EQ "U" THEN
END ELSE
SPTM.AM = 20
SPTM.VM = SPTM.REC(2)
END
SPTM.ID.LOW = STRUCT(36)<1,PORT+1>
END ELSE
SPTM.AM = 2
SPTM.VM = 1
SPTM.REC(2) = SPTM.ID.LOW
END
*#SPTM.INP = ""
GOSUB Sptm.xref.display
END
*#SPTM.INP = ""
*
WHILE SPTM.INP NE "END" AND SPTM.ID.NEW EQ "" DO REPEAT
*
SYS.LOCT<1> = "END"
SYS.SLOC<1> = "UPDATE"
*IF SPTM.TYPE EQ "T" THEN SPTM.REC(2) = SPTM.ITEM.OLD; SPTM.ITEM.AM.OLD = 21
SYS.FILE = "PSD"
SYS.ITEM = SPTM.ID
MATWRITE SPTM.REC ON PS.FILE,SPTM.ID
*
SYS.SLOC<1> = "UNLOCK"
SYS.FILE = "PSD"
SYS.ITEM = SPTM.ID
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
IF SPTM.TYPE EQ "T" AND SPTM.ID.NEW EQ "" THEN SPTM.ID.NEW = SPTM.ITEM.OLD; SPTM.ITEM.AM.OLD = 21
IF SPTM.ID.NEW NE "" THEN
SPTM.ITEM.AM.OLD = 21
STRUCT(36)<1,PORT+1> = SPTM.ID.NEW
USER.UPD(2) = 1
SPTM.ID.NEW = ""
GOTO Prog.restart
END
!
End.of.prog: *
*
RSP = MENU.NAME
EXEC.VERB = MENU.NAME
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
RETURN
!
Sptm.desc.display: * Display description on lines 6-10
SYS.LOCT<1> = "STRUCTURE.DESC"
SYS.SLOC<1> = "DISPLAY"
*
SPTM = ""
SPTM.CONT = 1; SPTM.CONT1 = 1
SPTM.CN   = 0; SPTM.STOP  = W1.SCR.LINES
SPTM.FIRST = 1
*
LOOP
PRINT @(0,W1.SCR.ADJ-2):CLL:RVB:"Title:":RVE:" ":SPTM.REC(1) "L#70":
PRINT @(0,W1.SCR.ADJ-1):CLL:RVB:("Stategic Planning for User ":STRUCT(2)) "L#35":
IF SPTM.TYPE EQ "S" THEN TEMP = "Level" ELSE TEMP = "Task"
TEMP2 = COUNT(STRUCT(36)<1,PORT+1>,"@")
IF TEMP2 LT 4 THEN TEMP2 = 4
TEMP2 = FIELD(STRUCT(36)<1,PORT+1>,"@",TEMP2-3)
TEMP1 = STRUCT(36)<1,PORT+1>[COL1()+1,40]
PRINT (TEMP:": ":TEMP1) "L#44":RVE:
TC = ""
LOOP WHILE SPTM.CONT AND SPTM.CONT NE 3 AND SPTM.CN LT 50 DO
SPTM.CN = SPTM.CN + 1
IF SPTM.CN = SPTM.STOP - W1.SCR.LINES + 1 THEN GOSUB Sptm.desc.clear
IF SPTM.CN LT SPTM.STOP + 1 THEN
TEMP.LN = SPTM.CN - INT((SPTM.CN - 1) / W1.SCR.LINES) * W1.SCR.LINES + W1.SCR.ADJ 
PRINT @(0,TEMP.LN):CLL:(SPTM.CN:") ") "R#4":
IF (SPTM.INP NE "A" AND SPTM.INP NE "I") OR SPTM.CONT NE 2 THEN
PRINT SPTM.REC(4)<1,SPTM.CN> "L#75":
IF SYSTEM(11) AND SPTM.CONT = 1 THEN
SPTM.CONT = 0
SPTM.FIRST = 0
END
END ELSE
DESC.RSP = ""
GOSUB SPTM.INP.DESC
END
END ELSE
IF SPTM.INP NE "A" AND SPTM.INP NE "I" THEN SPTM.CONT = 0 ELSE
IF SYSTEM(11) AND SPTM.CONT = 1 THEN
SPTM.CONT = 0
END ELSE RQM
SPTM.FIRST = 0
END
IF SPTM.STOP LE 50 - W1.SCR.LINES AND SPTM.CONT THEN
SPTM.STOP = SPTM.STOP + W1.SCR.LINES 
SPTM.CN = SPTM.STOP - W1.SCR.LINES + 1
END ELSE SPTM.CONT = 0
END
IF SPTM.REC(4)<1,SPTM.CN> = "END" THEN
SPTM.REC(4)<1,SPTM.CN> = ""
*SPTM.FIRST = 0
*SPTM.CONT = 0
END
IF SPTM.REC(4)<1,SPTM.CN> = "" THEN
IF SPTM.INP NE "A" AND SPTM.INP NE "I" THEN
*SPTM.CONT = 0
*SPTM.FIRST = 0
END ELSE
IF SPTM.CONT = 1 THEN SPTM.CONT = 2 ELSE SPTM.CONT = 0
END
END
REPEAT
*
IF SPTM.REC(4)<1,SPTM.CN> # "" THEN PRINT @(0,W1.SCR.LINES+W1.SCR.ADJ+1):RVB:"More. . .":RVE: ELSE PRINT @(0,W1.SCR.LINES+W1.SCR.ADJ+1):CLL:
IF SPTM.INP = "DESCNP" AND SPTM.TYPE # "T" THEN
SPTM.CONT = 0; SPTM.CONT1 = 0
IF NOT(SYSTEM(11)) THEN RQM
END ELSE
PRINT @(0,W1.SCR.LINES+W1.SCR.ADJ+2):CLL:RVB:(STRUCT(2):OPT.LINE1) "L#78":RVE:
PRINT @(0,W1.SCR.LINES+W1.SCR.ADJ+3):CLL:SPACE(5):RVB:('*, STEP, EST, COPY, ':OPT.LINE2) "L#73":RVE:@(60):
*INPUT SPTM.INP:
*
READV INP.MODE FROM SY.FILE,"@SYS@USER@":STRUCT(2),27 ELSE INP.MODE<1,PORT+1> = "11"
INP.MODE = INP.MODE<1,PORT+1>
SYS.EV = "0":SVM:"1":SVM:"1":SVM:INP.MODE:SVM:SVM
SYS.EV = SYS.EV:SVM:SVM:SVM:SVM:SVM
SYS.EV = SYS.EV:MENU.APPL:SVM:MENU.NAME:SVM:"SYS.SPTM.STRUCT":SVM:"9900":SVM:STRUCT(2):SVM
SYS.EV = SYS.EV:"1":SVM:"0":SVM:"0":SVM:"90"
SYS.EV<2> = 60:VM:23:VM:"":VM:"10101010":VM:70:VM
SYS.EV<2> = SYS.EV<2>:"300":VM:"EX":SVM
SYS.EV<2> = SYS.EV<2>:'0X'
SYS.EV = SYS.EV:VM:"1":VM:"your entry was invalid":VM:SPTM.INP
SYS.ES = ""; SPTM.INP = ""
CALL SYS.RSP
SPTM.INP = SYS.ES<SYS.ES<1,1,1>+1,1,11>
*
RSP.RELOOP: *
IF SPTM.INP = "*" THEN
IF SPTM.TYPE = "T" THEN
SYS.SLOC<1> = FIELD(SPTM.INP," ",1)
RSP = "SCHEDULE TASK ":STRUCT(36)<1,PORT+1>
IF SYS.SLOC<1> EQ "SCHEDULE" THEN SCH.FLAG = 4 ELSE SCH.FLAG = 11
GOSUB SCHEDULE.CALL
SCH.FLAG = 0
END
*
END ELSE IF SPTM.INP EQ "A" OR SPTM.INP EQ "I" THEN
SPTM.STOP = W1.SCR.LINES 
SPTM.CN = 1
SPTM.CONT = 1
*
END ELSE IF SPTM.INP = "B" THEN
IF SPTM.STOP GT W1.SCR.LINES THEN
SPTM.STOP = SPTM.STOP - W1.SCR.LINES 
SPTM.CN = SPTM.STOP - W1.SCR.LINES + 1
END ELSE
PRINT BELL:
SPTM.STOP = W1.SCR.LINES 
SPTM.CN = 1
END
SPTM.CONT = 1
*
END ELSE IF INDEX("*C*END*U*","*":SPTM.INP:"*",1) OR SPTM.INP = "" THEN
SPTM.CONT = 0; SPTM.CONT1 = 0
*
END ELSE IF SPTM.INP MATCHES '"D"0N' OR SPTM.INP MATCHES '"D"0N"-"0N' THEN
DEL.OK = 1
IF SPTM.INP EQ "D" THEN
ERROR.TEXT = "are you sure?"
ERROR.CODE = "19002"
GOSUB ERROR.CONTROL
DEL.OK =  INDEX(YES,"*":ERROR.RSP:"*",1)
END
IF DEL.OK THEN
SPTM.INP = SPTM.INP[2,99]
SPTM.CN1 = FIELD(SPTM.INP,"-",1)
SPTM.CN2 = FIELD(SPTM.INP,"-",2)
IF LEN(SPTM.CN2) = 0 THEN SPTM.CN2 = SPTM.CN1
IF NUM(SPTM.CN1) AND NUM(SPTM.CN2) THEN
FOR TEMP = SPTM.CN1 TO SPTM.CN2
IF LEN(SPTM.REC(4)<1,SPTM.CN1>) # 0 THEN
SPTM.REC(4) = DELETE(SPTM.REC(4),1,SPTM.CN1)
ERROR.TEXT = "line number ":SPTM.CN1+TEMP-1:" has been deleted"
ERROR.CODE = "17010"
GOSUB ERROR.CONTROL
END
NEXT TEMP
ERROR.TEXT = "deletion cycles completed"
ERROR.CODE = "19000"
MATWRITE SPTM.REC ON PS.FILE,SPTM.ID
END ELSE
ERROR.TEXT = "your choice for deletion was non numeric"
ERROR.CODE = "18010"
END
END ELSE
ERROR.TEXT = "deletion cancelled"
ERROR.CODE = "19000"
GOSUB ERROR.CONTROL
END; *# OF IF DEL.OK
GOSUB ERROR.CONTROL
SPTM.STOP = W1.SCR.LINES 
SPTM.CN = 1
SPTM.CONT = 1
*
END ELSE IF SPTM.INP = "EST" THEN
CALL SYS.SPTM.ESTIMATE(MAT SPTM.REC,"0","16")
SPTM.INP = "DESCRED"
CALL.FUNCTION<1> = "MENU"
SPTM.INP = ""
SPTM.CONT = 0; SPTM.CONT1 = 0
*
END ELSE IF SPTM.INP = "COPY" THEN
EXEC.VERB = "SYS.KEY.CONVERT-COPY"
EXEC.PARAMS = "PSD":AM:"PSD":AM:"@S@":CO.DATA<3>:"@":STRUCT(36)<1,PORT+1>
EXECUTE EXEC.VERB, //IN. < EXEC.PARAMS
SPTM.INP = "DESCRED"
CALL.FUNCTION<1> = "MENU"
SPTM.INP = ""
SPTM.CONT = 0; SPTM.CONT1 = 0
*
END ELSE IF SPTM.INP = "I" THEN
ERROR.TEXT = "the insert has not yet been released"
ERROR.CODE = "16010"
GOSUB ERROR.CONTROL
*
END ELSE IF SPTM.INP = "N" THEN
IF SPTM.STOP LT 50 AND SPTM.REC(4)<1,SPTM.STOP + 1> # "" THEN
SPTM.STOP = SPTM.STOP + W1.SCR.LINES 
SPTM.CN = SPTM.STOP - W1.SCR.LINES + 1
END ELSE
PRINT BELL:
SPTM.STOP = W1.SCR.LINES 
SPTM.CN = 1
END
SPTM.CONT = 1
*
END ELSE IF SPTM.INP MATCHES '"M"0N"-"0N' THEN
SPTM.INP = SPTM.INP[2,99]
SPTM.MOVE.CN = FIELD(SPTM.INP,"-",1)
IF NOT(NUM(SPTM.MOVE.CN)) THEN SPTM.MOVE.CN = 1
IF SPTM.MOVE.CN LT 1 OR SPTM.MOVE.CN GT 50 THEN SPTM.MOVE.CN = 1
IF SPTM.REC(4)<1,SPTM.MOVE.CN> # "" THEN
SPTM.DEST.CN = FIELD(SPTM.INP,"-",2)
IF NOT(NUM(SPTM.DEST.CN)) THEN SPTM.DEST.CN = 1
IF SPTM.DEST.CN LT 1 OR SPTM.DEST.CN GT 50 THEN SPTM.DEST.CN = 1
LOOP WHILE SPTM.DEST.CN GT 1 AND SPTM.REC(4)<1,SPTM.DEST.CN> = "" DO
IF SPTM.REC(4)<1,SPTM.DEST.CN> = "" THEN SPTM.DEST.CN = SPTM.DEST.CN - 1
REPEAT
IF SPTM.DEST.CN # SPTM.MOVE.CN AND SPTM.REC(4)<1,50> = "" THEN
TEMP = SPTM.REC(4)<1,SPTM.MOVE.CN>
CN = 0
IF SPTM.DEST.CN GT CN THEN CN = SPTM.DEST.CN
IF SPTM.MOVE.CN GT CN THEN CN = SPTM.MOVE.CN
TEMP2 = SPTM.REC(4)<1,CN>
LOOP
IF CN LT SPTM.MOVE.CN AND CN LT SPTM.DEST.CN THEN CN = 0
WHILE CN GT 0 DO
IF NOT(CN GT SPTM.MOVE.CN AND CN GT SPTM.DEST.CN) THEN
IF SPTM.DEST.CN LT SPTM.MOVE.CN AND CN GT 1 THEN
SPTM.REC(4)<1,CN> = SPTM.REC(4)<1,CN-1>
IF CN # SPTM.DEST.CN THEN SPTM.REC(4)<1,CN-1> = ""
END ELSE IF CN GT 1 AND CN GT SPTM.MOVE.CN THEN
TEMP1 = SPTM.REC(4)<1,CN-1>
SPTM.REC(4)<1,CN-1> = TEMP2
TEMP2 = TEMP1
END
IF CN = SPTM.DEST.CN THEN SPTM.REC(4)<1,CN> = TEMP
END
CN = CN-1
REPEAT
IF SPTM.DEST.CN = 1 THEN SPTM.REC(4)<1,1> = TEMP
END
END
SPTM.INP = "B"
GOTO RSP.RELOOP
*
END ELSE IF SPTM.INP MATCHES '"M"0N' THEN
SPTM.INP = SPTM.INP[2,99]
IF NOT(NUM(SPTM.INP)) THEN SPTM.INP = 1
IF SPTM.INP LT 1 OR SPTM.INP GT 50 THEN SPTM.INP = 1
IF SPTM.INP GT SPTM.STOP OR SPTM.INP LT SPTM.STOP - W1.SCR.LINES + 1 THEN PRINT BELL: ELSE
TEMP.LN = SPTM.INP - INT((SPTM.INP - 1) / W1.SCR.LINES) * W1.SCR.LINES + W1.SCR.ADJ 
PRINT @(0,TEMP.LN):CLL:(SPTM.INP:") ") "R#4":
SPTM.CN = SPTM.INP
GOSUB SPTM.INP.DESC
*
PRINT @(0,TEMP.LN):CLL:(SPTM.INP:") ") "R#4":SPTM.REC(4)<1,SPTM.INP> "L#75":
END
*
END ELSE IF SPTM.INP = "PRINT" THEN
GOSUB PRINT.ITEM
*
END ELSE IF SPTM.INP = "T" THEN
SYS.ES<2,1,11> = SPTM.REC(1)
GOSUB SPTM.INP.TITLE
IF LEN(TITLE.RSP) # 0 THEN
SPTM.REC(1) = TITLE.RSP
END
PRINT @(0,W1.SCR.ADJ-2):CLL:RVB:"Title:":RVE:" ":SPTM.REC(1) "L#70":
*
END ELSE IF NOT(LEN(SPTM.INP)) OR SPTM.INP EQ "U" OR SPTM.INP EQ "*" THEN
SPTM.CONT1 = 0
*
END ELSE IF NUM(SPTM.INP) THEN
IF SPTM.INP GT 0 AND SPTM.INP LT 50 AND LEN(SPTM.REC(4)<1,SPTM.INP>) GT 0  THEN
SPTM = SPTM.REC(4)<1,SPTM.INP>
SUBR.FUNCTION<1> = "FORMAT"
SPTM.CONT1 = 0
*SPTM.INP = "END"
END
*
END ELSE
ERROR.TEXT = "that was an invalid entry"
ERROR.CODE = "19011"
GOSUB ERROR.CONTROL
END
END
WHILE SPTM.CONT1 DO REPEAT
*
RETURN
!
Sptm.desc.clear: * Clears lines with CLL
IF SPTM.CN = 1 THEN PRINT @(0,7):CLS: ELSE
FOR TEMP = 1 TO 10
PRINT @(0,TEMP+W1.SCR.ADJ):CLL:
NEXT TEMP
END
*
RETURN
!
Sptm.xref.display: * Main program.
SYS.LOCT<1> = "STRUCTURE.MENU"
SYS.SLOC<1> = "DISPLAY"
*
SPTM = ""
SPTM.CONT = 1; SPTM.CONT1 = 1
SPTM.CN   = 1; SPTM.STOP  = W2.SCR.LINES
TEMP.CL = 0
SPTM.FIRST = 1
PRINT @(0,W1.SCR.ADJ-2):CLL:RVB:"Title:":RVE:" ":SPTM.REC(1) "L#70":
PRINT @(0,W1.SCR.ADJ-1):CLL:RVB:("Stategic Planning for User ":STRUCT(2)) "L#35":
IF SPTM.TYPE EQ "S" THEN TEMP = "Level" ELSE TEMP = "Task"
TEMP2 = COUNT(STRUCT(36)<1,PORT+1>,"@")
IF TEMP2 LT 4 THEN TEMP2 = 4
TEMP2 = FIELD(STRUCT(36)<1,PORT+1>,"@",TEMP2-3)
TEMP1 = STRUCT(36)<1,PORT+1>[COL1()+1,40]
PRINT (TEMP:": ":TEMP1) "L#44":RVE:
*
*
LOOP
PRINT @(0,W2.SCR.ADJ):CLL:RVB:
PRINT (USER.NAME:", these are the ":XREF.DESC<SPTM.AM-19>:" levels and paths.  Pointing at ":SPTM.VM) "L#79":RVE:
IF SPTM.CONT THEN
LOOP
IF SPTM.CN = SPTM.STOP - W2.SCR.LINES + 1 THEN GOSUB Sptm.xref.clear
IF SPTM.REC(SPTM.AM)<1,SPTM.CN> = "" THEN
IF SPTM.INP NE "A" AND SPTM.INP NE "I" THEN
SPTM.CONT = 0
SPTM.FIRST = 0
END ELSE
SPTM.CONT = 2
END
END
WHILE SPTM.CONT AND SPTM.CN LE 50 DO
IF SPTM.CN LT SPTM.STOP + 1 THEN
TEMP.LN = SPTM.CN - INT((SPTM.CN - 1) / W2.SCR.LINES) * W2.SCR.LINES + W2.SCR.ADJ
PRINT @(TEMP.CL,TEMP.LN):CLL:
IF SPTM.CN = SPTM.VM THEN PRINT RVB:"*":RVE: ELSE PRINT " ":
PRINT (SPTM.CN:") ") "R#4":
IF (SPTM.INP NE "A" AND SPTM.INP NE "I") OR SPTM.CONT NE 2 THEN
PRINT SPTM.REC(SPTM.AM)<1,SPTM.CN> "L#15":
*
TEMP.ID = SPTM.REC(SPTM.AM)<1,SPTM.CN>
IF TEMP.ID MATCHES '5N' THEN
TEMP.ID = "@J@":CO.DATA<3>:"@":TEMP.ID
END ELSE
IF TEMP.ID[1,1] NE "@" AND SPTM.AM NE 20 THEN
TEMP.ID = SPTM.ID:"@":TEMP.ID
END ELSE
TEMP.ID = "@S@":CO.DATA<3>:TEMP.ID
END
END
READV TEMP.DESC FROM PS.FILE,TEMP.ID,1 ELSE TEMP.DESC = "Not on file..............."
PRINT "  ":TEMP.DESC "L#55":
*
END ELSE
SPTM.TEMP = SPTM.CN
GOSUB SPTM.INP.XREF
IF XREF.RSP = "END" THEN
XREF.RSP = ""
END ELSE IF XREF.RSP = "0" OR (LEN(XREF.RSP) GT 0 AND NUM(XREF.RSP)) THEN
IF SPTM.INP EQ "I" THEN
SPTM.REC(SPTM.AM) = INSERT(SPTM.REC(SPTM.AM),1,SPTM.CN;"")
END
IF XREF.RSP = "999" THEN
SUBR.FUNCTION = 999:AM:SUBR.FUNCTION
SUBR.SUB.FUNCTION = 1:AM:SUBR.SUB.FUNCTION
CALL SYS.SCHED.HTROUTINE
*XREF.RSP = SUBR.FUNCTION<1>
H.TASK = SUBR.SUB.FUNCTION<1>
XREF.RSP = H.TASK
IF NUM(XREF.RSP) AND LEN(XREF.RSP) THEN XREF.RSP = STR("0",5-LEN(XREF.RSP)):XREF.RSP
SUBR.FUNCTION = DELETE(SUBR.FUNCTION,1)
SUBR.SUB.FUNCTION = DELETE(SUBR.SUB.FUNCTION,1)
*
READV INP.MODE FROM SY.FILE,"@SYS@USER@":STRUCT(2),27 ELSE INP.MODE<1,PORT+1> = "11"
INP.MODE = INP.MODE<1,PORT+1>
SYS.EV = "0":SVM:"1":SVM:"1":SVM:INP.MODE:SVM:SVM
SYS.EV = SYS.EV:SVM:SVM:SVM:SVM:SVM
SYS.EV = SYS.EV:MENU.APPL:SVM:MENU.NAME:SVM:"SYS.SPTM.STRUCT":SVM:"9900":SVM:STRUCT(2):SVM
SYS.EV = SYS.EV:"1":SVM:"0":SVM:"0":SVM:"90"
SYS.EV<2> = TEMP.CL+1+4+15+2:VM:TEMP.LN:VM:"":VM:"10101010":VM:"70":VM
SYS.EV<2> = SYS.EV<2>:"300":VM:"EX":SVM
SYS.EV<2> = SYS.EV<2>:'0X'
SYS.EV = SYS.EV:VM:"1":VM:"your entry was invalid":VM:SPTM.REC(1)
SYS.ES = ""
CALL SYS.RSP
TITLE.RSP = SYS.ES<SYS.ES<1,1,1>+1,1,11>
*
TEMP.ID = "@J@":CO.DATA<3>:"@":XREF.RSP
WRITEV TITLE.RSP ON PS.FILE,TEMP.ID,1
END
IF NUM(XREF.RSP) AND LEN(XREF.RSP) THEN XREF.RSP = STR("0",5-LEN(XREF.RSP)):XREF.RSP
PRINT @(TEMP.CL+5,TEMP.LN):SPTM.INP "L#15":
TEMP.ID = "@J@":CO.DATA<3>:"@":XREF.RSP
WRITEV SPTM.ITEM.OLD ON PS.FILE,TEMP.ID,2
END
IF LEN(XREF.RSP) = 0 THEN SPTM.CONT = 0 ELSE
SPTM.REC(SPTM.AM)<1,SPTM.CN> = XREF.RSP
END
END
SPTM.CN = SPTM.CN + 1
END ELSE
IF NOT(SPTM.FIRST) AND SPTM.INP NE "A" AND SPTM.INP NE "I" THEN SPTM.CONT = 0 ELSE
IF SYSTEM(11) AND SPTM.CONT = 1 THEN SPTM.CONT = 0; SPTM.FIRST = 0
END
IF SPTM.STOP LE 50 - W2.SCR.LINES AND SPTM.CONT THEN
SPTM.STOP = SPTM.STOP + W2.SCR.LINES 
SPTM.CN = SPTM.STOP - W2.SCR.LINES + 1
END ELSE SPTM.CONT = 0
END
REPEAT
END
*
IF SPTM.REC(SPTM.AM)<1,SPTM.CN> # "" THEN PRINT @(0,21):RVB:"More. . .":RVE: ELSE PRINT @(0,21):CLL:
PRINT @(0,22):CLS:RVB:(STRUCT(2):OPT.LINE1) "L#78":RVE:
PRINT @(0,23):CLL:SPACE(5):RVB:(' *##, *, ITEM ???, DESC, ':OPT.LINE2) "L#73":RVE:@(60):
IF SPTM.INP = "U" THEN
SPTM.INP = "*"
SPTM.AM = 20
END ELSE
*#INPUT SPTM.INP:
INPUT TC,1:
IF TC EQ "" THEN SPTM.INP = "" ELSE
IF TC EQ "0" THEN SPTM.INP = "U" ELSE
IF TC EQ "v" OR TC EQ "2" THEN SPTM.INP = "*":SPTM.VM+1 ELSE
IF TC EQ "." OR TC EQ "5" THEN SPTM.INP = "*" ELSE
IF TC EQ "^" OR TC EQ "8" THEN
IF SPTM.VM > 1 THEN
SPTM.INP = "*":SPTM.VM-1
END
END ELSE
INPUT SPTM.INP:
SPTM.INP = TC:SPTM.INP
END
END
END
END
END
END
*#SPTM.INP = ""
*
RSP.RELOOP1: *
TEMP = "@EST@*@U@D@DESC@C@END@PRINT@ITEM@"
TEMP1 = SPTM.INP
IF TEMP1 = "" THEN TEMP1 = "C"
IF LEN(TEMP1) GT 4 THEN TEMP1 = TEMP1[1,4]
IF TEMP1[1,1] = "*" THEN TEMP1 = "*"
IF INDEX(TEMP,"@":TEMP1:"@",1) THEN
IF TEMP1 = "DESC" OR TEMP1 = "C" OR TEMP1 = "END" THEN
SPTM.CONT = 0; SPTM.CONT1 = 0
*
END ELSE IF SPTM.INP = "PRINT" THEN
GOSUB PRINT.ITEM
*
END ELSE IF SPTM.INP[1,4] = "ITEM" THEN
SPTM.ID.NEW = FIELD(SPTM.INP," ",2)
SPTM.INP = "END"
SPTM.CONT = 0; SPTM.CONT1 = 0
*
END ELSE IF INDEX("*UD",SPTM.INP,1) THEN
IF SPTM.TYPE EQ "T" THEN
SPTM.AM = 2
SPTM.VM = 1
END ELSE
IF SPTM.INP EQ "U" THEN SPTM.AM = 20
END
SPTM.ID.NEW = SPTM.REC(SPTM.AM)<1,SPTM.VM>
SPTM.ITEM.AM.OLD   = SPTM.AM
SPTM.ITEM.OLD = STRUCT(36)<1,PORT+1>
*SPTM.INP = "END"
SPTM.CONT = 0; SPTM.CONT1 = 0
IF NOT(SPTM.REC(SPTM.AM)<1,SPTM.VM> MATCHES '5N') THEN
IF SPTM.AM = 21 THEN
IF SPTM.ID.NEW[1,1] NE "@" THEN
SPTM.ID.NEW = STRUCT(36)<1,PORT+1>:"@":SPTM.ID.NEW
END ELSE
SPTM.ID.NEW = SPTM.ID.NEW[2,999]
END
END ELSE IF SPTM.AM = 20 THEN
TEMP2 = COUNT(STRUCT(36)<1,PORT+1>,"@")
IF TEMP2 LT 1 THEN TEMP2 = 1
TEMP2 =FIELD(STRUCT(36)<1,PORT+1>,"@",TEMP2)
SPTM.ID.NEW = STRUCT(36)<1,PORT+1>[1,COL2()-1]
SPTM.REC(20) = SPTM.ID.NEW
SPTM.REC(2)  = 1
END
END
*
END ELSE IF SPTM.INP MATCHES '"*"0N' AND SPTM.INP NE "*" THEN
SPTM.VAL = SPTM.INP[2,99]
SPTM.INP = "*"
IF NOT(NUM(SPTM.VAL)) THEN SPTM.VAL = SPTM.VM
IF SPTM.VAL GT 0 AND SPTM.VAL LT 51 AND SPTM.VAL # SPTM.VM THEN
TEMP.LN = SPTM.VM - INT((SPTM.VM - 1) / W2.SCR.LINES) * W2.SCR.LINES +W2.SCR.ADJ
PRINT @(TEMP.CL,TEMP.LN):" ":
SPTM.VM = SPTM.VAL
*#IF SPTM.VAL LE SPTM.STOP AND SPTM.VAL GT SPTM.STOP - W2.SCR.LINES THEN
TEMP.LN = SPTM.VM - INT((SPTM.VM - 1) / W2.SCR.LINES) * W2.SCR.LINES +W2.SCR.ADJ
PRINT @(TEMP.CL,TEMP.LN):
PRINT RVB:"*":RVE
*#END
SPTM.REC(SPTM.AM-18) = SPTM.VM
SPTM.STOP = W2.SCR.LINES 
SPTM.CN = 1
SPTM.CONT = 0; SPTM.CONT1 = 1
END
END
*
END ELSE IF SPTM.INP EQ "A" OR SPTM.INP EQ "I" THEN
SPTM.STOP = W2.SCR.LINES 
SPTM.CN = 1
SPTM.CONT = 1; SPTM.CONT1 = 1
*
END ELSE IF SPTM.INP = "B" THEN
IF SPTM.STOP GT W2.SCR.LINES THEN
SPTM.STOP = SPTM.STOP - W2.SCR.LINES
SPTM.CN = SPTM.STOP - W2.SCR.LINES + 1
END ELSE
PRINT BELL:
SPTM.STOP = W2.SCR.LINES 
SPTM.CN = 1
END
SPTM.CONT = 1
*
END ELSE IF SPTM.INP MATCHES '"D"0N' THEN
IF SPTM.INP EQ "D" THEN PRINT BELL:; RQM
SPTM.CN = SPTM.INP[2,99]
IF NUM(SPTM.CN) THEN
IF SPTM.CN > 0 THEN
SPTM.REC(SPTM.AM) = DELETE(SPTM.REC(SPTM.AM),1,SPTM.CN)
MATWRITE SPTM.REC ON PS.FILE,SPTM.ID
ERROR.TEXT = "line number ":SPTM.CN:" has been deleted"
ERROR.CODE = "17010"
END ELSE
ERROR.TEXT = 'zero is not a valid choice on a line delete, try "D"'
ERROR.CODE = "18010"
END
END ELSE
ERROR.TEXT = "your choice for deletion was non numeric"
ERROR.CODE = "18010"
END
GOSUB ERROR.CONTROL
SPTM.STOP = W2.SCR.LINES 
SPTM.CN = 1
SPTM.CONT = 1
*
END ELSE IF SPTM.INP = "I" THEN
ERROR.TEXT = "the insert has not yet been released"
ERROR.CODE = "16010"
GOSUB ERROR.CONTROL
*
END ELSE IF SPTM.INP = "N" THEN
IF SPTM.STOP LT 50 AND SPTM.REC(SPTM.AM)<1,SPTM.STOP + 1> # "" THEN
SPTM.STOP = SPTM.STOP + W2.SCR.LINES 
SPTM.CN = SPTM.STOP - W2.SCR.LINES + 1
END ELSE
PRINT BELL:
SPTM.STOP = W2.SCR.LINES 
SPTM.CN = 1
END
SPTM.CONT = 1
*
END ELSE IF SPTM.INP MATCHES '"M"0N"-"0N' THEN
SPTM.INP = SPTM.INP[2,99]
SPTM.MOVE.CN = FIELD(SPTM.INP,"-",1)
IF NOT(NUM(SPTM.MOVE.CN)) THEN SPTM.MOVE.CN = 1
IF SPTM.MOVE.CN LT 1 OR SPTM.MOVE.CN GT 50 THEN SPTM.MOVE.CN = 1
IF SPTM.REC(SPTM.AM)<1,SPTM.MOVE.CN> # "" THEN
SPTM.DEST.CN = FIELD(SPTM.INP,"-",2)
IF NOT(NUM(SPTM.DEST.CN)) THEN SPTM.DEST.CN = 1
IF SPTM.DEST.CN LT 1 OR SPTM.DEST.CN GT 50 THEN SPTM.DEST.CN = 1
LOOP WHILE SPTM.DEST.CN GT 1 AND SPTM.REC(SPTM.AM)<1,SPTM.DEST.CN> = "" DO
IF SPTM.REC(SPTM.AM)<1,SPTM.DEST.CN> = "" THEN SPTM.DEST.CN = SPTM.DEST.CN - 1
REPEAT
IF SPTM.DEST.CN # SPTM.MOVE.CN AND SPTM.REC(SPTM.AM)<1,50> = "" THEN
TEMP = SPTM.REC(SPTM.AM)<1,SPTM.MOVE.CN>
CN = 0
IF SPTM.DEST.CN GT CN THEN CN = SPTM.DEST.CN
IF SPTM.MOVE.CN GT CN THEN CN = SPTM.MOVE.CN
TEMP2 = SPTM.REC(SPTM.AM)<1,CN>
LOOP
IF CN LT SPTM.MOVE.CN AND CN LT SPTM.DEST.CN THEN CN = 0
WHILE CN GT 0 DO
IF NOT(CN GT SPTM.MOVE.CN AND CN GT SPTM.DEST.CN) THEN
IF SPTM.DEST.CN LT SPTM.MOVE.CN AND CN GT 1 THEN
SPTM.REC(SPTM.AM)<1,CN> = SPTM.REC(SPTM.AM)<1,CN-1>
IF CN # SPTM.DEST.CN THEN SPTM.REC(SPTM.AM)<1,CN-1> = ""
END ELSE IF CN GT 1 AND CN GT SPTM.MOVE.CN THEN
TEMP1 = SPTM.REC(SPTM.AM)<1,CN-1>
SPTM.REC(SPTM.AM)<1,CN-1> = TEMP2
TEMP2 = TEMP1
END
IF CN = SPTM.DEST.CN THEN SPTM.REC(SPTM.AM)<1,CN> = TEMP
END
CN = CN-1
REPEAT
IF SPTM.DEST.CN = 1 THEN SPTM.REC(SPTM.AM)<1,1> = TEMP
END
END
SPTM.INP = "B"
SPTM.STOP = W2.SCR.LINES 
GOTO RSP.RELOOP1
*
END ELSE IF SPTM.INP MATCHES '"M"0N' THEN
SPTM.VAL = SPTM.INP[2,99]
IF NOT(NUM(SPTM.VAL)) THEN SPTM.VAL = 1
IF SPTM.VAL LT 1 OR SPTM.VAL GT 50 THEN SPTM.VAL = 1
IF SPTM.VAL GT SPTM.STOP THEN PRINT BELL: ELSE
TEMP.LN = SPTM.VAL - INT((SPTM.INP - 1) / W2.SCR.LINES) * W2.SCR.LINES +W2.SCR.ADJ
PRINT @(TEMP.CL,TEMP.LN):CLL:" ":(SPTM.VAL:") ") "R#4":
SPTM.TEMP = SPTM.VAL
XREF.RSP = ""
GOSUB SPTM.INP.XREF
IF LEN(XREF.RSP) THEN SPTM.REC(SPTM.AM)<1,SPTM.VAL> = XREF.RSP
PRINT @(TEMP.CL,TEMP.LN):CLL:" ":(SPTM.VAL:") ") "R#4":SPTM.REC(SPTM.AM)<1,SPTM.VAL> "L#15":
END
*
END ELSE IF SPTM.INP = "T" THEN
SYS.ES <2,1,11> = SPTM.REC(1)
GOSUB SPTM.INP.TITLE
IF LEN(TITLE.RSP) # 0 THEN
SPTM.REC(1) = TITLE.RSP
END
PRINT @(0,W1.SCR.ADJ-2):CLL:RVB:"Title:":RVE:" ":SPTM.REC(1) "L#70":
PRINT @(0,W1.SCR.ADJ-1):CLL:RVB:("Stategic Planning for User ":STRUCT(2)) "L#35":
IF SPTM.TYPE EQ "S" THEN TEMP = "Level" ELSE TEMP = "Task"
TEMP2 = COUNT(STRUCT(36)<1,PORT+1>,"@")
IF TEMP2 LT 4 THEN TEMP2 = 4
TEMP2 = FIELD(STRUCT(36)<1,PORT+1>,"@",TEMP2-3)
TEMP1 = STRUCT(36)<1,PORT+1>[COL1()+1,40]
PRINT (TEMP:": ":TEMP1) "L#44":RVE:
*
END ELSE IF NUM(SPTM.INP) THEN
IF SPTM.INP GT 0 AND SPTM.INP LT 50 AND LEN(SPTM.REC(SPTM.AM)<1,SPTM.INP>) GT 0  THEN
SPTM = SPTM.REC(SPTM.AM)<1,SPTM.INP>
SUBR.FUNCTION<1> = "FORMAT"
SPTM.CONT1 = 0
*SPTM.INP = "END"
END
*
END ELSE
ERROR.TEXT = "that was an invalid entry"
ERROR.CODE = "19011"
GOSUB ERROR.CONTROL
END
WHILE SPTM.CONT1 DO REPEAT
*
RETURN
!
Sptm.xref.clear: * Clears lines with CLL
FOR TEMP = 1 TO W2.SCR.LINES
PRINT @(TEMP.CL,TEMP+W2.SCR.ADJ):CLL:
NEXT TEMP
*
RETURN
!
PRINT.ITEM: *
PRINTER ON
HEADER = "Stategic Planning Control"
HEADER2 = "Item. Reference..................... Description..........................................................."
SPTM.PR.CONT = 1; PR.LINE = 99; PR.PAGE = 0
SPTM.PR.CN = 1
LOOP
IF SPTM.REC(4)<1,SPTM.PR.CN> = "" THEN SPTM.PR.CONT = 0
WHILE SPTM.PR.CONT DO
IF PR.LINE GT 50 THEN GOSUB PRINT.HEADER
PRINT (SPTM.PR.CN:")  ") "R#5":
PRINT SPTM.REC(4)<1,SPTM.PR.CN> "L#75"
SPTM.PR.CN = SPTM.PR.CN + 1
PR.LINE = PR.LINE + 1
REPEAT
*
SPTM.PR.CONT = 2
SPTM.PR.CN = 1
PRINT
PRINT
PR.LINE = PR.LINE + 2
IF PR.LINE GT 40 THEN GOSUB PRINT.HEADER ELSE
PRINT HEADER2
PR.LINE = PR.LINE + 1
END
LOOP
IF SPTM.REC(21)<1,SPTM.PR.CN> = "" THEN SPTM.PR.CONT = 0
WHILE SPTM.PR.CONT DO
IF PR.LINE GT 50 THEN GOSUB PRINT.HEADER
PRINT (SPTM.PR.CN:")  ") "R#5":" ":
PRINT SPTM.REC(21)<1,SPTM.PR.CN> "L#30":" ":
*
IF SPTM.REC(21)<1,SPTM.PR.CN> MATCHES '5N' THEN
TEMP.ID = "@J@":CO.DATA<3>:"@":SPTM.REC(21)<1,SPTM.PR.CN>
TEMP.TYPE = "T"
END ELSE
IF SPTM.REC(21)[1,1] NE "@" THEN
TEMP.ID = SPTM.ID:"@":SPTM.REC(21)<1,SPTM.PR.CN>
TEMP.TYPE = "S"
END ELSE
TEMP.ID = "@S@":CO.DATA<3>:SPTM.REC(21)<1,SPTM.PR.CN>
TEMP.TYPE = "S"
END
END
READV TEMP.DESC FROM PS.FILE,TEMP.ID,1 ELSE
TEMP.DESC = 'not on file.............'
END
*
PRINT TEMP.DESC "L#75"
SPTM.PR.CN = SPTM.PR.CN + 1
PR.LINE = PR.LINE + 1
REPEAT
*
PRINTER OFF
PRINTER CLOSE
ERROR.TEXT = "printing completed"
ERROR.CODE = "19000"
GOSUB ERROR.CONTROL
*
RETURN
!
PRINT.HEADER: *
PR.PAGE = PR.PAGE+1; PR.LINE =W2.SCR.ADJ
IF SPTM.TYPE EQ "T" THEN PRINT @(0,20):SPTM.REC(2) "L#50":"< ":
PRINT @(0,W1.SCR.ADJ-1):CLS:SPACE(LEN(HEADER)/2+.5):HEADER "L#40":"Page ":PR.PAGE
PRINT "Title: ":SPTM.REC(1) "L#70"
PRINT ("Stategic Planning for User ":STRUCT(2):". Company ":CO.DATA<3>) "L#35":
IF SPTM.TYPE = "S" THEN TEMP = "Level" ELSE TEMP = "Task"
TEMP2 = COUNT(STRUCT(36)<1,PORT+1>,"@")
IF TEMP2 LT 4 THEN TEMP2 = 4
TEMP2 =FIELD(STRUCT(36)<1,PORT+1>,"@",TEMP2-3)
TEMP1 = STRUCT(36)<1,PORT+1>[COL1()+1,40]
PRINT (TEMP:": ":TEMP1) "L#44"
PRINT
PRINT
IF SPTM.PR.CONT = 2 THEN
PRINT HEADER2
PRINT
PRINT
PR.LINE = PR.LINE + 15 
END
*
RETURN
!
SPTM.INP.TITLE: * Inputs title line for tiers and tasks.
*
READV INP.MODE FROM SY.FILE,"@SYS@USER@":STRUCT(2),27 ELSE INP.MODE<1,PORT+1> = "11"
INP.MODE = INP.MODE<1,PORT+1>
SYS.EV = "0":SVM:"1":SVM:"1":SVM:INP.MODE:SVM:SVM
SYS.EV = SYS.EV:SVM:SVM:SVM:SVM:SVM
SYS.EV = SYS.EV:MENU.APPL:SVM:MENU.NAME:SVM:"SYS.SPTM.STRUCT":SVM:"9900":SVM:STRUCT(2):SVM
SYS.EV = SYS.EV:"1":SVM:"0":SVM:"0":SVM:"90"
SYS.EV<2> = "5":VM:W1.SCR.ADJ-2:VM:"":VM:"10101010":VM:"70":VM
SYS.EV<2> = SYS.EV<2>:"300":VM:"EX":SVM
SYS.EV<2> = SYS.EV<2>:'0X'
SYS.EV = SYS.EV:VM:"1":VM:"your entry was invalid":VM:SPTM.REC(1)
CALL SYS.RSP
TITLE.RSP = SYS.ES<SYS.ES<1,1,1>+1,1,11>
*
RETURN
!
SPTM.INP.DESC: * Subroutine to input description lines.
*
READV INP.MODE FROM SY.FILE,"@SYS@USER@":STRUCT(2),27 ELSE INP.MODE<1,PORT+1> = "11"
INP.MODE = INP.MODE<1,PORT+1>
SYS.EV = "0":SVM:"1":SVM:"1":SVM:INP.MODE:SVM:SVM
SYS.EV = SYS.EV:SVM:SVM:SVM:SVM:SVM
SYS.EV = SYS.EV:MENU.APPL:SVM:MENU.NAME:SVM:"SYS.SPTM.STRUCT":SVM:"9900":SVM:STRUCT(2):SVM
SYS.EV = SYS.EV:"1":SVM:"0":SVM:"0":SVM:"90"
SYS.EV<2> = "5":VM:TEMP.LN:VM:"":VM:"10101010":VM:"75":VM
SYS.EV<2> = SYS.EV<2>:"300":VM:"EX":SVM
SYS.EV<2> = SYS.EV<2>:'0X'
SYS.EV = SYS.EV:VM:"1":VM:"your entry was invalid":VM:SPTM.REC(4)<1,SPTM.CN>
SYS.ES = ""
SYS.ES<SYS.ES<1,1,1>+1,1,11> = SPTM.REC(4)<1,SPTM.CN>
CALL SYS.RSP
SPTM.REC(4)<1,SPTM.CN> = SYS.ES<SYS.ES<1,1,1>+1,1,11>
*
RETURN
*
!
SPTM.INP.XREF: * Subroutine to input description lines.
*
READV INP.MODE FROM SY.FILE,"@SYS@USER@":STRUCT(2),27 ELSE INP.MODE<1,PORT+1> = "11"
INP.MODE = INP.MODE<1,PORT+1>
SYS.EV = "0":SVM:"1":SVM:"1":SVM:INP.MODE:SVM:SVM
SYS.EV = SYS.EV:SVM:SVM:SVM:SVM:SVM
SYS.EV = SYS.EV:MENU.APPL:SVM:MENU.NAME:SVM:"SYS.SPTM.STRUCT":SVM:"9900":SVM:STRUCT(2):SVM
SYS.EV = SYS.EV:"1":SVM:"0":SVM:"0":SVM:"90"
SYS.EV<2> = "5":VM:TEMP.LN:VM:"":VM:"10101010":VM:"50":VM
SYS.EV<2> = SYS.EV<2>:"300":VM:"EX":SVM
SYS.EV<2> = SYS.EV<2>:'0X'
SYS.EV = SYS.EV:VM:"1":VM:"your entry was invalid":VM:SPTM.REC(SPTM.AM)<1,SPTM.TEMP>
SYS.ES = ""; SPTM.INP = ""
CALL SYS.RSP
SPTM.INP = SYS.ES<SYS.ES<1,1,1>+1,1,11>
IF NUM(SPTM.INP) AND LEN(SPTM.INP) THEN SPTM.INP = STR("0",5-LEN(SPTM.INP)):SPTM.INP
XREF.RSP = SPTM.INP
*
RETURN
*
!
*
$INCLUDE IBP SYS.INCL.SCHED.CALL
*
!
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
*
END
~SYS.STEP~
SUBROUTINE SYS.STEP
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
SYS.PROG = "SYS.STEP":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "VAR":AM:SYS.SLOC
STEP.REC = ""
Prog.restart: *
*
STEP.FIRST = 1
CALL.FUNCTION<1> = FIELD(CALL.FUNCTION<1>," ",1)
IF CALL.FUNCTION<1> # "STEP" THEN RETURN
CURR.TASK = SUBR.FUNCTION<1> 
CURR.STEP = SUBR.SUB.FUNCTION<1> 
IF LEN(CURR.TASK) < 5 THEN CURR.TASK = STR("0",5-LEN(CURR.TASK)):CURR.TASK
IF NOT(NUM(CURR.TASK)) OR NOT(NUM(CURR.STEP)) THEN
IF NOT(NUM(TASK.NUM)) OR NOT(NUM(TASK.STEP)) THEN RETURN
SUBR.FUNCTION<1> = TASK.NUM
SUBR.SUB.FUNCTION<1> = TASK.STEP
GOTO Prog.restart
END
IF CURR.TASK < 1 OR CURR.TASK > 99999 THEN
IF TASK.NUM < 1 OR TASK.NUM > 99999 THEN RETURN
SUBR.FUNCTION<1> = TASK.NUM
SUBR.SUB.FUNCTION<1> = TASK.STEP
GOTO Prog.restart
END
STEP.ITEM.NEW = ""
STEP.ITEM.OLD = CURR.TASK:AM:CURR.STEP
STEP.INP = ""
OPT.LINE1 = ', Enter "B", "N", "M##", "M##-##", "A", "D##-##",'
OPT.LINE2 = ' "EST", "I", "T", "SCHEDULE", "END", or "C" . . .'
*
SYS.LOCT<1> = "READ"
SYS.SLOC<1> = "ID"
RSP = ""
STEP.ID = "@J@":STRUCT(2):"@":CURR.TASK
*
SYS.SLOC<1> = "LOCK"
SYS.FILE = "PSD"
SYS.ITEM = STEP.ID
LOOP
LCK.STAT = 0
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 AND LCK.STAT # 9998 DO
REPEAT
IF LCK.STAT > 9000 THEN
ERROR.TEXT = "your control record is locked":AM:"try again later"
ERROR.CODE = "16110":AM:"16110"
GOSUB ERROR.CONTROL
GOTO End.of.prog
END
*
SYS.SLOC<1> = "READ"
NOT.FOUND = 0
READV HIGH.STEP FROM PS.FILE,STEP.ID,19 ELSE
NOT.FOUND = 1
HIGH.STEP = 1
END
READV STEP.REC FROM PS.FILE,STEP.ID,CURR.STEP+20 ELSE
NOT.FOUND = 2
CURR.STEP = 1
END
ERROR.TEXT = "that step is higher than your high step number"
ERROR.CODE = "19011"
IF NOT.FOUND = 2 THEN ERROR.TEXT =  "that step or task is not on file"
IF NOT.FOUND THEN GOSUB ERROR.CONTROL
*
IF NOT.FOUND # 2 AND NOT.FOUND THEN
ERROR.TEXT = "new step, add it? "
ERROR.CODE = "18002"
GOSUB ERROR.CONTROL
IF INDEX(YES,ERROR.RSP,1) # 0 THEN
STEP.REC = ""
PRINT @(0,5):CLS:RVB:"Title:":RVE:" ":STEP.REC<1,2> "L#70":
CALL SYS.LINE.INPUT("7","5","70",STEP.REC<1,2>,RSP,"0","1")
IF LEN(RSP) # 0 THEN
STEP.REC<1,2> = RSP
PRINT @(0,5):CLL:RVB:"Title:":RVE:" ":STEP.REC<1,2> "L#70":
END
IF CURR.STEP > HIGH.STEP THEN
HIGH.STEP = CURR.STEP
WRITEV HIGH.STEP ON PS.FILE,STEP.ID,19
END
END ELSE RETURN
END
*
IF NOT.FOUND # 2 THEN
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
CALL.SUB.FUNCTION<1> = "MENU"
PRINT @(0,5):CLS:
*
LOOP
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
IF CALL.SUB.FUNCTION<1> = "MENU" THEN
GOSUB Sptm.desc.display
END ELSE STEP.INP = "END"
*
WHILE CALL.SUB.FUNCTION<1> = "MENU" AND STEP.INP # "END" DO REPEAT
*
SYS.LOCT<1> = "END"
SYS.SLOC<1> = "UPDATE"
SYS.FILE = "PSD"
SYS.ITEM = STEP.ID
WRITEV STEP.REC ON PS.FILE,STEP.ID,CURR.STEP+20
*
END
SYS.SLOC<1> = "UNLOCK"
IF SYS.PROG<2> # "SYS.SPTM.STRUCT" AND SYS.PROG<2> # "SYS.SCHEDULE" THEN
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
END
*
IF STEP.ITEM.NEW # "" THEN
CURR.TASK = STEP.ITEM.NEW<1>
CURR.STEP = STEP.ITEM.NEW<2>
STEP.ITEM.OLD = STEP.ITEM.NEW
USER.UPD(2) = 1
STEP.ITEM.NEW = ""
GOTO Prog.restart
END
!
End.of.prog: *
*
CALL.SUB.FUNCTION<1> = CURR.TASK:" ":CURR.STEP
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
RETURN
!
Sptm.desc.display: * Display description on lines 6-10
SYS.LOCT<1> = "STEP.DESC"
SYS.SLOC<1> = "DISPLAY"
*
SPTM = ""
STEP.CONT = 1; STEP.CONT1 = 1
STEP.CN   = 1; STEP.STOP  = 9
*
LOOP
PRINT @(0,5):CLL:RVB:"Title:":RVE:" ":STEP.REC<1,2> "L#70":
PRINT @(0,6):CLL:RVB:("Stategic Planning for User ":STRUCT(2)) "L#35":
PRINT ("Task: ":CURR.TASK:"   Step: ":CURR.STEP) "L#44":RVE:
TC = ""
LOOP
IF STEP.CN = STEP.STOP - 9 + 1 THEN GOSUB Sptm.desc.clear
IF STEP.REC<1,20,STEP.CN> = "" THEN
IF STEP.INP # "A" THEN
STEP.CONT = 0
END ELSE
IF STEP.CONT = 1 THEN STEP.CONT = 2
END
END
WHILE STEP.CONT AND STEP.CN <= 50 DO
IF STEP.CN < STEP.STOP + 1 THEN
TEMP.LN = STEP.CN - INT((STEP.CN - 1) / 9) * 9 + 6
PRINT @(0,TEMP.LN):CLL:(STEP.CN:") ") "R#4":
IF STEP.INP # "A" OR STEP.CONT # 2 THEN
PRINT STEP.REC<1,20,STEP.CN> "L#75":
END ELSE
IF TC # "" THEN PRINT TC:
INPUT RSP,(75-LEN(TC)):
IF TC # "" THEN RSP = TC:RSP; TC = ""
IF LEN(RSP) = 75 THEN
PRINT BELL:
LOOP UNTIL RSP[LEN(RSP),1] = " " DO TC = RSP[LEN(RSP),1]:TC; RSP = RSP[1,LEN(RSP)-1] REPEAT
PRINT @(LEN(RSP)+4):SPACE(75-LEN(RSP)):
END
IF LEN(RSP) = 0 THEN STEP.CONT = 0 ELSE STEP.REC<1,20,STEP.CN> = RSP
END
STEP.CN = STEP.CN + 1
END ELSE
IF NOT(STEP.FIRST) AND STEP.INP # "A" THEN STEP.CONT = 0 ELSE
IF NOT(SYSTEM(11) AND STEP.CONT = 1) THEN RQM
IF NOT(SYSTEM(11) AND STEP.CONT = 1) THEN RQM
IF NOT(SYSTEM(11) AND STEP.CONT = 1) THEN RQM
IF NOT(SYSTEM(11) AND STEP.CONT = 1) THEN RQM
IF NOT(SYSTEM(11) AND STEP.CONT = 1) THEN RQM
IF SYSTEM(11) AND STEP.CONT = 1 THEN STEP.CONT = 0; INPUT RSP.CONT,1: ELSE RQM
END
IF STEP.STOP <= 50 - 9 AND STEP.CONT THEN
STEP.STOP = STEP.STOP + 9 
STEP.CN = STEP.STOP - 9 + 1
END ELSE STEP.CONT = 0
END
REPEAT
STEP.FIRST = 0
*
IF STEP.REC<1,20,STEP.CN> # "" THEN PRINT @(0,16):RVB:"More. . .":RVE: ELSE PRINT @(0,16):CLL:
PRINT @(0,22):CLS:STRUCT(2):OPT.LINE1:
PRINT @(0,23):CLL:SPACE(5):OPT.LINE2:
INPUT STEP.INP:
IF STEP.INP = "C" THEN STEP.FIRST = 1
*
RSP.RELOOP: *
IF STEP.INP = "A" THEN
STEP.STOP = 9 
STEP.CN = 1
STEP.CONT = 1
*
END ELSE IF STEP.INP = "B" THEN
IF STEP.STOP > 9 THEN
STEP.STOP = STEP.STOP - 9 
STEP.CN = STEP.STOP - 9 + 1
END ELSE
PRINT BELL:
STEP.STOP = 9 
STEP.CN = 1
END
STEP.CONT = 1
*
END ELSE IF STEP.INP = "C" OR STEP.INP = "" OR STEP.INP = "END" THEN
STEP.CONT = 0; STEP.CONT1 = 0
*
END ELSE IF STEP.INP MATCHES '"D"0N' OR STEP.INP MATCHES '"D"0N"-"0N' THEN
STEP.INP = STEP.INP[2,99]
STEP.CN1 = FIELD(STEP.INP,"-",1)
STEP.CN2 = FIELD(STEP.INP,"-",2)
IF LEN(STEP.CN2) = 0 THEN STEP.CN2 = STEP.CN1
IF NUM(STEP.CN1) AND NUM(STEP.CN2) THEN
ERROR.TEXT = "are you sure?"
ERROR.CODE = "19002"
GOSUB ERROR.CONTROL
IF INDEX(YES,"*":ERROR.RSP:"*",1) # 0 THEN
FOR TEMP = STEP.CN1 TO STEP.CN2
IF LEN(STEP.REC<1,20,STEP.CN1>) # 0 THEN
STEP.REC = DELETE(STEP.REC,1,15,STEP.CN1)
ERROR.TEXT = "line number ":STEP.CN1+TEMP-1:" has been deleted"
ERROR.CODE = "17010"
GOSUB ERROR.CONTROL
END
NEXT TEMP
ERROR.TEXT = "deletion cycles completed"
ERROR.CODE = "19000"
WRITEV STEP.REC ON PS.FILE,STEP.ID,CURR.STEP+20
END
END ELSE
ERROR.TEXT = "your choice for deletion was non numeric"
ERROR.CODE = "18010"
END
GOSUB ERROR.CONTROL
STEP.STOP = 9 
STEP.CN = 1
STEP.CONT = 1
*
END ELSE IF STEP.INP = "EST" THEN
CALL SYS.STEP.ESTIMATE(STEP.REC,"0","16")
STEP.INP = "DESCRED"
CALL.FUNCTION<1> = "MENU"
RSP = ""
STEP.CONT = 0; STEP.CONT1 = 0
*
END ELSE IF STEP.INP = "I" THEN
ERROR.TEXT = "the insert has not yet been released"
ERROR.CODE = "16010"
GOSUB ERROR.CONTROL
*
END ELSE IF STEP.INP = "N" THEN
IF STEP.STOP < 50 AND STEP.REC<1,20,STEP.STOP + 1> # "" THEN
STEP.STOP = STEP.STOP + 9 
STEP.CN = STEP.STOP - 9 + 1
END ELSE
PRINT BELL:
STEP.STOP = 9 
STEP.CN = 1
END
STEP.CONT = 1
*
END ELSE IF STEP.INP MATCHES '"M"0N"-"0N' THEN
STEP.INP = STEP.INP[2,99]
STEP.MOVE.CN = FIELD(STEP.INP,"-",1)
IF NOT(NUM(STEP.MOVE.CN)) THEN STEP.MOVE.CN = 1
IF STEP.MOVE.CN < 1 OR STEP.MOVE.CN > 50 THEN STEP.MOVE.CN = 1
IF STEP.REC<1,20,STEP.MOVE.CN> # "" THEN
STEP.DEST.CN = FIELD(STEP.INP,"-",2)
IF NOT(NUM(STEP.DEST.CN)) THEN STEP.DEST.CN = 1
IF STEP.DEST.CN < 1 OR STEP.DEST.CN > 50 THEN STEP.DEST.CN = 1
LOOP WHILE STEP.DEST.CN > 1 AND STEP.REC<1,20,STEP.DEST.CN> = "" DO
IF STEP.REC<1,20,STEP.DEST.CN> = "" THEN STEP.DEST.CN = STEP.DEST.CN - 1
REPEAT
IF STEP.DEST.CN # STEP.MOVE.CN AND STEP.REC<1,20,50> = "" THEN
TEMP = STEP.REC<1,20,STEP.MOVE.CN>
CN = 0
IF STEP.DEST.CN > CN THEN CN = STEP.DEST.CN
IF STEP.MOVE.CN > CN THEN CN = STEP.MOVE.CN
TEMP2 = STEP.REC<1,20,CN>
LOOP
IF CN < STEP.MOVE.CN AND CN < STEP.DEST.CN THEN CN = 0
WHILE CN > 0 DO
IF NOT(CN > STEP.MOVE.CN AND CN > STEP.DEST.CN) THEN
IF STEP.DEST.CN < STEP.MOVE.CN AND CN > 1 THEN
STEP.REC<1,20,CN> = STEP.REC<1,20,CN-1>
IF CN # STEP.DEST.CN THEN STEP.REC<1,20,CN-1> = ""
END ELSE IF CN > 1 AND CN > STEP.MOVE.CN THEN
TEMP1 = STEP.REC<1,20,CN-1>
STEP.REC<1,20,CN-1> = TEMP2
TEMP2 = TEMP1
END
IF CN = STEP.DEST.CN THEN STEP.REC<1,20,CN> = TEMP
END
CN = CN-1
REPEAT
IF STEP.DEST.CN = 1 THEN STEP.REC<1,20,1> = TEMP
END
END
STEP.INP = "B"
GOTO RSP.RELOOP
*
END ELSE IF STEP.INP MATCHES '"M"0N' THEN
STEP.INP = STEP.INP[2,99]
IF NOT(NUM(STEP.INP)) THEN STEP.INP = 1
IF STEP.INP < 1 OR STEP.INP > 50 THEN STEP.INP = 1
IF STEP.INP > STEP.STOP OR STEP.INP < STEP.STOP - 9 + 1 THEN PRINT BELL: ELSE
TEMP.LN = STEP.INP - INT((STEP.INP - 1) / 9) * 9 + 6
PRINT @(0,TEMP.LN):CLL:(STEP.INP:") ") "R#4":
RSP = ""
TEMP.CL = 4
TEMP.LEN = 75
CALL SYS.LINE.INPUT(TEMP.CL,TEMP.LN,TEMP.LEN,STEP.REC<1,20,STEP.INP>,RSP,"0","1")
IF LEN(RSP) # 0 THEN
IF LEN(RSP) = 75 THEN
PRINT BELL:
LOOP UNTIL RSP[LEN(RSP)-1,1] = " " DO RSP = RSP[1,LEN(RSP)-1] REPEAT
INPUTCLEAR
END
STEP.REC<1,20,STEP.INP> = RSP
END
PRINT @(0,TEMP.LN):CLL:(STEP.INP:") ") "R#4":STEP.REC<1,20,STEP.INP> "L#75":
END
*
END ELSE IF STEP.INP = "T" THEN
RSP = ""
CALL SYS.LINE.INPUT("7","5","70",STEP.REC<1,2>,RSP,"0","1")
IF LEN(RSP) # 0 THEN
STEP.REC<1,2> = RSP
PRINT @(0,5):CLL:RVB:"Title:":RVE:" ":STEP.REC<1,2> "L#70":
END
*
END ELSE IF STEP.INP = "SCHEDULE" THEN
WRITEV STEP.REC ON PS.FILE,STEP.ID,CURR.STEP+20
SYS.SLOC<1> = STEP.INP
IF STRUCT(36)<1,PORT+1> # "" THEN
SUBR.FUNCTION<1> = STRUCT(36)<1,PORT+1>
END ELSE
SUBR.FUNCTION<1> = TASK.NUM
END
RSP = "SCHEDULE TASK ":SUBR.FUNCTION<1> 
SCH.FLAG = 5
GOSUB SCHEDULE.CALL
RSP = ""
PRINT @(0,5):CLS:
STEP.INP = "DESCRED"
STEP.CONT = 0
STEP.CONT1 = 0
CALL.FUNCTION<1> = "MENU"
READV STEP.REC FROM PS.FILE,STEP.ID,CURR.STEP+20 ELSE STOP
READV HIGH.STEP FROM PS.FILE,STEP.ID,19 ELSE STOP
*
END ELSE IF LEN(STEP.INP) = 0 THEN
STEP.CONT1 = 0
*
END ELSE IF NUM(STEP.INP) THEN
IF STEP.INP > 0 AND STEP.INP < 50 AND LEN(STEP.REC<1,20,STEP.INP>) > 0  THEN
SPTM = STEP.REC<1,20,STEP.INP>
SUBR.FUNCTION<1> = "FORMAT"
STEP.CONT1 = 0
STEP.INP = "END"
END
*
END ELSE
ERROR.TEXT = "that was an invalid entry"
ERROR.CODE = "19011"
GOSUB ERROR.CONTROL
END
WHILE STEP.CONT1 DO REPEAT
*
RETURN
!
Sptm.desc.clear: * Clears lines with CLL
FOR TEMP = 1 TO 10
PRINT @(0,TEMP+6):CLL:
NEXT TEMP
*
RETURN
!
CHECK.CONTROL: * Subroutine to monitor user system functions.
*
*
LOOP
RELOOP = 0
IF SYS.CHECK.MESSG # 0 THEN
TEMP.LAST = SYS.CHECK.MESSG; TEMP.NELP = "S":VM:STRUCT(48)
GOSUB CHECK.ELP
CHECK.MESSG = TEMP.CK
END ELSE CHECK.MESSG = 1
*
IF SYS.CHECK.SCHED # 0 THEN
TEMP.LAST = SYS.CHECK.SCHED; TEMP.NELP = "S":VM:STRUCT(48)
GOSUB CHECK.ELP
CHECK.SCHED = TEMP.CK
END ELSE CHECK.SCHED = 1
*
IF CHECK.SCHED # 0 THEN
SYS.ITEM = "@SYS@USER@":STRUCT(2); SYS.FILE = "SYS"
READV CK.SCH FROM SY.FILE,SYS.ITEM,70 ELSE CK.SCH = 0; SYS.ABORT = 1
IF CK.SCH AND CK.SCH # PORT+1 THEN
ERROR.TEXT = "your SCHEDULE is in use at port ":PORT-1
ERROR.CODE = "17010"
GOSUB ERROR.CONTROL
SYS.CHECK.SCHED = (100000+DATE())[2,5]:(100000+TIME())[2,5]
END ELSE
IF NOT(SCH.FLAG) THEN
TEMP.LAST = STRUCT(65)
TEMP.NELP = STRUCT(63)
GOSUB CHECK.ELP
IF TEMP.CK = 1 THEN SCH.FLAG = 2 ELSE 
TEMP.LAST = STRUCT(68)
TEMP.NELP = STRUCT(66)
GOSUB CHECK.ELP
IF TEMP.CK = 1 THEN SCH.FLAG = 3 ELSE
TEMP.LAST = STRUCT(71)
TEMP.NELP = STRUCT(72)
GOSUB CHECK.ELP
IF TEMP.CK = 1 THEN SCH.FLAG = 4
END
END
END
*
IF SCH.FLAG THEN
TEMP = FIELD("POOP*LOAD*PURGE*VEIWING*TASK*","*",SCH.FLAG)
ERROR.TEXT = "your schedule needs a ":TEMP
IF TEMP = "VEIWING" THEN TEMP = "DAILY"; ERROR.CODE = "17110" ELSE ERROR.CODE = "17111"
GOSUB ERROR.CONTROL
IF INDEX(NO,"*":ERROR.RSP:"*",1) = 0 THEN
RSP = "SCHEDULE ":TEMP
GOSUB SCHEDULE.CALL
PRMPTING = ""
RSP = MENU.NAME
END ELSE
SYS.CHECK.SCHED = (100000+DATE())[2,5]:(100000+TIME())[2,5]
END
SCH.FLAG = 0
RELOOP = 1
END
END
END
!
IF NOT(RELOOP) THEN
IF CHECK.MESSG # 0 THEN
SYS.ITEM = "@SYS@USER@":STRUCT(2); SYS.FILE = "SYS"
READV CK.MSG FROM SY.FILE,SYS.ITEM,91 ELSE CK.MSG = 0; SYS.ABORT = 1
IF CK.MSG AND CK.MSG # PORT+1 THEN
ERROR.TEXT = "your MESSAGE is in use at port ":PORT-1
ERROR.CODE = "17010"
GOSUB ERROR.CONTROL
SYS.CHECK.MESSG = (100000+DATE())[2,5]:(100000+TIME())[2,5]
END ELSE
TEMP.PRIOR = 100
TEMP.USER = ""
TEMP.LOCN = 0
FOR TEMP = 1 TO 20 UNTIL STRUCT(86)<1,TEMP> = ""
IF STRUCT(87)<1,TEMP> < TEMP.PRIOR THEN
TEMP.PRIOR = STRUCT(87)<1,TEMP>
TEMP.USER = STRUCT(88)<1,TEMP>
TEMP.LOCN = TEMP
END
NEXT TEMP
IF TEMP.PRIOR # 100 THEN
ERROR.TEXT = "there is a priority ":TEMP.PRIOR:" message from ":TEMP.USER
ERROR.CODE = "17010"
GOSUB ERROR.CONTROL
IF TEMP.PRIOR <= STRUCT(84) THEN
ERROR.TEXT = "you will have to view it immediately"
ERROR.CODE = "17011"
GOSUB ERROR.CONTROL
MSG.FLAG = 1
END ELSE
IF STRUCT(83) # 0 THEN
TEMP.MSG = (100000+DATE())[2,5]:(100000+TIME())[2,5]
IF STRUCT(83) <= TEMP.MSG THEN
ERROR.TEXT = "you are now available to accept mail"
ERROR.CODE = "17111"
GOSUB ERROR.CONTROL
STRUCT(83) = 0
END ELSE
ERROR.TEXT = "you are not taking mail until ":OCONV(STRUCT(83)[6,5],"MT"):" on ":OCONV(STRUCT(83)[1,5],"D2")
ERROR.CODE = "17000"
GOSUB ERROR.CONTROL
END
END
IF STRUCT(83) = 0 THEN
PRINT @(0,21):CLS:@(0,23):"Do you want to see this message? ":
INPUT YES.NO:
IF INDEX(YES,"*":YES.NO:"*",1) # 0 THEN MSG.FLAG = 1
END
END
*
IF MSG.FLAG THEN
IF CHECK.TIME THEN CHECK.TIME = 9; GOSUB RECORD.TIME
USER.UPD(2) = 1
PRMPTING = "MESSAGE"
CALL.FUNCTION<1> = "MENU"
CALL.SUB.FUNTION = "UPDATE"
GOSUB RECORD.USER.CALL
EXECUTE "SYS.MESSAGE"
IF CHECK.TIME THEN CHECK.TIME = 9; GOSUB RECORD.TIME
CALL.FUNCTION<1> = "MENU"
CALL.SUB.FUNTION = "RESET"
GOSUB RECORD.USER.CALL
RSP = MENU.NAME
MSG.FLAG = 0
PRMPTING = ""
GOSUB RECORD.LOCATION
END
END
END
END
*
IF CO.DATA<2,1,1> # DATE() THEN
IF NOT(DATE() = CO.DATA<2,1,1>+1 AND TIME() < 10000) THEN
CALL SYS.CONTROL.DATE
RSP = MENU.NAME
END
END
END
*
WHILE RELOOP DO REPEAT
*
RETURN
!
CHECK.ELP: * Last date checked, # of elp units/type, ck flag.
*
TEMP.CK = 0
CALL SYS.CHECK.ELP(TEMP.LAST,TEMP.NELP,TEMP.CK)
TEMP.CK = TEMP.CK<1>
*
RETURN
!
SCHEDULE.CALL: * subroutine to call daily schedule
SYS.SLOC<1> = RSP
LOOP
LCK.STAT = 0
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 AND LCK.STAT < 9000 DO REPEAT
*
IF LCK.STAT = PORT+1 THEN
READV TEMP FROM SY.FILE,SYS.ITEM,70 ELSE TEMP = 0
STRUCT(70) = TEMP
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
*
IF TEMP # PORT+1 AND TEMP > 0 THEN
ERROR.TEXT = "you are using the scheduler on PORT ":STRUCT(70)-1
ERROR.CODE = "15110"
GOSUB ERROR.CONTROL
END ELSE
*
IF CHECK.TIME THEN CHECK.TIME = 9; GOSUB RECORD.TIME
USER.UPD(2) = 1
PRMPTING = SYS.SLOC<1>
CALL.FUNCTION<1> = "MENU"
CALL.SUB.FUNCTION<1> = "UPDATE"
GOSUB RECORD.USER.CALL
CALL.FUNCTION<1> = SYS.SLOC<1>
CALL.SUB.FUNCTION<1> = FIELD(RSP," ",2)
*
IF CALL.FUNCTION<1> = "SCHEDULE" OR SCH.FLAG < 10 THEN
IF CALL.SUB.FUNCTION<1> # "TASK" THEN
SUBR.FUNCTION<1> = ""
IF LEN(CALL.SUB.FUNCTION<1>) = 0 THEN CALL.SUB.FUNCTION<1> = "DAILY"
END ELSE
CALL.SUB.FUNCTION<1> = "TASK"
SUBR.FUNCTION<1> = FIELD(RSP," ",3)
IF NOT(NUM(SUBR.FUNCTION<1>)) THEN SUBR.FUNCTION<1> = ""
END
CALL SYS.SCHEDULE
*
END ELSE
*CALL SYS.STEP.STRUCT
PRINT @(0,23):CLS:@(0,22):"In SPTM structure program":
END
*
RSP = MENU.NAME
PRMPTING = ""
CALL.FUNCTION<1> = "MENU"
CALL.SUB.FUNCTION<1> = "UPDATE"
GOSUB RECORD.USER.CALL
PRMPTING = ""
END
RSP = MENU.NAME
END
RETURN
!
RECORD.USER.CALL: *Subroutine to update user info
*
SYS.SLOC<1> = "RECORD.USER.CALL"
IF CALL.FUNCTION<1> # "LOGON" AND CALL.FUNCTION<1> # "LOGOFF" AND CALL.FUNCTION<1> # "MENU" THEN CALL.FUNCTION<1> = "UNKNOWN"
IF CALL.SUB.FUNCTION<1> # "UPDATE" AND CALL.SUB.FUNCTION<1> # "READ" THEN
IF CALL.SUB.FUNCTION<1> # "WRITE" AND CALL.SUB.FUNCTION<1> # "RESET" THEN RETURN
END
LOOP
SYS.FILE = "SYS"
IF STRUCT(2) # "" THEN USER.NAME = STRUCT(2)
SYS.ITEM = "@SYS@USER@":USER.NAME
CALL SYS.USER.LOAD
WHILE (USER.LOCKED AND USER.LOCKED # PORT+1) AND NOT(USER.ABORT) DO REPEAT
RETURN
!
RECORD.LOCATION: * to record you menu location AND topics
USER.UPD(2) = 1
TEMP = (100000+DATE())[2,5]
TEMP = TEMP:(100000+TIME())[2,5]
IF TEMP > LAST.LOCT + (STRUCT(48) * 5) ! INDEX(SYS.RSP,"*":PRMPTING:"*",1) # 0 THEN
CALL.FUNCTION<1> = "MENU"
CALL.SUB.FUNCTION<1> = "UPDATE"
GOSUB RECORD.USER.CALL
LAST.LOCT = TEMP
END ELSE
STRUCT(29)<1,PORT + 1> = USER.CO.CODE
STRUCT(30)<1,PORT + 1> = MENU.APPL:SVM:MENU.SUB.APPL:SVM:MENU.GRP.APPL
STRUCT(31)<1,PORT + 1> = MENU.CONTROL<1,7>
STRUCT(32)<1,PORT + 1> = MENU.NAME
STRUCT(33)<1,PORT + 1> = PRMPTING
STRUCT(34)<1,PORT + 1> = TOPIC.KEY
STRUCT(35)<1,PORT + 1> = MENU.CONTROL<1,9>
END
RETURN
!
RECORD.TIME: * to record time usage
*
IF CHECK.TIME THEN
CHECK.TIME = 9
CALL SYS.TIME
END
*
RETURN
!
CHECK.USER.RESET: * subroutine to check if a reset is required
*
SYS.FILE = "SYS"
SYS.ITEM = "@SYS@USER@":STRUCT(2)
READV TEMP FROM SY.FILE,SYS.ITEM,21 THEN
*
IF TEMP<1,PORT+1> = 0 THEN
TEMP<1,PORT+1> = 1
WRITEV TEMP ON SY.FILE,SYS.ITEM,21
END
*
STRUCT(21) = TEMP
END ELSE TEMP = ""
IF LEN(TEMP) = 0 ! STRUCT(21)<1,PORT+1> = 2 THEN
CALL.FUNCTION<1> = "MENU"
CALL.SUB.FUNCTION<1> = "RESET"
GOSUB RECORD.USER.CALL
RSP = MENU.NAME
END
*
*
RETURN
!
$INCLUDE IBP SYS.ERROR.STRUCT
*
*
END
~SYS.STEP.ESTIMATE~
SUBROUTINE SYS.STEP.ESTIMATE(STEP.REC,S.CL,S.LN)
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
DIM MODE.DESC(30), STAT.DESC(15)
*
$INCLUDE IBP SYS.INCL.USER.MODE.DESC
$INCLUDE IBP SYS.INCL.STATUS.CHECK
$INCLUDE IBP SYS.INCL.STATUS.DESC
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.SALES.MODE
$INCLUDE IBP SYS.INCL.LO.TCL.MODE
$INCLUDE IBP SYS.INCL.LO.TRAIN.MODE
$INCLUDE IBP SYS.INCL.HI.TRAIN.MODE
*
SYS.PROG = "SYS.STEP.ESTIMATE":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "VAR":AM:SYS.SLOC
*
IF NOT(NUM(S.CL)) OR NOT(NUM(S.LN)) THEN S.CL = 0; S.LN = 16
STEP.FIRST = 1
OPT.LINE = "(T)ype, (S), (U), (D)ue, (P)riority, (L)ag,"
OPT.LINE1 = "  (E)stimating, Status (C)hange, (END) or <CR>:"
*
Prog.restart: *
RSP = ""
STEP.INP = "DESCNP"
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
CALL.FUNCTION = "MENU"
PRINT @(0,S.LN):CLS:
STEP.RED = 1
*
LOOP
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "CALLS"
IF CALL.FUNCTION = "MENU" THEN
IF STEP.RED THEN GOSUB Sptm.est.BG; STEP.RED = ""
GOSUB Sptm.est.disp
GOSUB Sptm.est.entry
RSP = ""
END ELSE STEP.INP = "END"
RSP = ""
*
WHILE CALL.FUNCTION = "MENU" AND STEP.INP # "END" DO REPEAT
*
SYS.LOCT<1> = "END"
SYS.SLOC<1> = ""
SYS.FILE = ""
!
End.of.prog: *
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
RETURN
*
Sptm.est.BG: * Subroutine to display background.
*
PRINT @(S.CL,S.LN+0):CLL:"Item Type ................ Mod . s............ u............ Priority ..":
PRINT @(S.CL,S.LN+1):CLL:"Status_History___________   Estimating_and_Actual___________":
PRINT @(S.CL,S.LN+2):CLL:" . mm.dd.yy  ............   a.... ... mm.dd.yy    Compl% ... Due mm.dd.yy   ":
PRINT @(S.CL,S.LN+3):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Lag .... ... ":
PRINT @(S.CL,S.LN+4):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ EDC mm.dd.yy ":
PRINT @(S.CL,S.LN+5):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Upd mm.dd.yy ":
RETURN
*          1         2         3         4         5         6         7
*01234567890123456789012345678901234567890123456789012345678901234567890
*Item type ................ Mod . s............ u............ Priority ..
*Status_History___________   Estimating_and_Actual___________
* . mm.dd.yy  ............   a.... ... mm.dd.yy    Compl% ... Due mm.dd.yy 
* . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Lag .... ... 
* . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ EDC mm.dd.yy 
* . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Upd mm.dd.yy 
!
Sptm.est.disp: * Subroutine to display fields
PRINT @(S.CL+10,S.LN+0):
IF STEP.REC<1,5> # "" THEN PRINT STEP.REC<1,5>:
IF STEP.REC<1,14,6> # "" THEN PRINT @(S.CL+31):STEP.REC<1,14,6>:
IF STEP.REC<1,9> # "" THEN PRINT @(S.CL+33):RVB:"s":RVE:STEP.REC<1,9>:
IF STEP.REC<1,15> # "" THEN PRINT @(S.CL+47):RVB:"u":RVE:STEP.REC<1,15>:
IF STEP.REC<1,8> # "" THEN PRINT @(S.CL+70):STEP.REC<1,8>:
CN = 1
CONT = 1
LOOP
IF STEP.REC<1,10,CN> = "" THEN CONT = "" ELSE
S.LN1 = CN - (INT((CN-1) / 4) * 4)
IF S.LN1 - 1 = 0 AND CN # 1 THEN
PRINT @(0,22):CLS:'Enter "N" for next or <CR> to end. . .':
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RSP = "" ELSE
INPUT RSP,1:
END
IF RSP # "N" THEN CONT = "" ELSE GOSUB Sptm.est.status.clr
END
IF CONT THEN
PRINT @(S.CL+1,S.LN+S.LN1+1):FIELD(STEP.REC<1,10,CN>,"*",1) "L#1":@(S.CL+3):OCONV(FIELD(STEP.REC<1,10,CN>,"*",3),"D2/") "L#9":
PRINT @(S.CL+13):FIELD(STEP.REC<1,10,CN>,"*",5):
CN = CN + 1
END
END
WHILE CONT DO REPEAT
PRINT @(S.CL+29,S.LN+2):
IF FIELD(STEP.REC<1,13,1>,"*",2) > 0 THEN PRINT FIELD(STEP.REC<1,13,1>,"*",2) "R#4":@(S.CL+34):FIELD(STEP.REC<1,13,1>,"*",1) "L#4":
IF FIELD(STEP.REC<1,13,1>,"*",3) > 0 THEN PRINT OCONV(FIELD(STEP.REC<1,13,1>,"*",3),"D2/") "L#9":
IF STEP.REC<1,14,4> > 0 THEN PRINT @(S.CL+57):STEP.REC<1,14,4> "R#3":
IF STEP.REC<1,7,1> > 0 THEN PRINT @(S.CL+65):OCONV(STEP.REC<1,7,1>,"D2/") "L#9":
*
CN = 1
CONT = 1
LOOP
IF STEP.REC<1,11,CN> = "" THEN CONT = "" ELSE
S.LN1 = CN - (INT((CN-1) / 3) * 3)
IF S.LN1 - 1 = 0 AND CN # 1 THEN
PRINT @(0,22):CLS:'Enter "N" for next or <CR> to end. . .':
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RSP = "" ELSE
INPUT RSP,1:
END
IF RSP # "N" THEN CONT = "" ELSE GOSUB Sptm.est.estimate.clr
END
IF CONT THEN
PRINT @(S.CL+29,S.LN+S.LN1+2):
PRINT FIELD(STEP.REC<1,11,CN>,"*",2) "R#4":" ":FIELD(STEP.REC<1,11,CN>,"*",1) "L#3":" ":OCONV(FIELD(STEP.REC<1,11,CN>,"*",3),"D2/") "L#10":FIELD(STEP.REC<1,11,CN>,"*",5):
CN = CN + 1
END
END
WHILE CONT DO REPEAT
*
PRINT @(S.CL+65,S.LN+3):
IF STEP.REC<1,14,2> > 0 THEN PRINT STEP.REC<1,14,2> "R#4":@(S.CL+70):STEP.REC<1,14,1> "L#3":
IF STEP.REC<1,14,3> > 0 THEN PRINT @(S.CL+65,S.LN+4):OCONV(STEP.REC<1,14,3>,"D2/") "L#9":
IF STEP.REC<1,14,5> > 0 THEN PRINT @(S.CL+65,S.LN+5):OCONV(STEP.REC<1,14,5>,"D2/") "L#9":
RETURN
!
Sptm.est.entry: * Subroutine to allow maintenance of estimating.
CONT = 1
VALID = ""
FOUND = ""
LOOP
PRINT @(0,22):CLS:RVB:OPT.LINE:@(0,23):OPT.LINE1:RVE:" ":
INPUT STEP.INP:
IF STEP.INP = "" THEN
STEP.RED = 1
END ELSE
STEP.RED = 0
IF INDEX("*T*S*U*D*P*L*E*C*END*","*":STEP.INP:"*",1) = 0 THEN
ERROR.TEXT = "your entry was invalid"
ERROR.CODE = "19000"
GOSUB ERROR.CONTROL
END
END
VALID = 1
*
BEGIN CASE
CASE STEP.INP = "END" OR STEP.RED
CONT = 0
*
CASE STEP.INP = "T"
PRINT @(S.CL+10,S.LN+0):
INPUT RSP1,16:
TEMP.KEY = "@SYS@SPTM@TYPE@":RSP1
SYS.ITEM = TEMP.KEY
SYS.FILE = "SYS"
FOUND = 1
READV TEMP FROM SY.FILE,SYS.ITEM,1 ELSE FOUND = 0
IF NOT(FOUND) THEN
ERROR.TEXT = "Not on file"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID = 0
CONT = 0
END ELSE
STEP.REC<1,5> = RSP1
END
*
CASE STEP.INP = "S" OR STEP.INP =  "U"
IF STEP.INP = "U" THEN TEMP = 14 ELSE TEMP = 0
PRINT @(S.CL+34+TEMP,S.LN+0):
INPUT RSP1,12:
TEMP.KEY = "@SYS@USER@":RSP1
SYS.ITEM = TEMP.KEY
SYS.FILE = "SYS"
FOUND = 1
READV TEMP FROM SY.FILE,SYS.ITEM,1 ELSE FOUND = 0
IF NOT(FOUND) THEN
EXECUTE "SYS.UL"
VALID = 0
STEP.RED = 1
CONT = 0
END ELSE
IF STEP.INP = "U" THEN STEP.REC<1,15> = RSP1[1,12] ELSE STEP.REC<1,9> = RSP1[1,12]
END
*
CASE STEP.INP = "P"
PRINT @(S.CL+70,S.LN+0):
INPUT RSP1,2:
STEP.REC<1,8> = RSP1[1,2]
*
CASE STEP.INP = "D"
PRINT @(S.CL+65,S.LN+2):
INPUT RSP1,9:
IF RSP1 = "" THEN RSP1 = OCONV(STEP.REC<1,7,1>,"D2/")
IF ICONV(RSP1,"D") = 0 THEN VALID = 0
IF VALID THEN STEP.REC<1,7,1> = RSP1
IF STEP.REC<1,7,1> > 0 THEN PRINT @(S.CL+65,S.LN+2):OCONV(STEP.REC<1,7,1>,"D2/"):
*
CASE STEP.INP = "L"
LOOP
PRINT @(S.CL+65,S.LN+3):
INPUT RSP1,4:
IF RSP1 = "" THEN RSP1 = STEP.REC<1,14,2>
WHILE NOT(NUM(RSP1)) DO
VALID = 0
ERROR.TEXT = "you are entering how many units":AM:"enter a number here"
ERROR.CODE = "19010":AM:"19000"
GOSUB ERROR.CONTROL
REPEAT
STEP.REC<1,14,2> = RSP1
VALID = 1
LOOP
PRINT @(S.CL+70,S.LN+3):
INPUT RSP2,3:
IF RSP2 = "" THEN RSP2 = STEP.REC<1,14,1>
TEMP1 = "SMHDWMY"
IF INDEX(TEMP1,RSP2[1,1],1) = 0 THEN
VALID = 0
END ELSE
VALID = 1
STEP.REC<1,14,1> = RSP2
END
WHILE NOT(VALID) DO
ERROR.TEXT = "your choice must start with on of these leters (":TEMP1:")"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
REPEAT
STEP.RED = 1
CONT = 0
*
CASE STEP.INP = "E"
GOSUB Sptm.est.estimate.clr
LOOP
PRINT @(S.CL+29,S.LN+3):
RSP1 = ""
INPUT RSP1,4:
VALID = 1
IF RSP1 =  "" THEN RSP1 = "END"
IF RSP1 = "END" THEN
STEP.RED = 1
END ELSE
IF NOT(NUM(RSP1)) THEN VALID = 0; RSP1 = 0
IF NOT(VALID) OR RSP1 = FIELD(STEP.REC<1,11,1>,"*",2) THEN
ERROR.TEXT = "you must enter a new estimate (number) here"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID = 0
END ELSE
LOOP
VALID1 = 1
PRINT @(S.CL+34,S.LN+3):
RSP2 =  ""
INPUT RSP2,3:
IF RSP2 = "" THEN RSP2 = FIELD(STEP.REC<1,11,1>,"*",1)
TEMP1 = "SMHDWMY"
IF INDEX(TEMP1,RSP2[1,1],1) = 0 THEN
VALID = 0
END ELSE
VALID = 1
END
WHILE NOT(VALID) DO
ERROR.TEXT = "your choice must start with on of these leters (":TEMP1:")"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
REPEAT
*
LOOP
RSP3 = ""
PRINT @(S.CL+38,S.LN+3):
INPUT RSP3,9:
IF RSP3 = "" THEN RSP3 = OCONV(DATE(),"D2/"); RSP4 = TIME() ELSE RSP4 = 0
IF ICONV(RSP3,"D") = 0 THEN
ERROR.TEXT = "invalid date format"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID1 = 0
END
WHILE NOT(VALID1) DO REPEAT
IF VALID1 THEN
STEP.REC<1,11> = RSP2:"*":RSP1:"*":RSP3:"*":RSP4:"*":STRUCT(2):SVM:STEP.REC<1,11>
END
END
END
WHILE NOT(VALID) AND NOT(STEP.RED) DO REPEAT
STEP.RED = 1
CONT = 0
*
CASE STEP.INP = "C"
GOSUB Sptm.est.status.clr
LOOP
PRINT @(S.CL+1,S.LN+2):
RSP1 = ""
INPUT RSP1,1:
VALID = 1
IF RSP1 =  "" THEN RSP1 = "END"
IF RSP1 = "END" THEN
STEP.RED = 1
END ELSE
IF INDEX(STAT.CHECK,"*":RSP1:"*",1) = 0 OR RSP1 = FIELD(STEP.REC<1,10,1>,"*",1) THEN
ERROR.TEXT = "that was an invalid status or the same status"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID = 0
END ELSE
LOOP
VALID1 = 1
PRINT @(S.CL+3,S.LN+2):
RSP2 =  ""
INPUT RSP2,9:
IF RSP2 = "" THEN RSP2 = OCONV(DATE(),"D2/"); RSP3 = TIME() ELSE RSP3 = 0
IF ICONV(RSP2,"D") = 0 THEN
ERROR.TEXT = "invalid date format"
ERROR.CODE = "19010"
GOSUB ERROR.CONTROL
VALID1 = 0
END
WHILE NOT(VALID1) DO REPEAT
IF VALID1 THEN
ERROR.TEXT = "enter any comments you have: "
ERROR.CODE = "19002"
GOSUB ERROR.CONTROL
RSP4 = ERROR.RSP
STEP.REC<1,10> = RSP1:"*":RSP4:"*":RSP2:"*":RSP3:"*":STRUCT(2):SVM:STEP.REC<1,10>
END
END
END
WHILE NOT(VALID) AND NOT(STEP.RED) DO REPEAT
STEP.RED = 1
CONT = 0
*
CASE 0
PRINT "?":BELL
RQM; RQM
END CASE
WHILE CONT DO REPEAT
*
RETURN
!
Sptm.est.clr: * Subroutine to clear foreground.
*
PRINT @(S.CL+10,S.LN+0)STR(".",14):@(S.CL+31):".":@(S.CL+34):STR(".",12):@(S.CL+48):STR(".",12):@(S.CL+65):"mm.dd.yy ":
PRINT @(S.CL,S.LN+2):CLL:" . mm.dd.yy  ............   a.... ... mm.dd.yy    Compl% ... Due mm.dd.yy ":
PRINT @(S.CL,S.LN+3):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ Lag .... ...":
PRINT @(S.CL,S.LN+4):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............ EDC mm.dd.yy ":
PRINT @(S.CL,S.LN+5):CLL:" . mm.dd.yy  ............   e.... ... mm.dd.yy  ............              ":
RETURN
!
Sptm.est.status.clr: * Subroutine to clear status lines
*
PRINT @(S.CL,S.LN+2):" . mm.dd.yy  ............":
PRINT @(S.CL,S.LN+3):" . mm.dd.yy  ............":
PRINT @(S.CL,S.LN+4):" . mm.dd.yy  ............":
PRINT @(S.CL,S.LN+5):" . mm.dd.yy  ............":
RETURN
!
Sptm.est.estimate.clr: * Subroutine to clear estamating lines
PRINT @(S.CL+28,S.LN+3):"e.... ... mm.dd.yy  ............":
PRINT @(S.CL+28,S.LN+4):"e.... ... mm.dd.yy  ............":
PRINT @(S.CL+28,S.LN+5):"e.... ... mm.dd.yy  ............":
RETURN
*
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.TASK~
SUBROUTINE SYS.TASK
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
*
SYS.PROG = "SYS.TASK":AM:SYS.PROG
SYS.PROG.TYPE = 9
EQ.PROG.STATUS = TRUE
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
*
DEBUG
*
*
PRINT @(0,0):RVB:OCONV(DATE(),"D2"):"  ":OCONV(TIME(),"MTS"):RVE:
PRINT PRMPTING
*@@@
*INPUT RSP:
!
IF PRMPTING[1,4] EQ "SYS." OR PRMPTING[1,4] EQ "SYS " THEN PRMPTING = PRMPTING[5,999]
IF PRMPTING[1,4] = "TASK" THEN
SYS.SLOC<1> = PRMPTING[1,4]
TEMP.TASK = FIELD(PRMPTING," ",2)
IF TEMP.TASK EQ '' THEN TEMP.TASK = 999
IF NOT(NUM(TEMP.TASK)) THEN TEMP.TASK = 999
H.T = 1
IF TEMP.TASK EQ 999 THEN
*@@@@@vv
*
SUBR.FUNCTION = 999:AM:SUBR.FUNCTION
SUBR.SUB.FUNCTION = H.T:AM:SUBR.SUB.FUNCTION
CALL SYS.SCHED.HTROUTINE
PRINT SUBR.FUNCTION
PRINT SUBR.SUB.FUNCTION
P.ENT = SUBR.FUNCTION
*H.T = SUBR.SUB.FUNCTION
TEMP.TASK = SUBR.SUB.FUNCTION<1>
SUBR.FUNCTION = DELETE(SUBR.FUNCTION,1)
SUBR.SUB.FUNCTION = DELETE(SUBR.SUB.FUNCTION,1)
PRINTER CLOSE
*@@@@@^^
PRINT SUBR.FUNCTION
PRINT SUBR.SUB.FUNCTION
*IF SUBR.FUNCTION<1> = 999 THEN
*TEMP.TASK = SUBR.SUB.FUNCTION<1>
H.T = TEMP.TASK
TEMP.STEP = 1
*END
END ELSE
*
TEMP.STEP = FIELD(PRMPTING," ",3)
END
IF LEN(TEMP.TASK) = 0 THEN TEMP.TASK = 0
IF TEMP.TASK = "*" THEN TEMP.TASK = TASK.NUM
IF LEN(TEMP.STEP) = 0 THEN TEMP.STEP = 1
IF NOT(NUM(TEMP.TASK)) THEN TEMP.TASK = TASK.NUM
IF NOT(NUM(TEMP.STEP)) THEN TEMP.STEP = 1
IF TEMP.STEP < 1 THEN TEMP.STEP = 1
TEMP.TASK = STR("0",(5 - LEN(TEMP.TASK))):TEMP.TASK
READV TEMP.REC FROM PS.FILE,"@J@":CO.DATA<3>:"@":TEMP.TASK,TEMP.STEP + 20 ELSE
TEMP.REC = ""
ERROR.TEXT = "the new task ":TEMP.TASK:", or that step is not on file"
ERROR.CODE = "17111"
GOSUB ERROR.CONTROL
END
IF CHECK.TIME THEN CHECK.TIME = 9; GOSUB RECORD.TIME
TASK.NUM = TEMP.TASK
STRUCT(61)<1,PORT+1> = TASK.NUM
TASK.STEP = TEMP.STEP
STRUCT(69)<1,PORT+1> = TASK.STEP
*
GOSUB COMPLETION.LOAD
*
IF TEMP.REC NE "" THEN STRUCT(62)<1,PORT+1> = TEMP.REC<1,2>
USER.UPD(4) = 1
TEMP.REC = ""
PRMPTING = ""
*#EXEC.VERB = MENU.NAME
EXEC.VERB = ""
!
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
END
*
RETURN
*
*
!
COMPLETION.LOAD: *#* Load completion status for user.
IF MENU.CONTROL<1,8>[1,1] = "P" AND TASK.NUM NE 0 THEN
USER.KEY = "@C@":CO.DATA<3>:"@":TASK.NUM:"@":MENU.APPL
SYS.FILE = "PSD"
SYS.ITEM = USER.KEY
READV USER.COMPL FROM PS.FILE,USER.KEY,TASK.STEP + 1 ELSE
USER.COMPL = ""
ERROR.TEXT = "this procedure is not included with this step!"
ERROR.CODE = "15010"
GOSUB ERROR.CONTROL
END
END ELSE
USER.COMPL = ""
END
RETURN
!
RECORD.TIME: * to record time usage
IF CHECK.TIME THEN
CALL SYS.TIME
END
*
RETURN
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.TASK.CHANGE~
SUBROUTINE SYS.TASK.CHANGE
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
*
*
SYS.PROG = "SYS.TASK.CHANGE":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
*
*
PRINT @(0,0):RVB:OCONV(DATE(),"D2"):"  ":OCONV(TIME(),"MTS"):RVE:
!
IF PRMPTING[1,4] = "TASK" THEN
SYS.SLOC<1> = PRMPTING[1,4]
TEMP.TASK = FIELD(PRMPTING," ",2)
TEMP.STEP = FIELD(PRMPTING," ",3)
IF LEN(TEMP.TASK) = 0 THEN TEMP.TASK = 0
IF TEMP.TASK = "*" THEN TEMP.TASK = TASK.NUM
IF LEN(TEMP.STEP) = 0 THEN TEMP.STEP = 1
IF NOT(NUM(TEMP.TASK)) THEN TEMP.TASK = TASK.NUM
IF NOT(NUM(TEMP.STEP)) THEN TEMP.STEP = 1
IF TEMP.STEP < 1 THEN TEMP.STEP = 1
TEMP.TASK = STR("0",(5 - LEN(TEMP.TASK))):TEMP.TASK
READV TEMP.REC FROM PS.FILE,"@J@":CO.DATA<3>:"@":TEMP.TASK,TEMP.STEP + 20 THEN
IF CHECK.TIME THEN CHECK.TIME = 9; GOSUB RECORD.TIME
TASK.NUM = TEMP.TASK
STRUCT(61)<1,PORT+1> = TASK.NUM
TASK.STEP = TEMP.STEP
STRUCT(69)<1,PORT+1> = TASK.STEP
*
GOSUB COMPLETION.LOAD
*
STRUCT(62)<1,PORT+1> = TEMP.REC<1,2>
TEMP.REC = ""
USER.UPD(4) = 1
END ELSE
ERROR.TEXT = "the task ":TEMP.TASK:", or that step is not on file"
ERROR.CODE = "17111"
GOSUB ERROR.CONTROL
END
PRMPTING = ""
EXEC.VERB = MENU.NAME
!
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
*
RETURN
*
*
!
COMPLETION.LOAD: *#* Load completion status for user.
IF MENU.CONTROL<1,8>[1,1] = "P" & TASK.NUM # 0 THEN
USER.KEY = "@C@":CO.DATA<3>:"@":TASK.NUM:"@":MENU.APPL
SYS.FILE = "PSD"
SYS.ITEM = USER.KEY
READV USER.COMPL FROM PS.FILE,USER.KEY,TASK.STEP + 1 ELSE
USER.COMPL = ""
ERROR.TEXT = "this procedure is not included with this step!"
ERROR.CODE = "15010"
GOSUB ERROR.CONTROL
END
END ELSE
USER.COMPL = ""
END
RETURN
!
RECORD.TIME: * to record time usage
IF CHECK.TIME THEN
CALL SYS.TIME
END
*
RETURN
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.TASK.RECENT~
SUBROUTINE SYS.TASK.RECENT
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.SYS.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP.SYNONYM
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.DEB.RSP
$INCLUDE IBP SYS.INCL.MENU.RSP
*
*
CLS.LO = 5
CLS.HI = 20
MENU.TYPE = "P"
TASK.CL = 0
TASK.LN = 5
TASK.RSP = 'INIT'
ERROR.RSP = 'INIT'
*
*
IF INDEX(SYS.PROG,"SYS.TASK.RECENT",1) # 0 THEN RETURN
*
SYS.PROG = "SYS.TASK.RECENT":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
*
SYS.FILE = "SYS"
SYS.ITEM = "@TASK@USER@":CO.DATA<3>:"@":STRUCT(2):"@RECENT"
READ TASK.RECENT.REC FROM SY.FILE,SYS.ITEM ELSE TASK.RECENT.REC = ""
*
*
!
RECENT.TASK: * recently used task numbers
*#SYS.FILE = "PSD"; SYS.ITEM = PSD.KEY:"@":TIME.TEMP:"@":TEMP.KEY
*#WRITEV PSD.REC ON PS.FILE,SYS.ITEM,STRUCT(69)<1,PORT+1> + 1
*#PSD.REC = ""
*
*#
LOOP
*# FOR END OF PROGRAM OR TASK.SELECTED AND FOUND
LOOP
*# FOR TASK.RSP SELECTION  NUM
SYS.SLOC<1> = "RECENT.TASK"
*#SYS.FILE = "SYS"
*#SYS.ITEM = "@SYS@USER@":CO.DATA<3>:"@":STRUCT(2):"@RECENT.TASK"
*#READ TASK.RECENT.REC FROM SY.FILE,SYS.ITEM ELSE TASK.RECENT.REC = ""
IF TASK.RECENT.REC NE "" THEN
PRINT @(TASK.CL,TASK.LN):RVB:"|..recently.used.tasks..|" "L#25":RVE
PRINT @(TASK.CL,TASK.LN+1):RVB:"!":RVE:SPACE(23):RVB:"|":RVE:
LOOP
TASK.MAX = DCOUNT(TASK.RECENT.REC<1>,VM)
WHILE TASK.MAX > 14 DO
TASK.RECENT.REC<1> = DELETE(TASK.RECENT.REC<1>,1,TASK.MAX,0)
TASK.RECENT.REC<2> = DELETE(TASK.RECENT.REC<2>,1,TASK.MAX,0)
REPEAT
TASK.CN = 0
LOOP
*# LOOP FOR PRINT RECENT TASKS
TASK.CN = TASK.CN + 1
TASK.NUM.DESC = TASK.RECENT.REC<1,TASK.CN>
TASK.STEP.DESC = TASK.RECENT.REC<2,TASK.CN>
WHILE TASK.CN LE TASK.MAX AND NOT(SYSTEM(11)) DO
PRINT @(TASK.CL,TASK.LN+1+TASK.CN):RVB:"|":TASK.CN "R#4":RVE:" - ":(TASK.NUM.DESC:"-":TASK.STEP.DESC) "L#15":" ":RVB:"|":RVE:
REPEAT
PRINT @(TASK.CL,TASK.LN+1+TASK.CN):RVB:STR("-",25):RVE:
*
END; *# OF TASK.RECENT.REC NE ''
*
LOOP
*# LOOP FOR TASK.RSP 'END'
ERROR.TEXT = "Enter the number of your selection: "
ERROR.CODE = "1910221"
GOSUB ERROR.CONTROL
TASK.RSP = ERROR.RSP
WHILE TASK.RSP = "" AND NOT(INDEX(END.RSP,"*":TASK.RSP:"*",1)) DO REPEAT
TEMP = ''
IF NUM(TASK.RSP) THEN
IF TASK.RSP > TASK.MAX THEN TEMP = 999
END ELSE TEMP = 999
WHILE TEMP AND NOT(INDEX(END.RSP,"*":TASK.RSP:"*",1)) DO REPEAT
*
*
*#
*#
IF TASK.RSP NE '' AND NUM(TASK.RSP) THEN
IF TASK.RSP LE TASK.MAX THEN
TASK.NUM = TASK.RECENT.REC<1,TASK.RSP>
TASK.STEP = TASK.RECENT.REC<2,TASK.RSP>
LOC = 0
FOUND = 1
LOCATE TASK.NUM IN TASK.RECENT.REC<1> BY "AL" SETTING LOC ELSE FOUND = 0
IF NOT(FOUND) THEN LOC = 10
TASK.RECENT.REC<1> = DELETE(TASK.RECENT.REC<1>,1,LOC)
TASK.RECENT.REC<2> = DELETE(TASK.RECENT.REC<2>,1,LOC)
TASK.RECENT.REC<1> = TASK.NUM:VM:TASK.RECENT.REC<1>
TASK.RECENT.REC<2> = TASK.STEP:VM:TASK.RECENT.REC<2>
WRITE TASK.RECENT.REC ON SY.FILE,SYS.ITEM
END; *# OF LE TASK.MAX
END; *# OF NUM(TASK.RSP)
IF FOUND THEN TASK.RSP = "END"
WHILE NOT(INDEX(END.RSP,"*":TASK.RSP:"*",1)) DO REPEAT
*
!
*
SYS.PROG = DELETE(SYS.PROG,1,0,0)
SYS.LOCT = DELETE(SYS.LOCT,1,0,0)
SYS.SLOC = DELETE(SYS.SLOC,1,0,0)
*
*
RETURN; *# To CALLing program
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
*
END
~SYS.TIME~
SUBROUTINE SYS.TIME
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.CPORT
*
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.END.RSP
*
$INCLUDE IBP SYS.INCL.SYS.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP.SYNONYM
*
EQ.PROG.TYPE = 7
EQ.PROG.STATUS = TRUE
CLS.LO = 8
CLS.HI = 20
MENU.TYPE = "P"
*
*
IF INDEX(SYS.PROG,"SYS.TIME",1) THEN RETURN
*
SYS.PROG = "SYS.TIME":AM:SYS.PROG
SYS.PROG.TYPE = 9
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
*
!
RECORD.TIME: * to record time usage
*
* TIME RECORDING IS BY
*
* USER  ,   TASK    ,    SYS.RSP  or APPLICATION
*     ATTRIBUTE = STEP + 1
*     MULTI-VALUES -  1 = OLD.DATE*OLD.TIME*USER.NAME     (sorted)
*                     2 = TIME RECORDS             (linked to 1)
*                     3 = COMMENTS                 (linked to 1)
IF CHECK.TIME THEN
SYS.SLOC<1> = "DATES"
NEW.DATE = DATE()
NEW.TIME = TIME()
OLD.DATE = STRUCT(43)<1,PORT+1>[1,5]
OLD.TIME = STRUCT(43)<1,PORT+1>[6,5]
*
IF NEW.DATE NE OLD.DATE THEN
ELP.TIME = 86400 - OLD.TIME + NEW.TIME
END ELSE
ELP.TIME = NEW.TIME - OLD.TIME
END
RECORD.TIME.FLAG = 0
*
*
SYS.LOCT<1> = "RECORD"
SYS.SLOC<1> = "RSP"
SYES.NO = ""
IF ELP.TIME LT STRUCT(48) * 10 AND CHECK.TIME NE 3 THEN 
IF ELP.TIME GT STRUCT(48) THEN
PRINT @(0,22):CLL:RVB:" * * ":USER.NAME:", WE ARE IN THE TIME BILLING, DO NOT GET CONFUSED * * ":RVE
FOR A = 1 TO WAIT.FLAG UNTIL SYSTEM(11); RQM; NEXT A
IF CHECK.TIME NE 9 AND CHECK.TIME NE 8 OR STRUCT(27)<1,PORT+1> LT 11 THEN
PRINT @(0,22):CLL:RVB:"[=| ":RVE:USER.NAME:", should the elpased time of ":OCONV(ELP.TIME,"MTS"):" be recorded now? ":
IF CHECK.TIME = 2 THEN SYES.NO = "Y"; PRINT SYES.NO: ELSE
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
FOR TEMP = 1 TO WAIT.FLAG UNTIL SYSTEM(11)
RQM
NEXT TEMP
IF SYSTEM(11) THEN
INPUT SYES.NO,1:
END ELSE SYES.NO = "N"
END
IF SYES.NO = "S" THEN YES.NO = "Y" ELSE YES.NO = SYES.NO
IF INDEX(YES,"*":YES.NO:"*",1) THEN RECORD.TIME.FLAG = 1
END ELSE RECORD.TIME.FLAG = 1
END
END ELSE RECORD.TIME.FLAG = 1
*
IF RECORD.TIME.FLAG OR CHECK.TIME = 3 THEN
USER.UPD(20) = 1
SYS.LOCT<1> = "BILL"
SYS.SLOC<1> = "FORMAT"
ANSW = 0
TIME.KEY = OLD.DATE:"*":OLD.TIME:"*":STRUCT(2):"*":PORT+1
TIME.SVM = ELP.TIME:"*":STRUCT(32)<1,PORT+1>:"*":STRUCT(33)<1,PORT+1>:"*":STRUCT(34)<1,PORT+1>
SAME.TASK = -1
SAME.TEXT = "current"
*
LOOP
SYS.LOCT<1> = "BILL"
SYS.SLOC<1> = "RSP"
TIME.RSP = ""
*
$INCLUDE IBP SYS.INCL.STEP.DISPLAY.ELP
*
IF CHECK.TIME NE 3 AND SAME.TASK LT 0 THEN
PRINT @(0,21):CLL:RVB:"[=| ":RVE:"Bill this time against the ":SAME.TEXT:" task? ":
IF CHECK.TIME = 2 OR CHECK.TIME = 8 OR SYES.NO = "S" OR STRUCT(27)<1,PORT+1> LT 11 THEN
SAME.TASK = 1; PRINT "Y":
END ELSE
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM; PRINT BELL:
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
IF SYSTEM(11) THEN
INPUT YES.NO:
IF INDEX(YES,"*":YES.NO:"*",1) THEN
SAME.TASK = 1
END ELSE IF INDEX(NO,"*":YES.NO:"*",1) THEN
SAME.TASK = 0
END ELSE SAME.TASK = -1
END ELSE SAME.TASK = 1
END
END ELSE SAME.TASK = 0
*
ANSW = 1
*
IF NOT(SAME.TASK LT 0) THEN
SYS.LOCT<1> = "XREF"
SYS.SLOC<1> = "APPL"
IF INDEX(SYS.RSP,"*":STRUCT(33)<1,PORT+1>:"*",1) THEN
TIME.TEMP = STRUCT(33)<1,PORT+1>
END ELSE
TIME.TEMP = STRUCT(30)<1,PORT+1,1>
END
*
PSD.KEY = "@B@":CO.DATA<4>:"@":STRUCT(61)<1,PORT+1>
SYS.ITEM = PSD.KEY:"@XREF"
SYS.FILE = "PSD"
READ PSD.APPL.XREF FROM PS.FILE,SYS.ITEM ELSE PSD.APPL.XREF = ""
LOC = 0
APPL.FOUND = 1
LOCATE STRUCT(30)<1,PORT+1,1> IN PSD.APPL.XREF<1> BY "AL" SETTING LOC ELSE APPL.FOUND = 0
APPL.LOC = LOC+1
IF NOT(APPL.FOUND) AND CHECK.TIME NE 3 THEN
PSD.APPL.XREF<1> = INSERT(PSD.APPL.XREF<1>,1,LOC;STRUCT(30)<1,PORT+1,1>)
*WRITE PSD.APPL.XREF ON PS.FILE,SYS.ITEM
ERROR.TEXT = "Application added to cross-reference (":STRUCT(30)<1,PORT+1,1>:")"
ERROR.CODE = "190002100"
GOSUB ERROR.CONTROL
END
CN = 0
CLS.LO = 8
CLS.HI = 20
GOSUB SYS.CLEAR.PAGE.MID
TEMP.CL = 0; TEMP.LN = 3
$INCLUDE IBP SYS.INCL.STEP.DISPLAY
$INCLUDE IBP SYS.INCL.STEP.DISPLAY.ELP
 *# PRINT
PRINT @(0,8):CLL:RVB:"[=| ":" Task Applicaitions Cross Reference" "L#71":" |=]":RVE:
PRINT @(0,9):CLL:RVB:"[=| ":@(75):" |=]":RVE:
USER.UPD(20) = 1
LOOP CN = CN + 1 WHILE PSD.APPL.XREF<1,CN> NE "" DO
*IF CN EQ 1 THEN
PRINT @(0,CN+9):CLL:RVB:"[=| ":@(75):" |=]":RVE:@(5,CN+9):
*END
PRINT PSD.APPL.XREF<1,CN> "L#15":
*
SYS.SLOC<1> = "MONTH"
*PSD.KEY = "@B@":CO.DATA<4>:"@":STRUCT(61)<1,PORT+1>
*SYS.ITEM = PSD.KEY:"@":TIME.TEMP:"@XREF"
*SYS.FILE = "PSD"
*READ PSD.APPL.XREF FROM PS.FILE,SYS.ITEM ELSE PSD.APPL.XREF = ""
LOC1 = 0
IF CN + 1 = APPL.LOC THEN
FOUND = 1
TEMP.YR = OCONV(OLD.DATE,"D2/")[7,2]
TEMP.YR = (STR("0",2-LEN(TEMP.YR)):TEMP.YR)[1,2]
TEMP.MO = OCONV(OLD.DATE,"D2/")[1,2]
TEMP.MO = (STR("0",2-LEN(TEMP.MO)):TEMP.MO)[1,2]
TEMP.KEY = TEMP.YR:TEMP.MO
LOCATE TEMP.KEY IN PSD.APPL.XREF<APPL.LOC> BY "AL" SETTING LOC1 ELSE FOUND = 0
IF NOT(FOUND) AND CHECK.TIME NE 3 THEN
PSD.APPL.XREF<APPL.LOC> = INSERT(PSD.APPL.XREF<APPL.LOC>,1,LOC1;TEMP.KEY)
END
IF (NOT(FOUND) OR NOT(APPL.FOUND)) AND CHECK.TIME NE 3 THEN
WRITE PSD.APPL.XREF ON PS.FILE,SYS.ITEM
ERROR.TEXT = "Month added to cross-reference (":TEMP.KEY:")"
ERROR.CODE = "190002100"
GOSUB ERROR.CONTROL
END
END
CN1 = 0
LOOP CN1 = CN1 + 1 WHILE PSD.APPL.XREF<CN+1,CN1> NE "" DO
IF CN+1 = APPL.LOC AND CN1 = LOC1 THEN PRINT RVB:
PRINT @((CN1-1)*6+22,CN+9):PSD.APPL.XREF<CN+1,CN1> "L#4":
IF CN+1 = APPL.LOC AND CN1 = LOC1 THEN PRINT RVE:
REPEAT
REPEAT
PRINT @(0,21):
FOR TEMP = 1 TO WAIT.FLAG UNTIL SYSTEM(11); RQM; NEXT TEMP
IF CHECK.TIME = 3 THEN RQM ELSE
FOR TEMP = 1 TO 5 UNTIL SYSTEM(11)
RQM
TEMP1 = 5-TEMP
TEMP1 = TEMP1 + 100000000
TEMP1 = TEMP1[2,999]
PRINT @(65,23):RVB:" | ":TEMP1 "L#8":" ":RVE:
NEXT TEMP
END
IF SYSTEM(11) THEN
ECHO OFF
INPUT TEMP,1:
ECHO ON
END
*
*
!
SYS.LOCT<1> = "READ"
SYS.SLOC<1> = "TIME"
SYS.FILE = "PSD"
SYS.ITEM = PSD.KEY:"@":TIME.TEMP:"@":TEMP.KEY
READV PSD.REC FROM PS.FILE,SYS.ITEM,STRUCT(69)<1,PORT+1> + 1 ELSE PSD.REC = ""
*
*
IF SAME.TASK THEN
SYS.LOCT<1> = "COMMENT"
SYS.SLOC<1> = "LOCATE"
LOC = 0
LOCATE TIME.KEY IN PSD.REC<1,1> BY "AL" SETTING LOC ELSE NULL
IF LOC LT 1 THEN LOC = 1
*
PSD.REC = INSERT(PSD.REC,1,1,LOC;TIME.KEY)
PSD.REC = INSERT(PSD.REC,1,2,LOC;TIME.SVM)
CONT1 = 1
VAL = ""
TEMP = ""
*#PRINT @(0,8):CLS:RVB:("Enter any comments you have: ") "L#75":RVE:
CLS.LO = 8
CLS.HI = 20
GOSUB SYS.CLEAR.PAGE.MID
TEMP.CL = 0; TEMP.LN = 3
$INCLUDE IBP SYS.INCL.STEP.DISPLAY
$INCLUDE IBP SYS.INCL.STEP.DISPLAY.ELP
 *# PRINT
PRINT @(0,8):CLL:RVB:"[=| ":"Enter any comments you have: " "L#71":" |=]":RVE:
PRINT @(0,9):CLL:RVB:"[=| ":@(75):" |=]":RVE:
USER.UPD(20) = 1
TIME.CN = 0
!
LOOP
SYS.SLOC<1> = "RSP"
TIME.CN = TIME.CN + 1
Input.rsp: * Return point that resets wait status and time recording.
READV INP.MODE FROM SY.FILE,"@SYS@USER@":STRUCT(2),27 ELSE INP.MODE<1,PORT+1> = "11"
INP.MODE = INP.MODE<1,PORT+1>
SYS.EV = "0":SVM:"1":SVM:"1":SVM:INP.MODE:SVM:SVM
SYS.EV = SYS.EV:SVM:SVM:SVM:SVM:SVM
SYS.EV = SYS.EV:MENU.APPL:SVM:MENU.NAME:SVM:"SYS.TIME":SVM:"9900":SVM:STRUCT(2):SVM
SYS.EV = SYS.EV:"1":SVM:"0":SVM:"0":SVM:"90"
SYS.EV<2> = "5":VM:TIME.CN+8:VM:"":VM:"1010111":VM:"50":VM
SYS.EV<2> = SYS.EV<2>:"10":VM:"EX":SVM
SYS.EV<2> = SYS.EV<2>:'0X'
SYS.EV = SYS.EV:VM:"1":VM:"your entry was invalid":VM:""
SYS.ES = ""
CALL SYS.RSP
TIME.RSP = SYS.ES<SYS.ES<1,1,1>+1,1,11>
WHILE TIME.RSP NE "" AND TIME.RSP NE "END" AND TIME.RSP NE "EX" DO
SYS.SLOC<1> = "INSERT"
VAL = VAL:"*":TIME.RSP
REPEAT
*
*
SYS.LOCT<1> = "UPD"
$INCLUDE IBP SYS.INCL.STEP.DISPLAY.ELP
SYS.SLOC<1> = "TIME"
PSD.REC = INSERT(PSD.REC,1,3,LOC;VAL)
*
SYS.FILE = "PSD"; SYS.ITEM = PSD.KEY:"@":TIME.TEMP:"@":TEMP.KEY
WRITEV PSD.REC ON PS.FILE,SYS.ITEM,STRUCT(69)<1,PORT+1> + 1
PSD.REC = ""
*
SYS.SLOC<1> = "RECENT.TASK"
SYS.FILE = "SYS"
SYS.ITEM = "@TASK@USER@":CO.DATA<4>:"@":STRUCT(2):"@RECENT"
READ TEMP FROM SY.FILE,SYS.ITEM ELSE TEMP = ""
LOC = 0
FOUND = 1
LOCATE TASK.NUM IN TEMP<1> BY "AL" SETTING LOC ELSE LOC = 10
TEMP<1> = DELETE(TEMP<1>,1,LOC)
TEMP<2> = DELETE(TEMP<2>,1,LOC)
TEMP<1> = TASK.NUM:VM:TEMP<1>
TEMP<2> = TASK.STEP:VM:TEMP<2>
WRITE TEMP ON SY.FILE,SYS.ITEM
!
END ELSE IF NOT(SAME.TASK) THEN
SYS.LOCT<1> = "TASK.SELECT"
SYS.SLOC<1> = "DISPLAY"
VAL = "*"
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@TIME@FUNCTIONS"
READ FUNCTIONS FROM SY.FILE,SYS.ITEM ELSE FUNCTIONS = ""
ANSW = 1
*
LOOP
CLS.LO = 8
CLS.HI = 20
GOSUB SYS.CLEAR.PAGE.MID
PRINT @(0,8):CLL:RVB:"[=| ":"Select Task For Time Recording" "L#71":" |=]":RVE:
PRINT @(0,9):CLL:RVB:"[=| ":@(75):" |=]":RVE:
USER.UPD(20) = 1
CN = 0
*
LOOP
CN = CN + 1
ERROR.TEXT = FUNCTIONS<1,CN>
WHILE ERROR.TEXT NE "" DO
ERROR.TEXT = (CN:") ") "R#5":ERROR.TEXT
TEMP = (100+CN+9)[2,2]
PRINT @(5,TEMP):ERROR.TEXT:
REPEAT
*
SYS.SLOC<1> = "RSP"
TIME.RSP = ""
ERROR.RSP =  ""
ERROR.TEXT = "Enter your choice: "
ERROR.CODE = "29002"
GOSUB ERROR.CONTROL
TIME.RSP = ERROR.RSP
IF TIME.RSP = "END" THEN ANSW = 1; SAME.TASK = 0
IF NUM(TIME.RSP) THEN
IF TIME.RSP THEN
*
SYS.SLOC<1> = "EXECUTE"
CALL.FUNCTION = "SYS.":FUNCTIONS<2,TIME.RSP>:AM:CALL.FUNCTION
CALL.NAME = CALL.FUNCTION<1>
*
TEMP = ""
CALL.SUB.FUNCTION = FUNCTIONS<3,TIME.RSP>:AM:CALL.SUB.FUNCTION
CALL SYS.FILE.ITEM(CALL.SUB.FUNCTION<1>,TEMP)
*
TEMP = ""
SUBR.FUNCTION = FUNCTIONS<4,TIME.RSP>
CALL SYS.FILE.ITEM(SUBR.FUNCTION,TEMP)
*
TEMP = ""
SUBR.SUB.FUNCTION = FUNCTIONS<5,TIME.RSP>
CALL SYS.FILE.ITEM(SUBR.FUNCTION,TEMP)
*
CALL @CALL.NAME
ANSW = 0
IF CALL.SUB.FUNCTION<1> NE "" THEN
SYS.SLOC<1> = "RETURN"
TIME.RSP = CALL.SUB.FUNCTION<1>
PRMPTING = CALL.SUB.FUNCTION<1>
***IF PRMPTING[1,4] NE "TASK" THEN PRMPTING = "TASK ":PRMPTING
END; *# OF CALL.SUB.FUNCTION<1> # ""
END; *# IF TIME.RSP 
END ELSE
PRMPTING = TIME.RSP
END; *# IF NUM(TIME.RSP)
*
IF PRMPTING[1,4] EQ "TASK" THEN
PRMPTING = PRMPTING[6,999]
IF NOT(LEN(FIELD(PRMPTING," ",2))) THEN PRMPTING = PRMPTING:" 1"
PRMPTING = "TASK ":PRMPTING
CALL SYS.TASK
SAME.TEXT = "selected"
*
*
SYS.SLOC<1> = "TOPIC"
*PRINT @(0,3):CLL:@(0,4):CLL:
IF  MENU.CONTROL<1,2,1> GT 0 THEN
CALL.FUNCTION = "DISPLAY":AM:CALL.FUNCTION
CALL.SUB.FUNCTION = 1:AM:CALL.SUB.FUNCTION
IF MENU.CONTROL<1,8>[1,1] = "P" THEN CALL.SUB.FUNCTION<1> = 2
CALL SYS.TOPIC
END; *# OF MENU.CONTROL<1,2,1> GT 0
END; *# OF PRMPTING[1,4] EQ "TASK"
*
TEMP.CL = 0; TEMP.LN = 3
$INCLUDE IBP SYS.INCL.STEP.DISPLAY
*#
***END
***END
***END
WHILE TIME.RSP NE "END" AND TIME.RSP NE "" AND TIME.RSP NE "SAVE" DO REPEAT
IF CHECK.TIME NE 3 OR TIME.RSP EQ "END" THEN SAME.TASK = -1; ANSW = 0
*
IF TIME.RSP EQ "SAVE" AND CHECK.TIME NE 3 THEN
SYS.LOCT<1> = "UPD"
SYS.SLOC<1> = "STRUCT.51"
SAME.TASK = 0; ANSW = 1
IF NOT(ANSW) AND CHECK.TIME NE 3 THEN
STRUCT(51) = TIME.KEY:"*":TIME.SVM:"*":STRUCT(61)<1,PORT+1>:"*":STRUCT(30)<1,PORT+1,1>:"*":STRUCT(69)<1,PORT+1>:"@":VAL:VM:STRUCT(51)
END
END
END
END ELSE
ANSW = 0
ERROR.TEXT = 'your answer must be "Y" or "N"'
ERROR.CODE = "17000"
GOSUB ERROR.CONTROL
END
WHILE NOT(ANSW) OR SAME.TASK LT 0 DO REPEAT
*
SYS.LOCT<1> = "UPD"
SYS.SLOC<1> = "TIME"
IF RECORD.TIME.FLAG AND CHECK.TIME NE 3 THEN
STRUCT(43)<1,PORT+1> = (NEW.DATE+100000)[2,5]:(NEW.TIME+100000)[2,5]
OLD.DATE = NEW.DATE
OLD.TIME = NEW.TIME
STRUCT(44)<1,PORT+1> = SYS.ITEM
USER.UPD(3) = 1
END
$INCLUDE IBP SYS.INCL.STEP.DISPLAY.ELP
CHECK.TIME = 1
IF NOT(SYSTEM(11)) THEN RQM; RQM
IF NOT(SYSTEM(11)) THEN RQM
RSP = MENU.NAME
 IF EXEC.VERB EQ "" THEN EXEC.VERB = MENU.NAME
END
*%%870531%%vv
END
*%%870531%%^^
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
CALL.FUNCTION = DELETE(CALL.FUNCTION,1)
CALL.SUB.FUNCTION = DELETE(CALL.SUB.FUNCTION,1)
SYS.FILE = ""
SYS.ITEM = ""
*#RSP = MENU.NAME
*#EXEC.VERB = MENU.NAME
*
RETURN; * from gosub...
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.TIME.REPORT~
SUBROUTINE SYS.TIME.REPORT
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.END.RSP
*
$INCLUDE IBP SYS.INCL.SYS.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP.SYNONYM
*
DIM MODE.DESC(30), STAT.DESC(15)
*
$INCLUDE IBP SYS.INCL.USER.MODE.DESC
$INCLUDE IBP SYS.INCL.STATUS.CHECK
$INCLUDE IBP SYS.INCL.STATUS.DESC
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.SALES.MODE
$INCLUDE IBP SYS.INCL.LO.TCL.MODE
$INCLUDE IBP SYS.INCL.LO.TRAIN.MODE
$INCLUDE IBP SYS.INCL.HI.TRAIN.MODE
*
*
SYS.PROG = "SYS.TIME.REPORT":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
SYS.PROG.DESC = "User Time Report"
*
!
INPUT TEST.FLAG:
INPUT SUMMARIZE.FLAG:
INPUT AVG.DAY.FLAG:
INPUT COMM.FLAG:
SPTM.START = CALL.SUB.FUNCTION<1>
SPTM.NEXT = SPTM.START
SPTM.TYPE = "S"
SPTM.OLD = ""
UP.FLAG = 0
*
DIM B.R(100),S.R(100),PSD.NEW(100),TASK.REC(100),APPL(100)
MAT B.R = ""; MAT S.R = "";  MAT PSD.NEW = ""; MAT TASK.REC = ""; MAT APPL = ""
*
OPEN "MENUS" TO MU.FILE ELSE
ERROR.TEXT = "the file ":SYS.FILE:"was not found":AM:"this is a fatal error"
ERROR.CODE = "13111":AM:"11111"
GOSUB ERROR.CONTROL
END
*
GOSUB TIME.REPORT
*
*
IF OUT.TO.PRINT THEN
PRINTER ON
PRINT FF
PRINTER OFF
PRINTER CLOSE
END
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
IF EXEC.VERB EQ "" THEN EXEC.VERB = MENU.NAME
*
RETURN
!
*
TIME.REPORT: *
SYS.LOCT = "REPORT"
SYS.SLOC<1> = "START"
AVG.DAY = INT(86400/3)
CONT = 1
OUT.TO.PRINT = 0
SCR.HEADING = ""
REP.PAGE = 0
F.TIME = 1
GOSUB REP.HEADING
ERROR.RSP = ""
ERROR.TEXT = "print this on the (T)erminal or (P)rinter? "
ERROR.CODE = "190021010"
GOSUB ERROR.CONTROL
IF ERROR.RSP = "END" THEN GOTO End.of.prog
IF ERROR.RSP = "P" THEN OUT.TO.PRINT = 1 ELSE
IF ERROR.RSP # "T" AND ERROR.RSP # "" THEN PRINT BELL:; GOTO TIME.REPORT
END
!
LOOP
ERROR.RSP = ""
ERROR.TEXT = "Enter the starting SPTM level: "
ERROR.CODE = "190021210"
GOSUB ERROR.CONTROL
IF ERROR.RSP = "" THEN ERROR.RSP = "M"
IF ERROR.RSP[1,1] = "@" THEN ERROR.RSP = ERROR.RSP[2,99]
IF ERROR.RSP = "END" THEN GOTO End.of.prog
SYS.FILE = "PSD"; SYS.ITEM = "@SYS@SPTM@":CO.DATA<3>:"@":ERROR.RSP
READV TEMP FROM PS.FILE,SYS.ITEM,1 THEN FOUND = 1 ELSE FOUND = 0
WHILE NOT(FOUND) DO
ERROR.TEXT = "your entry was not found on the system"
ERROR.CODE = "19100"
GOSUB ERROR.CONTROL
REPEAT
SPTM.NEXT = ERROR.RSP
!
OLD.KEY.LVL = ""; NEW.KEY.LVL = ""
PREV.TOT = 1
CURR.LVL = 1
SPTM.OLD = ""
LAST.TASK = ""; LAST.APPL = ""; LAST.USER = ""
LAST.MENU = "@#@"; LAST.STEP = 9999; LAST.OPT = "@#@"; LAST.TOPIC = "@#@"; LAST.DATE = 9999
DIM TOTS(40); MAT TOTS = 0; HIGH.TOT = 1
TOT.LVL = 1
HIGH.TOT = 1
F.TIME = 1
REP.PAGE = 0
CN = 1; UP.FLAG = 0
REP.LN = 100
PRINT @(5,17):CLS:"Now searching tasks for printing . . .":
IF OUT.TO.PRINT THEN
END
*
!
*
LOOP
GOSUB SPTM.TREE.PATH
IF CONT THEN GOSUB SPTM.TASK.XREF
WHILE CONT DO REPEAT
*
GOSUB SPTM.FINAL.RIGHTS
*
GOTO End.of.prog
!
SPTM.TREE.PATH: *
*
IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "S?":
INPUT A$:
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
MAT PSD.NEW = MAT S.R
*
IF PSD.NEW(21) # "" THEN
CN = CN + 1
SPTM.NEXT = PSD.NEW(21)<1,CN>
GOSUB SPTM.FORMAT.KEY
IF SPTM.TYPE = "B" THEN RETURN
*SPTM.OLD = SPTM.NEXT
UP.FLAG = 1
END
*
LOOP
IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "S---":SPTM.NEXT
IF SYSTEM(11) THEN
INPUT A$:
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
END
IF SPTM.NEXT # "" THEN
GOSUB SPTM.FORMAT.KEY
SYS.FILE = "PSD"
IF SPTM.NEXT # SPTM.OLD AND SPTM.TYPE = "S" THEN
SYS.FILE = "PSD"; SYS.ITEM = "@SYS@SPTM@":CO.DATA<3>:SPTM.NEXT
MATREAD PSD.NEW FROM PS.FILE,SYS.ITEM THEN
FOUND = 1
END ELSE FOUND = 0
END ELSE FOUND = 1
*
IF FOUND THEN
IF SPTM.TYPE = "S" THEN
IF NOT(UP.FLAG) THEN
TOT.LVL = TOT.LVL + 1
CN = 1
END ELSE
CN = 1
TEMP = COUNT(SPTM.OLD,"@")
TEMP = FIELD(SPTM.OLD,"@",TEMP+1)
LOOP WHILE PSD.NEW(21)<1,CN> # "" AND PSD.NEW(21)<1,CN> # TEMP AND F.TIME # 2 DO CN = CN + 1 REPEAT
IF PSD.NEW(21)<1,CN> = TEMP THEN
CN = CN + 1
END
IF PSD.NEW(21)<1,CN> = "" THEN TOT.LVL = TOT.LVL - 1
END
SPTM.OLD = SPTM.NEXT
SPTM.NEXT = PSD.NEW(21)<1,CN>
IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "NEW1":SPTM.NEXT
END
UP.FLAG = 0
IF F.TIME = 1 THEN F.TIME = 2 ELSE F.TIME = 0
END
END ELSE
*
SPTM.OLD = SPTM.NEXT
SPTM.NEXT = ""
IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "UP1-":SPTM.NEXT
END
END
IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN 
PRINT "FOUND = ":FOUND:"......CN = ":CN:".......UP.FLAG = ":UP.FLAG:".......TYPE = ":SPTM.TYPE
PRINT "21 = ":PSD.NEW(21):"<<<<<<"
END
*
*
IF SPTM.NEXT = "" THEN
CN = 1
TEMP = COUNT(SPTM.OLD,"@")
TEMP = FIELD(SPTM.OLD,"@",TEMP+1)
SPTM.NEXT = SPTM.OLD[1,COL1()-1]
IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "UP2-":SPTM.NEXT
END
UP.FLAG = 1
GOSUB SPTM.UPDATE.TOTALS
IF TOT.LVL > 0 THEN
IF SPTM.NEXT = "" THEN
ERROR.TEXT = "SPTM linking corrupt"
ERROR.CODE = "15000"
GOSUB ERROR.CONTROL
CONT = 0
END
END ELSE CONT = 0
END ELSE UP.FLAG = 0
END
WHILE SPTM.NEXT # "" AND NOT(SPTM.NEXT MATCHES "5N") AND TOT.LVL > 0 AND CONT DO REPEAT
*
IF CONT THEN MAT S.R = MAT PSD.NEW
IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "E?":
INPUT A$:
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
RETURN
!
SPTM.FORMAT.KEY: *
IF NOT(UP.FLAG) OR F.TIME = 1 THEN
IF SPTM.NEXT MATCHES "5N" THEN
SPTM.TYPE = "B"
END ELSE
IF SPTM.OLD # SPTM.NEXT THEN
IF SPTM.NEXT # "" THEN SPTM.NEXT = SPTM.OLD:"@":SPTM.NEXT ELSE SPTM.NEXT = SPTM.OLD
END ELSE
PRINT "*":
END
SPTM.TYPE = "S"
END
END ELSE IF TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "----------":UP.FLAG:"_________":F.TIME
END
*
RETURN
!
SPTM.UPDATE.TOTALS: *
ERROR.TEXT = "update total level ":TOT.LVL:" of ":HIGH.TOT:" for ":SPTM.OLD
ERROR.CODE = "29000"
IF NOT(TEST.FLAG = 1 OR (PORT = 5 AND SYSTEM(11))) THEN
IF OUT.TO.PRINT THEN
GOSUB ERROR.CONTROL
END ELSE
PRINT ERROR.TEXT
END
END
*
RETURN
!
SPTM.TASK.XREF: *
SYS.SLOC<1> = "APPL"
NEW.KEY.LVL2 = SPTM.OLD:"@":SPTM.NEXT
IF OUT.TO.PRINT THEN PRINT @(0,23):CLL:SPTM.OLD:"----":SPTM.NEXT:"<":
LAST.MENU = "@#@"; LAST.STEP = 9999; LAST.OPT = "@#@"; LAST.TOPIC = "@#@"; LAST.DATE = 9999
SYS.ITEM = "@B@":CO.DATA<3>:"@":SPTM.NEXT:"@XREF"
SYS.FILE = "PSD"
READ PSD.APPL.XREF FROM PS.FILE,SYS.ITEM ELSE PSD.APPL.XREF = ""
ACN = 0
LOOP ACN = ACN + 1 WHILE PSD.APPL.XREF<1,ACN> # "" DO
SYS.SLOC<1> = "APPL"
SPTM.APPL = PSD.APPL.XREF<1,ACN>
NEW.KEY.LVL1 = NEW.KEY.LVL2:"@":SPTM.APPL
IF OUT.TO.PRINT OR TEST.FLAG = 2 THEN
IF NOT(TEST.FLAG) THEN PRINT @(0,10):CLL:
PRINT "Task Appl/Month: ":SPTM.APPL "L#15"
END
*
SYS.SLOC<1> = "MONTH"
*SYS.FILE = "PSD"
*SYS.ITEM = "@B@":CO.DATA<3>:"@":SPTM.NEXT:"@":SPTM.APPL:"@XREF"
*READ PSD.MONTH.XREF FROM PS.FILE,SYS.ITEM ELSE PSD.MONTH.XREF = ""
MCN = 0
LOOP MCN = MCN + 1 WHILE PSD.MONTH.XREF<ACN+1,MCN> # "" DO
SPTM.PER = PSD.MONTH.XREF<ACN+1,MCN>
NEW.KEY.LVL0 = NEW.KEY.LVL1:"@":SPTM.PER
IF OUT.TO.PRINT OR TEST.FLAG = 2 THEN
IF NOT(TEST.FLAG) THEN PRINT @(40,10):CLL:
PRINT SPTM.PER "L#4"
END
*
GOSUB SPTM.TASK.PRINT
*
REPEAT
*
REPEAT
*
RETURN
!
SPTM.TASK.PRINT: *
IF TEST.FLAG = 2 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "T-":SPTM.NEXT
INPUT A$:
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
UP.FLAG = 0
IF OUT.TO.PRINT OR TEST.FLAG = 2 THEN
IF NOT(TEST.FLAG) THEN PRINT @(5,12):CLL:
PRINT SPTM.NEXT "L#5"
END
SYS.FILE = "PSD"; SYS.ITEM = "@B@":CO.DATA<3>:"@":SPTM.NEXT:"@":SPTM.APPL:"@":SPTM.PER
MATREAD B.R FROM PS.FILE,SYS.ITEM ELSE
ERROR.TEXT = "*** ERROR - Billing Record ":SPTM.NEXT:" is missing from the file"
PRINT; PRINT ERROR.TEXT; PRINT
ERROR.CODE = "15110"
GOSUB ERROR.CONTROL
RETURN
END
*
*
M.CORP = CO.DATA<3>
M.TASK = SPTM.NEXT
IF M.TASK # LAST.TASK THEN
SYS.FILE = "PSD"; SYS.ITEM = "@J@":CO.DATA<3>:"@":SPTM.NEXT
TASK.ID = SYS.ITEM
MATREAD TASK.REC FROM PS.FILE,SYS.ITEM ELSE
MAT TASK.REC = ""
TASK.REC(1) = "**** Not on file ****"
TASK.REC(19) = 25
ERROR.TEXT = "*** ERROR - Task record ":M.TASK:" is missing from the file"
PRINT; PRINT ERROR.TEXT; PRINT
ERROR.CODE = "15110"
GOSUB ERROR.CONTROL
END
LAST.TASK = M.TASK
END
IF OUT.TO.PRINT OR TEST.FLAG = 2 THEN
IF NOT(TEST.FLAG) THEN PRINT @(25,14):CLL:
PRINT TASK.REC(19) "R#3"
END
*
*
*
IF TEST.FLAG = 3 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "CURR.SET":
INPUT A$
END
TOT.FL = 99
CURR.LVL = 1
TEMP = NEW.KEY.LVL0
LOOP
NEW.KEY.LVL<CURR.LVL> = FIELD(TEMP,"@",CURR.LVL+1)
WHILE NEW.KEY.LVL<CURR.LVL> # "" DO
IF OLD.KEY.LVL<CURR.LVL> # NEW.KEY.LVL<CURR.LVL> THEN
IF OLD.KEY.LVL<CURR.LVL> = "" AND CURR.LVL >= HIGH.TOT THEN
OLD.KEY.LVL<CURR.LVL> = NEW.KEY.LVL<CURR.LVL>
END ELSE
IF CURR.LVL < TOT.FL THEN TOT.FL = CURR.LVL
END
END
IF NEW.KEY.LVL<CURR.LVL> # "" AND CURR.LVL > HIGH.TOT THEN HIGH.TOT = CURR.LVL
CURR.LVL = CURR.LVL + 1
REPEAT
*
CURR.LVL = CURR.LVL - 1
IF TOT.FL = 99 THEN TOT.FL = 0 ELSE
LAST.MENU = "@#@"; LAST.STEP = 9999; LAST.OPT = "@#@"; LAST.TOPIC = "@#@"; LAST.DATE = 9999
END
*
!
*
M.STEP = 1
LOOP WHILE M.STEP <= TASK.REC(19) DO
IF TEST.FLAG = 2 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "t-":M.STEP
INPUT A$:
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
*
IF OUT.TO.PRINT OR TEST.FLAG = 2 THEN
IF NOT(TEST.FLAG) THEN PRINT @(30,14):
PRINT M.STEP "R#3"
END
*
M.APPL = SPTM.APPL
IF LAST.APPL # M.APPL THEN
SYS.FILE = "SYS"; SYS.ITEM = "@APPL@":M.APPL
MATREAD APPL FROM SY.FILE,SYS.ITEM ELSE
MAT APPL = ""
APPL(1) = "**** Not on file ****"
ERROR.TEXT = "*** ERROR - Application record for ":M.APPL:" is missing from the file"
ERROR.CODE = "15110"
GOSUB ERROR.CONTROL
END
LAST.APPL = M.APPL
END
*
!
*
SCN = 0
*
*
LOOP
IF TEST.FLAG = 2 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "R-":SCN
INPUT A$:
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
SCN = SCN + 1
B.REC00 = B.R(M.STEP+1)<1,1,SCN>
B.REC01 = B.R(M.STEP+1)<1,2,SCN>
B.REC02 = B.R(M.STEP+1)<1,3,SCN>
B.REC10 = B.R(M.STEP+1)<1,1,SCN+1>
B.REC11 = B.R(M.STEP+1)<1,2,SCN+1>
B.REC12 = B.R(M.STEP+1)<1,3,SCN+1>
WHILE B.REC00 # "" DO
*
IF OUT.TO.PRINT OR TEST.FLAG = 2 THEN
PRINT "*":
END
*
M.DATE  = FIELD(B.REC00,"*",1)
M.TIME  = FIELD(B.REC00,"*",2)
M.USER  = FIELD(B.REC00,"*",3)
M.PORT  = FIELD(B.REC00,"*",4)
*
M.TYPE  = FIELD(TASK.ID,"@",2)
M.CORP  = FIELD(TASK.ID,"@",3)
M.TASK  = FIELD(TASK.ID,"@",4)
M.APPL  = FIELD(TASK.ID,"@",5)
M.PER   = FIELD(TASK.ID,"@",6)
*
M.ELP   = FIELD(B.REC01,"*",1)
M.MENU  = FIELD(B.REC01,"*",2)
M.OPT   = FIELD(B.REC01,"*",3)
M.TOPIC = FIELD(B.REC01,"*",4)
*
IF (REP.LN > 45 AND OUT.TO.PRINT) OR (REP.LN > 20 AND NOT(OUT.TO.PRINT)) THEN
GOSUB PAGE.HEADING
END
*
!
WRITE.FLAG = 0
LOOP
IF TEST.FLAG = 2 OR (PORT = 5 AND SYSTEM(11)) THEN
INPUT A$:
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
*
M.DATE1 = FIELD(B.REC10,"*",1)
M.TIME1 = FIELD(B.REC10,"*",2)
M.USER1 = FIELD(B.REC10,"*",3)
M.PORT1 = FIELD(B.REC10,"*",4)
*
M.TYPE1 = FIELD(TASK.ID,"@",2)
M.CORP1 = FIELD(TASK.ID,"@",3)
M.TASK1 = FIELD(TASK.ID,"@",4)
M.APPL1 = FIELD(TASK.ID,"@",5)
M.PER1  = FIELD(TASK.ID,"@",6)
*
M.ELP1  = FIELD(B.REC11,"*",1)
M.MENU1 = FIELD(B.REC11,"*",2)
M.OPT1  = FIELD(B.REC11,"*",3)
M.TOPIC1= FIELD(B.REC11,"*",4)
!
*
DEL.FLAG = 0
IF SUMMARIZE.FLAG THEN
IF B.REC11 # "" AND NUM(M.DATE1) AND NUM(M.TIME1) AND NUM(M.ELP1) THEN
*
TEMP = M.DATE
TEMP1 = M.TIME + M.ELP
LOOP WHILE TEMP1 > 86400 DO TEMP = TEMP + 1; TEMP1 = TEMP1 - 86400 REPEAT
IF TEMP = M.DATE1 AND TEMP1 = M.TIME1 AND M.USER = M.USER1 THEN
FOR TEMP2 = 1 TO 4
TEMP3 = FIELD(B.REC01,"*",TEMP2)
B.REC01 = B.REC01[1,COL2()-1]:"+":TEMP3:B.REC01[COL2(),999]
NEXT TEMP2
*
IF M.DATE # M.DATE1 THEN
B.REC02 = B.REC02:"***The date is ":OCONV(M.DATE1,"D2"):"."
END
B.REC02 = B.REC02:"**The time was recorded at ":OCONV(M.TIME1,"MTS"):", on Port ":M.PORT1:".**":B.REC12
*
*
B.R(M.STEP+1)<1,2,SCN> = B.REC01
B.R(M.STEP+1)<1,3,SCN> = B.REC02
*
M.ELP = M.ELP + M.ELP1
*
B.R(M.STEP+1) = DELETE(B.R(M.STEP+1),1,1,SCN+1)
B.R(M.STEP+1) = DELETE(B.R(M.STEP+1),1,2,SCN+1)
B.R(M.STEP+1) = DELETE(B.R(M.STEP+1),1,3,SCN+1)
*
B.REC10 = B.R(M.STEP+1)<1,1,SCN+1>
B.REC11 = B.R(M.STEP+1)<1,2,SCN+1>
B.REC12 = B.R(M.STEP+1)<1,3,SCN+1>
*
DEL.FLAG = 1
WRITE.FLAG = 1
END
END
END
WHILE DEL.FLAG DO REPEAT
!
*
IF TEST.FLAG = 3 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "CHECK.CURR":
INPUT A$
END
*
IF TOT.FL THEN GOSUB Pr.totals
*
IF OUT.TO.PRINT THEN PRINTER ON
*
IF M.STEP # LAST.STEP THEN
IF LAST.STEP # 9999 THEN
TOT.FL = CURR.LVL+1
IF OUT.TO.PRINT THEN PRINTER OFF
GOSUB Pr.totals
IF OUT.TO.PRINT THEN PRINTER ON
END
IF REP.LN > 12 THEN
PRINT; REP.LN = REP.LN + 1
PRINT ("User is ":M.USER) "L#30":("Step ":M.STEP) "L#10":("Per ":SPTM.PER) "L#10":("Appl ":SPTM.APPL) "L#10":("Task ":M.TASK) "L#10":
IF NOT(OUT.TO.PRINT) THEN PRINT; REP.LN = REP.LN + 1
PRINT "          Level is ":SPTM.OLD; REP.LN = REP.LN + 1
END
*END?????????INSTEAD OF 502
LAST.STEP = M.STEP
END
*
IF M.DATE # LAST.DATE THEN
IF LAST.DATE # 9999 THEN
TOT.FL = CURR.LVL+2
IF OUT.TO.PRINT THEN PRINTER OFF
GOSUB Pr.totals
IF OUT.TO.PRINT THEN PRINTER ON
END
PRINT OCONV(M.DATE,"D2") "L#10":
LAST.DATE = M.DATE; M.DATE.SCN = 0
END ELSE PRINT STR(".",10):
*
M.DATE.SCN = M.DATE.SCN + 1
IF NUM(M.ELP) THEN TOTS(CURR.LVL+2) = TOTS(CURR.LVL+2) + M.ELP
TEMP1 = INT(M.ELP / AVG.DAY)
TEMP2 = M.ELP - TEMP1 * AVG.DAY
IF TEMP1 = 0 THEN TEMP1 = ""
PRINT (OCONV(M.TIME,"MTS")) "L#9":
PRINT (TEMP1 "R#4":" ":OCONV(TEMP2,"MT")) "L#11":
IF M.MENU # LAST.MENU THEN PRINT M.MENU "L#10": ELSE PRINT STR(".",9):" ":
IF M.OPT # LAST.OPT THEN PRINT M.OPT "L#10": ELSE PRINT STR(".",10):
IF M.TOPIC # "" THEN PRINT " ":M.TOPIC "L#28": ELSE PRINT " ":STR(".",28):
!
*
IF NOT(OUT.TO.PRINT) OR NOT(COMM.FLAG) THEN PRINT; REP.LN = REP.LN + 1 ELSE PRINT " ":
IF COMM.FLAG THEN
M.COMM.FL = 0
CCN = 1
LOOP
M.COMMENT = FIELD(B.REC02,"*",CCN)
WHILE B.REC02[COL2(),1] # "" DO
LOOP WHILE LEN(M.COMMENT) > 0 DO
IF NOT(OUT.TO.PRINT) THEN PRINT SPACE(30): ELSE
IF M.COMM.FL THEN PRINT SPACE(80):
END
PRINT M.COMMENT "L#49"
M.COMM.FL = 1
REP.LN = REP.LN + 1
M.COMMENT = M.COMMENT[50,999]
REPEAT
CCN = CCN + 1
REPEAT
IF CCN = 1 OR NOT(M.COMM.FL) THEN PRINT; REP.LN = REP.LN + 1
END
IF OUT.TO.PRINT THEN PRINTER OFF
*
*
F.TIME = 0
REPEAT
*
M.STEP = M.STEP + 1
*
REPEAT
!
*
SYS.FILE = "PSD"; SYS.ITEM = "@B@":CO.DATA<3>:"@":SPTM.NEXT:"@":SPTM.APPL:"@":SPTM.PER
*IF WRITE.FLAG THEN MATWRITE B.R ON PS.FILE,SYS.ITEM
*
RETURN
!
SPTM.FINAL.RIGHTS: *
*
IF NOT(F.TIME) THEN
TOT.FL = 1
GOSUB Pr.totals
MATWRITE TOTS ON SY.FILE,"@M@TIME@":M.USER:"@TOTAL"
WRITE TOTS(7) ON SY.FILE,"@M@TIME@ACCOUNT@TOTAL"
PRINT
PRINT "TOTAL FOR ACCT: ":(OCONV(TOTS(7),"MTS")) "L#12":
PRINT
PRINT
PRINT "END OF REPORT"
END
*
RETURN
!
PAGE.HEADING: *#*
*
IF NOT(F.TIME) AND NOT(OUT.TO.PRINT) THEN
PRINT @(0,23):CLL:@(40):"<CR> to continue....":
INPUT A$
IF INDEX(TCL.RSP,"*":A$:"*",1) # 0 THEN STOP
END
REP.PAGE = REP.PAGE + 1
SCR.HEADING = "Page ":REP.PAGE
GOSUB REP.HEADING
REP.LN = 8
IF OUT.TO.PRINT THEN PRINTER ON
PRINT ("User is ":M.USER) "L#30":("Step ":M.STEP) "L#10":("Per ":SPTM.PER) "L#10":("Appl ":SPTM.APPL) "L#10":("Task ":M.TASK) "L#10"
PRINT
PRINT "Date..... Time..... Elapsed.. Menu..... Option.... Topic......................":
IF NOT(OUT.TO.PRINT) THEN PRINT; REP.LN = REP.LN + 1 ELSE PRINT ". ":
PRINT "Comments and notes................................"
PRINT; REP.LN = REP.LN + 4
*
IF OUT.TO.PRINT THEN PRINTER OFF
LAST.MENU = "@#@"; LAST.STEP = 9999; LAST.OPT = "@#@"; LAST.TOPIC = "@#@"; LAST.DATE = 9999
RETURN
!
Pr.totals: *#*
*
IF TEST.FLAG = 3 OR (PORT = 5 AND SYSTEM(11)) THEN
PRINT "Pr.totals":
INPUT A$
END
*
IF NOT(F.TIME) AND TOT.FL > 0 THEN
IF REP.LN < 6 THEN PRINT; REP.LN = REP.LN + 1
SCN2 = CURR.LVL+2
LOOP WHILE SCN2 >= TOT.FL DO
IF SCN2 > 1 THEN TOTS(SCN2-1) = TOTS(SCN2-1) + TOTS(SCN2)
SCN2 = SCN2 - 1
REPEAT
*
IF OUT.TO.PRINT THEN PRINTER ON
PRINT STR(".",19):
*SCN3 = TOT.FL
*LOOP WHILE SCN3 > 1 DO
*PRINT STR(".",10):
*SCN3 = SCN3 - 1
*REPEAT
*
SCN4 = CURR.LVL+2
LOOP WHILE SCN4 >= TOT.FL DO
SCN5 = INT(TOTS(SCN4) / AVG.DAY)
SCN6 = TOTS(SCN4) - SCN5 * AVG.DAY
PRINT (SCN5 "R#4":"_":OCONV(SCN6,"MT")) "L#10":
IF SCN4 = CURR.LVL+2 THEN PRINT " ":
TOTS(SCN4) = 0
SCN4 = SCN4 - 1
REPEAT
*
PRINT; REP.LN = REP.LN + 1
PRINT; REP.LN = REP.LN + 1
IF OUT.TO.PRINT THEN PRINTER OFF
IF TOT.FL < 5 THEN GOSUB PAGE.HEADING
END
TOT.FL = 0
LAST.MENU = "@#@"; LAST.STEP = 9999; LAST.OPT = "@#@"; LAST.TOPIC = "@#@"; LAST.DATE = 9999
IF TEST.FLAG = 3 OR (PORT = 5 AND SYSTEM(11)) THEN
IF OUT.TO.PRINT THEN PRINT @(0,18):CLL:
PRINT OLD.KEY.LVL:" = ":NEW.KEY.LVL:
IF OUT.TO.PRINT THEN
PRINT @(0,19):CLL:
FOR A = 1 TO 10
PRINT @(A*6,19):A:"-":TOTS(A):
NEXT A
PRINT @(0,20):CLL:
FOR A = 11 TO 20
PRINT @((A-10)*6-1,20):A:"-":TOTS(A):
NEXT A
END
END
OLD.KEY.LVL = NEW.KEY.LVL
PREV.TOT = HIGH.TOT
RETURN
!
REP.HEADING: * Subroutine to print screen heading.
IF OUT.TO.PRINT THEN
PRINTER CLOSE
PRINTER ON
*PRINT FF:
PRINT OCONV(DATE(),"D2") "L#20":(SPACE(20-LEN(CO.DATA<1,1,1>)/2+.5):CO.DATA<1,1,1>) "L#40":("Port: ":PORT) "R#20"
*
PRINT OCONV(TIME(),"MTS") "L#15":(SPACE(25-LEN(MENU.APPL.DESC)/2+.5):MENU.APPL.DESC) "L#50":("Acct: ":ACCT) "R#15"
*
IF STRUCT(25)<1,PORT+1> THEN PRINT (MODE.DESC(USER.MODE):" mode") "L#20": ELSE PRINT SPACE(20): 
*
PRINT (SPACE(20-LEN(MENU.CONTROL<1,1>)/2+.5):MENU.CONTROL<1,1>) "L#40":("User: ":STRUCT(2)) "R#20"
*
PRINT
TEMP = SYS.PROG.DESC:" at level ":SPTM.OLD
PRINT (SPACE((80-LEN(TEMP)) / 2):TEMP) "L#80"
IF LEN(SCR.HEADING) # 0 THEN
PRINT SCR.HEADING
END
PRINTER OFF
END ELSE
PRINT @(0,0):CLS:RVB:OCONV(DATE(),"D2") "L#20":(SPACE(20-LEN(CO.DATA<1,1,1>)/2+.5):CO.DATA<1,1,1>) "L#40":("Port: ":PORT) "R#20":
*
PRINT @(0,1):OCONV(TIME(),"MTS") "L#15":(SPACE(25-LEN(MENU.APPL.DESC)/2+.5):MENU.APPL.DESC) "L#50":("Acct: ":ACCT) "R#15":
*
IF STRUCT(25)<1,PORT+1> THEN PRINT @(0,2):(MODE.DESC(USER.MODE):" mode") "L#20": ELSE PRINT @(0,2):SPACE(20): 
*
PRINT (SPACE(20-LEN(MENU.CONTROL<1,1>)/2+.5):MENU.CONTROL<1,1>) "L#40":("User: ":STRUCT(2)) "R#20":
*
TEMP = SYS.PROG.DESC:" at level ":SPTM.OLD
PRINT @(0,3):(SPACE((80-LEN(TEMP)) / 2):TEMP) "L#80":RVE:
*
IF LEN(SCR.HEADING) # 0 THEN PRINT @(0,4):SCR.HEADING[1,75]:
*
END
RETURN
!
End.of.prog: *#*
RETURN
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
*
END
~SYS.TIME.SHEET~
SUBROUTINE SYS.TIME.SHEET
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.CPORT
*
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.END.RSP
*
$INCLUDE IBP SYS.INCL.SYS.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP.SYNONYM
*
CLS.LO = 8
CLS.HI = 20
MENU.TYPE = "P"
DIM REP.TOTALS(5,2)
MAT REP.TOTALS = 0
*
*
*#IF INDEX(SYS.PROG,"SYS.TIME.SHEET",1) # 0 THEN RETURN
*
SYS.PROG = "SYS.TIME.SHEET":AM:SYS.PROG
SYS.LOCT = "INIT":AM:SYS.LOCT
SYS.SLOC = "":AM:SYS.SLOC
*
!
RECORD.TIME.SHEET: * to record time usage
*
* TIME RECORDING IS BY
*
* USER  ,   TASK    ,    SYS.RSP  or APPLICATION
*     ATTRIBUTE = STEP + 1
*     MULTI-VALUES -  1 = OLD.DATE*OLD.TIME*USER.NAME     (sorted)
*                     2 = TIME RECORDS             (linked to 1)
*                     3 = COMMENTS                 (linked to 1)
CHECK.TIME = 1
IF CHECK.TIME THEN
SYS.SLOC<1> = "DATES"
NEW.DATE = DATE()
NEW.TIME = TIME()
OLD.DATE = STRUCT(43)<1,PORT+1>[1,5]
OLD.TIME = STRUCT(43)<1,PORT+1>[6,5]
*
*#IF NEW.DATE # OLD.DATE THEN
*#ELP.TIME = 86400 - OLD.TIME + NEW.TIME
*#END ELSE
*#ELP.TIME = NEW.TIME - OLD.TIME
*#END
RECORD.TIME.FLAG = 0
*
*
SYS.LOCT<1> = "RECORD"
SYS.SLOC<1> = "RSP"
RECORD.TIME.FLAG = 1
*
IF RECORD.TIME.FLAG THEN
USER.UPD(20) = 1
SYS.LOCT<1> = "DISPLAY"
SYS.SLOC<1> = "INIT"
OUT.TO.PRINT = 0
ANSW = 0
SAME.TASK = -1
SAME.TEXT = "current"
*
LOOP
SYS.SLOC<1> = "DETAIL"
RSP = ""
*
*
*vvv
IF SAME.TASK < 0 THEN
PRINT @(0,21):CLL:RVB:"[=| ":"will we be displaying the ":SAME.TEXT:" task (<cr>=Y / N=print) ":RVE:
IF STRUCT(27)<1,PORT+1> < 11 THEN
OUT.TO.PRINT = 0; SAME.TASK = 1; PRINT "Y":
END ELSE
IF NOT(SYSTEM(11)) THEN RQM
IF NOT(SYSTEM(11)) THEN RQM
YES.NO = ""
IF SYSTEM(11) THEN INPUT YES.NO:
IF INDEX(NO,"*":YES.NO:"*",1) THEN
SAME.TASK = 1
OUT.TO.PRINT = 1
END ELSE
SAME.TASK = -1
OUT.TO.PRINT = 0
END
END
END ELSE SAME.TASK = 0; OUT.TO.PRINT = 0
*^^^
*
ANSW = 1
REP.TOTALS(1,1) = 0
REP.TOTALS(1,2) = 0
REP.TOTALS(2,1) = 0
REP.TOTALS(2,2) = 0
REP.TOTALS(3,1) = 0
REP.TOTALS(3,2) = 0
REP.TOTALS(4,1) = 0
REP.TOTALS(4,2) = 0
REP.TOTALS(5,1) = 0
REP.TOTALS(5,2) = 0
STEP.TOTAL = 0
*
*#IF NOT(SAME.TASK < 0) THEN
SYS.LOCT<1> = "XREF"
SYS.SLOC<1> = "APPL"
IF INDEX(SYS.RSP,"*":STRUCT(33)<1,PORT+1>:"*",1) # 0 THEN
TIME.TEMP = STRUCT(33)<1,PORT+1>
END ELSE
TIME.TEMP = STRUCT(30)<1,PORT+1,1>
END
*
PSD.KEY = "@B@":CO.DATA<3>:"@":STRUCT(61)<1,PORT+1>
FOR A = 1 TO 10
PRINT
NEXT A
IF OUT.TO.PRINT THEN
PRINTER ON
PRINT FF
END
PRINT ">"
PRINT ">"
PRINT ">"
PRINT ">COMPANY: ":CO.DATA<1>
PRINT ">>>>>>>>: ":CO.DATA<3>
PRINT ">>>>TASK: ":STRUCT(61)<1,PORT+1>
PRINT ">>>>-60-: ":STRUCT(60)<1,PORT+1>
PRINT ">>>>-62-: ":STRUCT(62)<1,PORT+1>
PRINT ">>>>-69-: ":STRUCT(69)<1,PORT+1
PRINT ">>>>"
PRINT ">>>>USER: ":STRUCT(2)
PRINT ">>>>PORT: ":PORT
PRINT ">>>>DATE: ":OCONV(DATE(),"D2"):" ":OCONV(TIME(),"MTS")
PRINT ">>>>"
PRINT ">"
PRINT ">"
SYS.ITEM = PSD.KEY:"@XREF"
SYS.FILE = "PSD"
READ PSD.APPL.XREF FROM PS.FILE,SYS.ITEM ELSE PSD.APPL.XREF = ""
CN = 0
PRINT RVB:"[=| ":" Task Applicaitions Cross Reference" "L#72":" |=]":RVE
USER.UPD(20) = 1
LOOP CN = CN + 1 WHILE PSD.APPL.XREF<1,CN> # "" DO
PRINT RVB:
PRINT ">>>>>"
PRINT ">>>>>"
PRINT ">>>>>APPL: ":PSD.APPL.XREF<1,CN> "L#15"
PRINT ">>>>>"
PRINT RVE:
*
SYS.SLOC<1> = "MONTH"
CN1 = 0
LOOP CN1 = CN1 + 1 WHILE PSD.APPL.XREF<CN+1,CN1> # "" DO
TEMP.KEY = PSD.APPL.XREF<CN+1,CN1>
PRINT RVB:
PRINT STR("*",50):RVE
AVG.DAY = 60*60*8; *# ONE 8 HOUR DAY (Secs*Mins*Hours)
PRINT "YEAR AND MONTH >>>>>>>> ":TEMP.KEY "L#4":"  ":STR("*",20)
*****
*****
GOSUB PRINT.TIME.RECORD
*****
*****
REPEAT
PRINT ("Application total for task: ":REP.TOTALS(3,1):" days ":OCONV(REP.TOTALS(3,2),"MTS")) "R#55"
RQM
RQM
REP.TOTALS(2,1) = REP.TOTALS(2,1) + REP.TOTALS(3,1)
REP.TOTALS(2,2) = REP.TOTALS(2,2) + REP.TOTALS(3,2)
REP.TOTALS(2,1) = REP.TOTALS(2,1) + INT(REP.TOTALS(2,2)/AVG.DAY)
REP.TOTALS(2,2) = REP.TOTALS(2,2) - INT(REP.TOTALS(2,2)/AVG.DAY)*AVG.DAY
REP.TOTALS(3,1) = 0; REP.TOTALS(3,2) = 0
REPEAT
PRINT
PRINT "***"
PRINT ("*** GRAND total for this task: ":REP.TOTALS(2,1):" days ":OCONV(REP.TOTALS(2,2),"MTS")) "R#55"
RQM
RQM
REP.TOTALS(1,1) = REP.TOTALS(1,1) + REP.TOTALS(2,1)
REP.TOTALS(1,2) = REP.TOTALS(1,2) + REP.TOTALS(2,2)
REP.TOTALS(1,1) = REP.TOTALS(1,1) + INT(REP.TOTALS(1,2)/AVG.DAY)
REP.TOTALS(1,2) = REP.TOTALS(1,2) - INT(REP.TOTALS(1,2)/AVG.DAY)*AVG.DAY
REP.TOTALS(2,1) = 0; REP.TOTALS(2,2) = 0
PRINT
PRINT
*#END; *# NOT(SAME.TASK < 0)
ANSW = 1; SAME.TASK = 1
WHILE NOT(ANSW) OR SAME.TASK < 0 DO REPEAT
*
END; *# IF RECORD.TIME.FLAG OR CHECK.TIME = 3
END; * OF CHECK.TIME FLAG
*
*
PRINT BELL:
PRINT "***"
PRINT ("*** COMPANY GRAND TOTAL is: ":REP.TOTALS(1,1):" days ":OCONV(REP.TOTALS(1,2),"MTS")) "R#55"
PRINT "***"
RQM
RQM
RQM
IF NOT(SYSTEM(11)) THEN RQM; RQM
PRINT FF
IF OUT.TO.PRINT THEN
PRINTER OFF
PRINTER CLOSE
PRINT
PRINT CLL:">>> Printing has been completed . . . "
PRINT BELL
END
FOR A = 1 TO 10 UNTIL SYSTEM(11)
RQM
NEXT A
GOTO END.OF.PROG
*
*
PRINT.TIME.RECORD: *****
*
!
SYS.LOCT<1> = "READ"
SYS.SLOC<1> = "TIME"
SYS.FILE = "PSD"
SYS.ITEM = PSD.KEY:"@":TIME.TEMP:"@":TEMP.KEY
READ PSD.REC FROM PS.FILE,SYS.ITEM ELSE PSD.REC = ""
*,STRUCT(69)<1,PORT+1> + 1
* = STEP
*
IF SAME.TASK THEN
*
*
REP.TOTALS(5,2) = 0
STEP.TOTAL = 0
REP.TOTALS(4,2) = 0
PSD.STEP = 0
MAX.STEP = DCOUNT(PSD.REC,AM)-1
MAX.VERF = DCOUNT(PSD.REC<1>,VM)
IF MAX.STEP NE MAX.VERF THEN
IF MAX.STEP EQ 0 THEN MAX.STEP = MAX.VERF
*PRINT "!!!!":
END
IF MAX.STEP LT 0 THEN MAX.STEP = 0
IF MAX.STEP THEN
LOOP
PSD.STEP = PSD.STEP + 1
PSD.STEP.ID = PSD.REC<1,PSD.STEP>
PSD.STEP.REC = PSD.REC<PSD.STEP+1>
IF PSD.STEP.REC NE "" THEN
PRINT STR("*",50)
*#PRINT
PRINT SPACE(5):">>>"
PRINT SPACE(5):">>> STEP >>> ":PSD.STEP "R#3":". ":PSD.STEP.ID "L#50"
*
*
PSD.TRANS = 0
MAX.TRANS = DCOUNT(PSD.STEP.REC<1,1>,SVM)
IF MAX.TRANS THEN
*#PRINT
PRINT "**Date*** **Time** **Elapsed**" "L#30":
PRINT " Port **User******" "L#15":
PRINT " **Menu* Option*****" "L#15":
PRINT " **Topic**********" "L#15"
LOOP
PSD.TRANS = PSD.TRANS + 1
*
*PRINT SPACE(5):PSD.TRANS "R#3":". ":
TEMP = PSD.STEP.REC<1,1,PSD.TRANS>:"****"
TRANS.DATE = FIELD(TEMP,"*",1)
TRANS.TIME = FIELD(TEMP,"*",2)
TRANS.USER = FIELD(TEMP,"*",3)
TRANS.PORT = FIELD(TEMP,"*",4)
*
TEMP = PSD.STEP.REC<1,2,PSD.TRANS>:"****"
TRANS.ELP = FIELD(TEMP,"*",1)
IF NOT(NUM(TRANS.ELP)) THEN TRANS.ELP = 0
TRANS.MENU = FIELD(TEMP,"*",2)
TRANS.OPT  = FIELD(TEMP,"*",3)
TRANS.TOPIC = FIELD(TEMP,"*",4)
*
PRINT OCONV(TRANS.DATE,"D2"):" ":
PRINT OCONV(TRANS.TIME,"MTS"):"  ":
TEMP.INTERM = INT(TRANS.ELP/AVG.DAY)
TEMP.REMNDR = TRANS.ELP-TEMP.INTERM*AVG.DAY
PRINT TRIM(TEMP.INTERM:" ":OCONV(TEMP.REMNDR,"MTS")) "L#10":; *30
REP.TOTALS(5,1) = REP.TOTALS(5,1) + TEMP.INTERM
REP.TOTALS(5,2) = REP.TOTALS(5,2) + TEMP.REMNDR
REP.TOTALS(5,1) = REP.TOTALS(5,1) + INT(REP.TOTALS(5,2)/AVG.DAY)
REP.TOTALS(5,2) = REP.TOTALS(5,2) - INT(REP.TOTALS(5,2)/AVG.DAY)*AVG.DAY
PRINT "  ":TRANS.PORT "L#2":" ":TRANS.USER "L#10":; *15
PRINT " ":TRANS.MENU "R#7":" ":TRANS.OPT "L#5":" ":; *15
PRINT " ":TRANS.TOPIC "L#15"; *15
*
SYS.LOCT<1> = "COMMENT"
SYS.SLOC<1> = "LOCATE"
CONT1 = 1
VAL = ""
TEMP = ""
*#PRINT "[=| ":SPACE(20):RVB:"Comments and notes made............ " "L#45":" |=]":RVE
USER.UPD(20) = 1
TIME.CN = 0
!
SYS.SLOC<1> = "DISP"
DISP.VAL = TRIM(PSD.STEP.REC<1,3,PSD.TRANS>)
LOOP WHILE DISP.VAL[1,1] EQ "*" DO DISP.VAL = DISP.VAL[2,9999] REPEAT
TIME.CN.MAX = COUNT(DISP.VAL,"*")
IF TIME.CN.MAX GT 1 THEN
PRINT SPACE(20):RVB:"[=| ":"Comments and notes made............ " "L#45":" |=]":RVE
END
VAL = DISP.VAL
LOOP
TIME.CN = TIME.CN + 1
DISP.PR = FIELD(DISP.VAL,"*",TIME.CN)
WHILE TIME.CN < TIME.CN.MAX DO
PRINT SPACE(20):DISP.PR "L#55"
TEMP = LEN(DISP.PR)
IF TEMP > 55 THEN
PRINT SPACE(25):DISP.PR[56,999] "L#50"
END
REPEAT
*PRINT
*PRINT
*
WHILE PSD.TRANS < MAX.TRANS DO REPEAT
PRINT ("Step total: ":REP.TOTALS(5,1):" days ":OCONV(REP.TOTALS(5,2),"MTS")) "R#55"
REP.TOTALS(4,1) = REP.TOTALS(4,1) + REP.TOTALS(5,1)
REP.TOTALS(4,2) = REP.TOTALS(4,2) + REP.TOTALS(5,2)
REP.TOTALS(4,1) = REP.TOTALS(4,1) + INT(REP.TOTALS(4,2)/AVG.DAY)
REP.TOTALS(4,2) = REP.TOTALS(4,2) - INT(REP.TOTALS(4,2)/AVG.DAY)*AVG.DAY
REP.TOTALS(5,1) = 0; REP.TOTALS(5,2) = 0
END; * OF MAX.TRANS
*
END; *# OF PSD.STEP.REC NE ""
WHILE PSD.STEP < MAX.STEP DO REPEAT
END; *# OF MAX.STEP
PRINT ("Period Total for Task: ":REP.TOTALS(4,1):" days ":OCONV(REP.TOTALS(4,2),"MTS")) "R#55"
REP.TOTALS(3,1) = REP.TOTALS(3,1) + REP.TOTALS(4,1)
REP.TOTALS(3,2) = REP.TOTALS(3,2) + REP.TOTALS(4,2)
REP.TOTALS(3,1) = REP.TOTALS(3,1) + INT(REP.TOTALS(3,2)/AVG.DAY)
REP.TOTALS(3,2) = REP.TOTALS(3,2) - INT(REP.TOTALS(3,2)/AVG.DAY)*AVG.DAY
REP.TOTALS(4,1) = 0; REP.TOTALS(4,2) = 0
*
END; *#    END OF SAME.TASK
*
*
RETURN
*
!
*
END.OF.PROG: ****
*
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
CALL.FUNCTION = DELETE(CALL.FUNCTION,1)
CALL.SUB.FUNCTION = DELETE(CALL.SUB.FUNCTION,1)
SYS.FILE = ""
SYS.ITEM = ""
*
RETURN; * from gosub...
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~SYS.TOPIC~
SUBROUTINE SYS.TOPIC
!
$INCLUDE IBP SYS.COMMON
*
$INCLUDE IBP STANDARD.FUNCTIONS
*
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.END.RSP
*
SYS.PROG = "SYS.TOPIC":AM:SYS.PROG; *#
SYS.PROG.TYPE = 9
EQ.PROG.STATUS = TRUE
SYS.LOCT = "INIT":AM:SYS.LOCT; *#
SYS.SLOC = "DIM":AM:SYS.SLOC; *#
*
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
*
*$INCLUDE SYS.INCL.STAT.LINE
*
*
*
DIM TOPIC.PR(10)
MAT TOPIC.PR = ""
TOPIC = ""
TOPIC.RSP = ""
TEMP = FIELD(PRMPTING," ",1)
PRMPTING = TRIM(PRMPTING[COL2()+1,999])
SUBR.FUNCTION = ""
P.ENT = 0
OUT.TO.PRINT = 0
TOPIC.CONT = 1; TOPIC.CONT1 = 1
TOPIC.INCR = 12
IF OUT.TO.PRINT NE 1 THEN TOPIC.INCR = 12 ELSE
TOPIC.INCR = 50
END
TOPIC.CN   = 0; TOPIC.STOP  = TOPIC.INCR
*
SYS.SLOC<1> = "READ"
*$INCLUDE SYS.INCL.STAT.LINE
*
TEMP.TASK = TASK.NUM
IF LEN(TEMP.TASK) < 5 THEN TEMP.TASK = STR("0",5-LEN(TEMP.TASK)):TEMP.TASK
*IF CALL.SUB.FUNCTION = 2 THEN
TOPIC.ATT = 1
*END ELSE
*TOPIC.ATT = TASK.STEP + 1
*IF TOPIC.ATT < 2 THEN TOPIC.ATT = 2
*END
TOPIC.ID = "@T@":STRUCT(29)<1,PORT+1>:"@":MENU.APPL:"@":TEMP.TASK
READV TOPIC.REC FROM PS.FILE,TOPIC.ID,TOPIC.ATT ELSE
TOPIC.ID = "@T@":STRUCT(2):"@":MENU.APPL:"@":TEMP.TASK
READ TOPIC.REC FROM PS.FILE,TOPIC.ID THEN
WRITE TOPIC.REC ON PS.FILE,"@T@":STRUCT(29)<1,PORT+1>:"@":MENU.APPL:"@":TEMP.TASK
DELETE PS.FILE,TOPIC.ID
PRINT BELL:"*cc*":
TOPIC.REC = TOPIC.REC<TOPIC.ATT>
END ELSE
TOPIC.REC = ""
END
END
*
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "SUBR"
*PRINT @(0,7):
*CLS.LO = 7
*CLS.HI = 20
*GOSUB SYS.CLEAR.PAGE.MID
*# CLS:
*
LOOP
*$INCLUDE SYS.INCL.STAT.LINE
IF CALL.FUNCTION<1> = "MENU" OR OUT.TO.PRINT THEN GOSUB Topic.menu
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "SUBR"
*
IF NOT(OUT.TO.PRINT) THEN
IF NOT(NUM(TOPIC.RSP)) OR NOT(LEN(TOPIC.RSP)) OR LEN(PRMPTING) THEN
IF TOPIC.RSP # "END" AND (CALL.FUNCTION<1> = "MENU" OR CALL.FUNCTION<1> = "INPUT") THEN
GOSUB Topic.input
END
END
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "SUBR"
*
IF CALL.FUNCTION<1> = "MENU" OR CALL.FUNCTION<1> = "INPUT" THEN GOSUB Topic.key.format
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "SUBR"
*
IF CALL.FUNCTION<1> = "MENU" OR CALL.FUNCTION<1> = "INPUT" OR CALL.FUNCTION<1> = "DISPLAY" THEN GOSUB Topic.display
SYS.LOCT<1> = "MAIN"; SYS.SLOC<1> = "SUBR"
END
*
WHILE (CALL.FUNCTION<1> = "MENU" AND TOPIC.RSP # "END") OR OUT.TO.PRINT DO REPEAT
*
CALL.FUNCTION = DELETE(CALL.FUNCTION,1)
CALL.SUB.FUNCTION = DELETE(CALL.SUB.FUNCTION,1)
SYS.PROG = DELETE(SYS.PROG,1)
SYS.LOCT = DELETE(SYS.LOCT,1)
SYS.SLOC = DELETE(SYS.SLOC,1)
SYS.FILE = ""
SYS.ITEM = ""
RETURN
!
Topic.menu: * Main program.
SYS.LOCT<1> = "MENU"
SYS.SLOC<1> = "DISP"
*$INCLUDE SYS.INCL.STAT.LINE
*
IF P.ENT = 2 THEN
PRINT @(0,21):CLL:STRUCT(2):", should I print this on the printer? ":
YES.NO = ""
INPUT YES.NO:
IF INDEX(YES,"*":YES.NO:"*",1) # 0 THEN
OUT.TO.PRINT = 1
SCR.LINES = 50
END ELSE
OUT.TO.PRINT = 2
SCR.LINES = 20
END
END ELSE
SCR.LINES = 20
SCR.HEADING = "Task Viewing Utility"
OUT.TO.PRINT = ""
IF P.ENT = 1 THEN OUT.TO.PRINT = 2
END
H.T.LINE = 99
TOPIC = ""
*
LOOP
*
IF OUT.TO.PRINT NE 1 THEN TOPIC.INCR = 12 ELSE
TOPIC.INCR = 50
PRINTER ON
END
TOPIC.CONT1 = 1
IF TOPIC.CN GT TOPIC.STOP OR TOPIC.CN LT TOPIC.STOP - TOPIC.INCR + 1 THEN
*
TOPIC.CONT = 1
TOPIC.CN = (INT(TOPIC.STOP/TOPIC.INCR)-1) * TOPIC.INCR + 1
IF TOPIC.CN < 1 THEN TOPIC.CN = 1
*TOPIC.CN = TOPIC.STOP - TOPIC.INCR
*TOPIC.STOP = TOPIC.CN + TOPIC.INCR
SYS.LOCT<1> = "MENU"
SYS.SLOC<1> = "DISP"
*$INCLUDE SYS.INCL.STAT.LINE
IF OUT.TO.PRINT NE 1 THEN
IF TOPIC.CN = 1 OR TOPIC.CN = TOPIC.INCR * 3 + 1 THEN
* PRINT @(0,8):
*# CLS:
*# ELSE PRINT @(0,6):CLL:
CLS.LO = 7
CLS.HI = 20
GOSUB SYS.CLEAR.PAGE.MID
END
*
PRINT @(0,5):RVB:"|":RVE:("Item:  ":TOPIC.ID:", at ":TOPIC.ATT) "L#48":RVB:"|":RVE:
PRINT @(0,6):RVB:"|":RVE:"    ":RVB:"|":RVE:("  User Topics Menu for ":USER.NAME) "L#43":RVB:"|":RVE:
*# PRINT @(45):("Item: ":TOPIC.ID:", at ":TOPIC.ATT) "L#34":
END ELSE
PRINT FF:
PRINT
PRINT "|":"Item: ":TOPIC.ID:", at ":TOPIC.ATT 
PRINT "|":SPACE(4):"|":"User Topics Menu for ":USER.NAME
PRINT
PRINT
END
*
**
*
LOOP
*
WHILE TOPIC.REC<1,TOPIC.CN> # "" AND TOPIC.CONT AND TOPIC.CN <= 100 DO
*IF TOPIC.CN < TOPIC.STOP + 1 THEN
TEMP.CL = INT((TOPIC.CN - 1) / TOPIC.INCR) * 25
IF TEMP.CL > 50 THEN TEMP.CL = TEMP.CL - 75
IF TEMP.CL > 3 THEN TEMP.CL = TEMP.CL - 2
IF TEMP.CL < 0 THEN TEMP.CL = 0
TEMP.CLN = 79 - TEMP.CL
TEMP.CLL = "L#":TEMP.CLN
TEMP.LN = TOPIC.CN - INT((TOPIC.CN - 1) / TOPIC.INCR) * TOPIC.INCR + 6
*END ; *# OF TOPIC.CN < TOPIC.STOP + 1
IF TOPIC.CN < TOPIC.STOP + 1 THEN
IF OUT.TO.PRINT NE 1 THEN
*IF TEMP.CL EQ 0 THEN
PRINT @(TEMP.CL,TEMP.LN):RVB:"|":RVE:CLL:
*END ELSE
*PRINT @(TEMP.CL,TEMP.LN):CLL:
*END
*PRINT (" ":(TOPIC.CN:"-") "R#3":RVB:TOPIC.REC<1,TOPIC.CN>:"  ") TEMP.CLL:"|":RVE:
TEMP1 = " ":(TOPIC.CN:"-") "R#3":RVB:TOPIC.REC<1,TOPIC.CN>:"  "
IF LEN(TEMP1) GT TEMP.CLL THEN TEMP1 = TEMP1[1,TEMP.CLL]
PRINT TEMP1:"|":RVE
END ELSE
PRINT "|  ":(TOPIC.CN:"-") "R#3":
TEMP = TOPIC.REC<1,TOPIC.CN>
TOPIC.CN1 = 1
LOOP
TEMP1 = FIELD(TEMP,"*",TOPIC.CN1)
WHILE LEN(TEMP1) DO
PRINT " . ":TEMP1:
TOPIC.CN1 = TOPIC.CN1 + 1
REPEAT
PRINT
END
TOPIC.CN = TOPIC.CN + 1
END ELSE TOPIC.CONT = 0
REPEAT
PRINT @(0,TOPIC.INCR + 7):RVB:"|":STR("-",78):"|":RVE:
*
END; * OF DISPLAY PAGE
*
SYS.LOCT<1> = "MAINT"
SYS.SLOC<1> = "INPUT"
*$INCLUDE SYS.INCL.STAT.LINE
IF OUT.TO.PRINT NE 1 THEN
IF TOPIC.REC<1,TOPIC.CN> # "" THEN PRINT @(1,6):RVB:"MORE":RVE: ELSE PRINT @(1,6):"----":
PRINT @(0,21):CLL:RVB:"|":RVE:STRUCT(2):', enter "B" for back a page, "N" for next page,':
PRINT ' "D##" to delete a topic,':
PRINT @(0,22):CLL:RVB:"|":RVE:SPACE(5):' a topic number or <CR>, or "END"  to end . . .':
INPUT TOPIC.RSP:
END ELSE TOPIC.RSP = 'N'
SYS.SLOC<1> = FIELD(TOPIC.RSP[1,5]," ",1)
*$INCLUDE SYS.INCL.STAT.LINE
*
IF TOPIC.RSP = "END" THEN
TOPIC.CONT = 0; TOPIC.CONT1 = 0
*
END ELSE IF TOPIC.RSP = "B" THEN
IF TOPIC.STOP GT TOPIC.INCR THEN
TOPIC.STOP = TOPIC.STOP - TOPIC.INCR
*#TOPIC.CN = TOPIC.STOP - TOPIC.INCR + 1
TOPIC.CN = 0; *#
END ELSE
PRINT "!":
TOPIC.STOP = TOPIC.INCR
*# TOPIC.CN = 1
TOPIC.CN = 0; *#
END
TOPIC.CONT = 1
*
END ELSE IF TOPIC.RSP = "N" THEN
IF TOPIC.STOP LT 100 AND TOPIC.REC<1,TOPIC.STOP + 1> NE "" THEN
TOPIC.STOP = TOPIC.STOP + TOPIC.INCR
*# TOPIC.CN = TOPIC.STOP - TOPIC.INCR + 1
TOPIC.CN = 0; *#
END ELSE
PRINT "!":
TOPIC.STOP = TOPIC.INCR
*# TOPIC.CN = 1
TOPIC.CN = 0; *#
IF OUT.TO.PRINT = 1 THEN
TOPIC.CONT1 = 0
TOPIC.CONT = 0
*#OUT.TO.PRINT = 0
P.ENT = 0
END
END
IF TOPIC.CONT1 THEN TOPIC.CONT = 1
*
END ELSE IF LEN(TOPIC.RSP) = 0 THEN
TOPIC.CONT1 = 0
*
END ELSE IF TOPIC.RSP MATCHES '"D"0N' THEN
TOPIC.CN = TOPIC.RSP[2,99]
IF NUM(TOPIC.CN) THEN
TOPIC.REC = DELETE(TOPIC.REC,1,TOPIC.CN)
TOPIC.ID = "@T@":STRUCT(29)<1,PORT+1>:"@":MENU.APPL:"@":TEMP.TASK
WRITEV TOPIC.REC ON PS.FILE,TOPIC.ID,TOPIC.ATT
ERROR.TEXT = "Deleted # ":TOPIC.CN
END ELSE
ERROR.TEXT = "Your choice for deletion was non numeric"
END
*#ERROR.CODE = 17010
*#GOSUB ERROR.CONTROL
PRINT @(40,23):" ":CLL:RVB:ERROR.TEXT "L#38":RVE:
*# TOPIC.STOP = TOPIC.INCR
*# TOPIC.CN = 1
TOPIC.CN = 0; *#
TOPIC.CONT = 1
*
END ELSE IF NUM(TOPIC.RSP) THEN
IF TOPIC.RSP > 0 AND TOPIC.RSP < 100 AND LEN(TOPIC.REC<1,TOPIC.RSP>) > 0  THEN
TOPIC = TOPIC.REC<1,TOPIC.RSP>
SUBR.FUNCTION = "FORMAT"
TOPIC.CONT1 = 0
*TOPIC.RSP = "END"
END
*
END ELSE IF TOPIC.RSP = "PRINT" THEN
P.ENT = 2
OUT.TO.PRINT = 2
TOPIC.CONT = 0
TOPIC.CONT1 = 0
*
END ELSE
ERROR.TEXT = "that was an invalid entry"
*#ERROR.CODE = 14011
*#GOSUB ERROR.CONTROL
PRINT @(40,23):" ":CLL:RVB:ERROR.TEXT "L#38":RVE:
END
WHILE TOPIC.CONT1 DO REPEAT
*
IF OUT.TO.PRINT AND P.ENT = 0 THEN
OUT.TO.PRINT = 0
PRINTER OFF
PRINTER CLOSE
END
RETURN
!
*
Topic.input: * Subroutine.
*
SYS.SLOC<1> = "INPUT"
$INCLUDE IBP SYS.INCL.STAT.LINE
IF OUT.TO.PRINT EQ 1 THEN PRINTER OFF
IF MENU.CONTROL<1,2,1> > 0 AND (PRMPTING = "TOPIC" OR LEN(TOPIC) = 0) THEN
IF PRMPTING # "TOPIC" AND CALL.FUNCTION<1> # "DISPLAY" THEN PRINT "!":
TOPIC.CONT = 1
TP.MAXL = 0
TOPIC.CN.WRK = 0
TP.CL = 50
NEW.TOPIC = ""
LOOP
TOPIC.CN.WRK = TOPIC.CN.WRK + 1
TP.TEST = MENU.CONTROL<1,2,TOPIC.CN.WRK>
IF TP.TEST = "" OR TP.TEST = " " OR TP.TEST = 0 THEN TOPIC.CONT = 0
WHILE TOPIC.CONT DO
IF LEN(TOPIC) = 0 THEN
MW.OLD = FIELD(TOPIC.KEY,"#",TOPIC.CN.WRK)
END ELSE
MW.OLD = FIELD(TOPIC,"*",TOPIC.CN.WRK)
END
PRINT @(TP.CL,TOPIC.CN.WRK + 2):CLL:RVB:"|":RVE:MENU.CONTROL<1,3,TOPIC.CN.WRK>:" ":MW.OLD:
PRINT @(TP.CL + 2 + LEN(MENU.CONTROL<1,3,TOPIC.CN.WRK>),TOPIC.CN.WRK + 2):
TOPIC.WRK = ""
IF CALL.FUNCTION<1> # "DISPLAY" THEN
IF NOT(LEN(PRMPTING)) THEN
INPUT TOPIC.WRK:
END ELSE
TOPIC.WRK = FIELD(PRMPTING," ",1)
PRMPTING = PRMPTING[COL2()+1,999]
END
END
IF LEN(TOPIC.WRK) = 0 THEN TOPIC.WRK = MW.OLD
IF TOPIC.WRK = "/" THEN TOPIC.WRK = ""
IF LEN(TOPIC.WRK) = 0 THEN TOPIC.WRK = " "
IF TOPIC.WRK = "^" THEN
IF TOPIC.CN.WRK > 2 THEN TOPIC.CN.WRK = TOPIC.CN.WRK - 2 ELSE TOPIC.CN.WRK = 0
END ELSE
IF TOPIC.CN.WRK > 1 THEN NEW.TOPIC = NEW.TOPIC:"*"
NEW.TOPIC = NEW.TOPIC:TOPIC.WRK
PRINT @(TP.CL + 2 + LEN(MENU.CONTROL<1,3,TOPIC.CN.WRK>),TOPIC.CN.WRK + 2):TOPIC.WRK:
END
REPEAT
IF TOPIC.CN.WRK > 2 THEN PRINT @(60,TOPIC.CN.WRK + 2):CLL:RVB:STR("-",19):RVE:
*
TOPIC = NEW.TOPIC
END
*
SYS.SLOC<1> = "VRIFY"
*$INCLUDE SYS.INCL.STAT.LINE
TOPIC.FOUND = 1
LOCATE(TOPIC,TOPIC.REC,1,0;TOPIC.LOC;"AL") ELSE TOPIC.FOUND = 0
TOPIC.STOP = INT((TOPIC.LOC+TOPIC.INCR-1)/TOPIC.INCR) * TOPIC.INCR
***TOPIC.CN = 0; *#
TOPIC.CN = TOPIC.LOC
IF NOT(TOPIC.FOUND) THEN
PRINT @(0,21):CLL:
IF CALL.FUNCTION<1> # "DISPLAY" THEN
PRINT "Add this Topic? ":
YES.NO = ""
INPUT YES.NO:
IF INDEX(YES,"*":YES.NO:"*",1) # 0 THEN
TOPIC.REC = INSERT(TOPIC.REC,1,TOPIC.LOC;TOPIC)
TOPIC.ID = "@T@":STRUCT(29)<1,PORT+1>:"@":MENU.APPL:"@":TEMP.TASK
WRITEV TOPIC.REC ON PS.FILE,TOPIC.ID,TOPIC.ATT
PRINT @(60,23):" ":RVB:"Topic added." "L#18":RVE:
TOPIC.STOP = INT((TOPIC.LOC+TOPIC.INCR-1)/TOPIC.INCR) * TOPIC.INCR
TOPIC.CN = 0; *#
END ELSE PRINT @(60,23):" ":RVB:"Topic not added." "L#18":RVE:
END ELSE PRINT @(60,23):" ":RVB:"Topic not on file here." "L#18":RVE:
END
*
SUBR.FUNCTION = "FORMAT"
*
IF OUT.TO.PRINT EQ 1 THEN PRINTER ON
*
RETURN
!
Topic.key.format: * Subroutine to format Topic 1#2#3#4...
*
SYS.SLOC<1> = "FRMAT"
*$INCLUDE SYS.INCL.STAT.LINE
IF SUBR.FUNCTION = "FORMAT" THEN TOPIC.KEY = ""
MAT TOPIC.PR = ""
TP.MAXL = 0
TOPIC.CONT = 1
TOPIC.CN.WRK = 0
*
LOOP
TOPIC.CN.WRK = TOPIC.CN.WRK + 1
TP.TEST = MENU.CONTROL<1,2,TOPIC.CN.WRK>
IF TP.TEST = "" OR TP.TEST = " " OR TP.TEST = 0 THEN TOPIC.CONT = 0
*
WHILE TOPIC.CONT DO
IF SUBR.FUNCTION = "FORMAT" THEN
IF TOPIC.CN.WRK > 1 THEN TOPIC.KEY = TOPIC.KEY:"#"
TOPIC.WRK = FIELD(TOPIC,"*",TOPIC.CN.WRK)
TOPIC.KEY = TOPIC.KEY:TOPIC.WRK
END ELSE TOPIC.WRK = FIELD(TOPIC.KEY,"#",TOPIC.CN.WRK)
*
TP.PR = MENU.CONTROL<1,3,TOPIC.CN.WRK>:" ":TOPIC.WRK
IF LEN(TP.PR) > TP.MAXL THEN TP.MAXL = LEN(TP.PR)
TOPIC.PR(TOPIC.CN.WRK) = TP.PR
REPEAT
*
IF SUBR.FUNCTION = "FORMAT" THEN
STRUCT(34)<1,PORT+1> = TOPIC.KEY
USER.UPD(2) = 1
END
*
RETURN
!
Topic.display: * Subrouting to display Topic.
*
SYS.LOCT<1> = "DISP"
SYS.SLOC<1> = "TOPIC"
SUBR.FUNCTION = "DISPLAY"
*$INCLUDE SYS.INCL.STAT.LINE
IF CALL.FUNCTION<1> = "DISPLAY" THEN GOSUB Topic.key.format
SYS.SLOC<1> = "INIT"
*PRINT @(40,3):CLL:
TP.CL = (79 - (TP.MAXL + 2))
IF TP.CL > 50 THEN TP.CL = 50
TOPIC.CONT = 1
TOPIC.CN.WRK = 0
LOOP
SYS.SLOC<1> = "LOOP"
TOPIC.CN.WRK = TOPIC.CN.WRK + 1
TP.TEST = MENU.CONTROL<1,2,TOPIC.CN.WRK>
IF TP.TEST = "" OR TP.TEST = " " OR TP.TEST = 0 THEN TOPIC.CONT = 0
WHILE TOPIC.CONT DO
IF OUT.TO.PRINT NE 1 THEN
PRINT @(TP.CL,TOPIC.CN.WRK + 2):RVB:"|":RVE:
END ELSE
PRINT SPACE(TP.CL):"|":
END
TEMP = "L#":(78-TP.CL)
PRINT TOPIC.PR(TOPIC.CN.WRK) TEMP:RVB:"|":RVE:
IF OUT.TO.PRINT EQ 1 THEN PRINT
REPEAT
IF OUT.TO.PRINT NE 1 THEN
PRINT @(TP.CL,TOPIC.CN.WRK + 2):RVB:
END ELSE
PRINT SPACE(TP.CL):
END
PRINT "|":STR("-",78-TP.CL):"|":
IF OUT.TO.PRINT NE 1 THEN
PRINT RVE:
END ELSE
PRINT
END
RETURN
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
END
~TCL.SCHEDULE~
*PROGRAM: TCL.SCHEDULE
*# 870630 DGH
$INCLUDE IBP SYS.COMMON
TERMINAL = "?"
$INCLUDE IBP STANDARD.FUNCTIONS
*
DIM MENU(25), MODE.DESC(30), STAT.DESC(15), SLOC(25), PRMPT(25)
*
$INCLUDE IBP SYS.INCL.USER.MODE.DESC
$INCLUDE IBP SYS.INCL.STATUS.CHECK
$INCLUDE IBP SYS.INCL.STATUS.DESC
$INCLUDE IBP SYS.INCL.LO.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.DEV.MODE
$INCLUDE IBP SYS.INCL.HI.SALES.MODE
$INCLUDE IBP SYS.INCL.LO.TCL.MODE
$INCLUDE IBP SYS.INCL.LO.TRAIN.MODE
$INCLUDE IBP SYS.INCL.HI.TRAIN.MODE
*
SYS.PROG.DESC = "Daily Schedule - TCL"
SYS.PROG = "TCL.SCHEDULE"
SYS.LOCT = "INIT"
SYS.SLOC = "ERROR.CONTROL"
*
$INCLUDE IBP SYS.INCL.OFF.RSP
$INCLUDE IBP SYS.INCL.END.RSP
$INCLUDE IBP SYS.INCL.TCL.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP
$INCLUDE IBP SYS.INCL.SYS.RSP.SYNONYM
$INCLUDE IBP SYS.INCL.DEB.RSP
*
*
USER.NAME = ""
FUNCTION = ""; SUB.FUNCTION = ""
SUBR.FUNCTION = ""; SUBR.SUB.FUNCTION = ""
CALL.FUNCTION = ""; CALL.SUB.FUNCTION = ""
MENU.CONTROL = ""
MENU.NAME = ""; MENU.CONTROL<1,9> = 1; MENU.APPL = "LOGON"; MENU.SUB.APPL = ""
MENU.GRP.APPL = ""; PRMPTING = ""; TOPIC.KEY = ""; MAT STRUCT = ""
STRUCT(1) = 0; STRUCT(2) = ""; WAIT.FLAG = 1
ERROR.CODE=""
ERROR.TEXT=""
!
SYS.SLOC<1> = "FILES"
SYS.FILE = "SYS"
OPEN "SYS" TO SY.FILE ELSE
ERROR.TEXT = ERROR.TEXT:"No SYS file":AM
ERROR.CODE = ERROR.CODE:"11111":AM
GOSUB ERROR.CONTROL
END
*
SYS.FILE = "MENUS"
OPEN "MENUS" TO MU.FILE ELSE
ERROR.TEXT = ERROR.TEXT:"No MENUS file":AM
ERROR.CODE = ERROR.CODE:"11111":AM
GOSUB ERROR.CONTROL
END
*
CHECK.MAIL = 0
*
SYS.FILE = "HLP"
OPEN "HLP" TO HLP.FILE THEN CHECK.HELP = 1 ELSE
CHECK.HELP = 0
ERROR.TEXT = ERROR.TEST:"No HLP file":AM
ERROR.CODE = ERROR.CODE:"13111":AM
GOSUB ERROR.CONTROL
END
*
SYS.FILE = "PSD"
OPEN "PSD" TO PS.FILE THEN CHECK.TIME = 2 ELSE
CHECK.TIME = 0
ERROR.TEXT = ERROR.TEXT:"No PSD file":AM
ERROR.CODE = ERROR.CODE:"13111":AM
GOSUB ERROR.CONTROL
END
*
SYS.FILE = "ACC"
OPEN "ACC" TO AC.FILE ELSE
ERROR.CODE = ERROR.TEXT:"No ACC file":AM
ERROR.CODE = ERROR.CODE:"11111":AM
GOSUB ERROR.CONTROL
END
*
*
SYS.SLOC<1> = "TABLES"
SYS.FILE = "ACC"
SYS11.ELP = 0; USER.FLAG = 1
CALL.ID = "MENU.":PORT
SYS.ITEM = CALL.ID
READV USER.NAME FROM AC.FILE,CALL.ID,2 ELSE USER.NAME = ""; USER.FLAG = 0
IF USER.NAME[1,1] = "/" ! USER.NAME[1,7] = "CALL-PL" THEN
DELETE AC.FILE,CALL.ID
USER.NAME = ""
USER.FLAG = 0
END
*
MENU.NAME = ""
*
*
SYS.FILE = "SYS"
SYS.ITEM = "@SYS@PORT@":PORT
READ PORTD FROM SY.FILE,SYS.ITEM ELSE
PORTD = ""
PORTD<5> = "R"
END
*
*
*
SYS.SLOC<1> = "USER"
MAT USER.UPD = 0
USER.LOCKED = 0; USER.ABORT = 0; SYS.ABORT = 0
IF PORTD<5> # "D" THEN PRINT @(0,5):CLS:
*
CALL.FUNCTION = "LOGON"; CALL.SUB.FUNCTION = "READ"
SYS.FILE = 'SYS'; SYS.ITEM = '@SYS@USER@':USER.NAME
CALL SYS.USER.LOAD
**
IF USER.ABORT ! SYS.ABORT THEN
IF PORTD<5> # "D" THEN PRINT BELL:" ABORT!":
STOP
END
WRITEV USER.NAME ON AC.FILE,CALL.ID,2
*
$INCLUDE IBP SYS.INCL.COMPANY.READ
*
*
*SYS.FILE = "SYS"
*SYS.ITEM = "@SYS@MENU-STACK@":USER.NAME
*READV MENU.PREV FROM SY.FILE,SYS.ITEM,PORT+1 ELSE MENU.PREV = "/"
**
*GOSUB RECORD.TIME
*IF OFF.FLAG THEN PRMPTING = "OFF"
*IF TCL.FLAG THEN PRMPTING = "TCL"
*OFF.FLAG = 0
**
*
*
!
SCHEDULE.CALL: * subroutine to call daily schedule
SYS.SLOC<1> = "SCHEDULE"
LOOP
LCK.STAT = 0
SYS.FILE = "SYS"; SYS.ITEM = "@SYS@USER@":USER.NAME
CALL SYS.LOCK.ITEM
WHILE LCK.STAT # PORT+1 AND LCK.STAT < 9000 DO REPEAT
*
IF LCK.STAT = PORT+1 THEN
READV TEMP FROM SY.FILE,SYS.ITEM,70 ELSE TEMP = 0
STRUCT(70) = TEMP
LCK.STAT = 0
CALL SYS.UNLOCK.ITEM
*
IF TEMP # PORT+1 AND TEMP > 0 THEN
ERROR.TEXT = "you are using the scheduler on PORT ":STRUCT(70)-1
ERROR.CODE = "15100"
GOSUB ERROR.CONTROL
END ELSE
*
IF CHECK.TIME THEN CHECK.TIME = 9; GOSUB RECORD.TIME
USER.UPD(2) = 1
PRMPTING = SYS.SLOC<1>
CALL.FUNCTION<1> = "MENU"
CALL.SUB.FUNCTION<1> = "UPDATE"
GOSUB RECORD.USER.CALL
CALL.FUNCTION<1> = "SCHEDULE"
TEMP = FIELD(CALL.FUNCTION<1>," ",1)
*CALL.SUB.FUNCTION<1> = FIELD(RSP," ",2)
CALL.SUB.FUNCTION<1> = "DAILY"
SCH.FLAG = 5
*
IF TEMP = "SCHEDULE" AND SCH.FLAG AND SCH.FLAG < 6 THEN
IF LEN(CALL.SUB.FUNCTION<1>) = 0 THEN CALL.SUB.FUNCTION<1> = "DAILY"
IF CALL.SUB.FUNCTION<1> = "LOAD" THEN
CALL SYS.SCHED.LOAD
END ELSE
CALL SYS.SCHEDULE
END
*
END ELSE IF TEMP = "STEP" THEN
CALL SYS.STEP
*
END ELSE
CALL SYS.SPTM.STRUCT
END
*
*#RSP = MENU.NAME
*#RSP = ""
PRMPTING = ""
*#CALL.FUNCTION<1> = "MENU"
*#CALL.SUB.FUNCTION<1> = "UPDATE"
*#GOSUB RECORD.USER.CALL
*#PRMPTING = ""
END
*#RSP = MENU.NAME
*#RSP = ""
END
*#RETURN
*
SYS.SLOC<1> = "LOG.OUT.OF.MENU"
CALL.FUNCTION = "LOG":EXEC.VERB:AM:CALL.FUNCTION
CALL.SUB.FUNCTION = "UPDATE":AM:CALL.SUB.FUNCTION
IF CHECK.TIME THEN CHECK.TIME = 8; GOSUB RECORD.TIME
MAT USER.UPD = 1
PRMPTING = EXEC.VERB; RSP = EXEC.VERB
GOSUB RECORD.USER.CALL
*
*
GOTO END.OF.PROGRAM
*#
*#
STOP
*
*
$INCLUDE IBP SYS.ERROR.STRUCT
*
$INCLUDE IBP SYS.SCHED.UPD
*
$INCLUDE IBP SYS.INCL.RECORD.TIME
*
$INCLUDE IBP SYS.INCL.RECORD.USER.CALL
*
!
*
END.OF.PROGRAM: * Normal End
*
*
END
