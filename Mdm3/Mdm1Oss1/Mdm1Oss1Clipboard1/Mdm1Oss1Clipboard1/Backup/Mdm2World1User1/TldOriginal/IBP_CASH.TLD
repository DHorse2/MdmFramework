~CASH.INCL.BATCH.CNTRL~
*CODE.SEGMENT: CASH.INCL.BATCH.CNTRL
*FROM.LIST,BATCH.CLASS.CURR.DESC,BATCH.SOURCE.CURR.DESC,XTR.ID.PREF,XTR.ID.FUNC,BATCH.TYPE,CLASS.CN.MAX,STAT,AUTO.RUN,PHAN.RUN,
*
*
*
CLASS.CN.MAX = ONE
*
BEGIN CASE
*
CASE FROM.LIST
BATCH.CLASS.CURR.DESC = "Mixed"; XTR.ID.PREF = "OTH"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ZERO; CLASS.CN.MAX = ONE
*
CASE BATCH.CLASS.CURR EQ ZERO
BATCH.CLASS.CURR.DESC = "Adjustment"; XTR.ID.PREF = "ADJ"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ZERO; CLASS.CN.MAX = TWO
*
CASE BATCH.CLASS.CURR EQ ONE
BATCH.CLASS.CURR.DESC = "Payment"; XTR.ID.PREF = "PMT"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ONE; CLASS.CN.MAX = TWO
*
CASE BATCH.CLASS.CURR EQ TWO
BATCH.CLASS.CURR.DESC = "Deposit"; XTR.ID.PREF = "DEP"; XTR.ID.FUNC = "POST"
BATCH.TYPE = TWO; CLASS.CN.MAX = ONE
*
CASE BATCH.CLASS.CURR EQ 3
BATCH.CLASS.CURR.DESC = "Billing"; XTR.ID.PREF = "BIL"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ONE; CLASS.CN.MAX = TWO
*
CASE TRUE
PRINT CLB:"A Batch Class was not specified. ":; XTR.ID.PREF = "UNKNOWN"; XTR.ID.FUNC = "UNKNOWN"
BATCH.TYPE = ZERO; CLASS.CN.MAX = ZERO
STAT = 100
IF NOT(AUTO.RUN OR PHAN.RUN) THEN PRINT "Enter <cr> . . . ":; INPUT TMP:
*
*
END CASE
*
!
*
BEGIN CASE
*
CASE FROM.LIST
BATCH.SOURCE.CURR.DESC = "Mixed"
*XTR.ID.PREF = "???"; XTR.ID.FUNC = "????"
BATCH.TYPE = ZERO; CLASS.CN.MAX = ONE
*
CASE BATCH.SOURCE.CURR EQ ZERO
BATCH.SOURCE.CURR.DESC = "Delivered"; *****?????*****
*BATCH.SOURCE.CURR.DESC = "Delivered ":BATCH.CLASS.CURR.DESC
*XTR.ID.PREF = "???"; XTR.ID.FUNC = "????"
BATCH.TYPE = ZERO; CLASS.CN.MAX = TWO
*
CASE BATCH.SOURCE.CURR EQ 3
BATCH.SOURCE.CURR.DESC = "Counter"; XTR.ID.PREF = "CTR"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ONE; CLASS.CN.MAX = ONE
*
CASE BATCH.SOURCE.CURR EQ 4
BATCH.SOURCE.CURR.DESC = "Imported"; XTR.ID.PREF = "XTR"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ONE; CLASS.CN.MAX = TWO
*
CASE BATCH.SOURCE.CURR EQ 5
BATCH.SOURCE.CURR.DESC = "Pay-Per-View"; XTR.ID.PREF = "XPV"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ZERO; CLASS.CN.MAX = TWO
*
CASE BATCH.SOURCE.CURR EQ 6
BATCH.SOURCE.CURR.DESC = "Late Charges"; XTR.ID.PREF = "LCH"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ZERO; CLASS.CN.MAX = TWO
*
CASE BATCH.SOURCE.CURR EQ 7
BATCH.SOURCE.CURR.DESC = "Write Offs"; XTR.ID.PREF = "WRO"; XTR.ID.FUNC = "POST"
BATCH.TYPE = ZERO; CLASS.CN.MAX = TWO
*
CASE TRUE
PRINT CLB:"A Batch Source was not specified. ":; XTR.ID.PREF = "UNKNOWN"; XTR.ID.FUNC = "UNKNOWN"
BATCH.TYPE = ZERO; CLASS.CN.MAX = ZERO
STAT = 101
IF NOT(AUTO.RUN OR PHAN.RUN) THEN PRINT "Enter <cr> . . . ":; INPUT TMP:
*
END CASE
*
~CASH.INCL.BATCH.DESC~
*CODE.SEGMENT: CASH.INCL.BATCH.DESC
*
*
*
BEGIN CASE
*
CASE BATCH.STATUS EQ "P" OR BATCH.STATUS EQ "Z"
BATCH.STATUS.DESC = "Posted"
CASE BATCH.STATUS EQ "B"
BATCH.STATUS.DESC = "In Balance"
CASE BATCH.STATUS EQ "U"
BATCH.STATUS.DESC = "Out of balance"
CASE BATCH.STATUS EQ "H"
BATCH.STATUS.DESC = "On Hold"
CASE BATCH.STATUS EQ "C"
BATCH.STATUS.DESC = "Pending"
CASE BATCH.STATUS EQ "D"
BATCH.STATUS.DESC = "Applied to Acct"
CASE BATCH.STATUS EQ "E" OR BATCH.STATUS EQ "R"
BATCH.STATUS.DESC = "Contains Errors"
CASE TRUE
BATCH.STATUS.DESC = "Unknown Status"
END CASE
*
~CASH.INCL.BATCH.TYPE~
*CODE.SEGMENT: CASH.INCL.BATCH.TYPE 
* MAX.DESC,DESC.LEN,INPUT.DESC,BATCH.CLASS.CURR,TITLE,TRANS.CLASS,TRANS.SUB.CLASS,TRANS.ITEM,BATCH.SOURCE.CURR,STAT
* VERSION: 940127 1.1  ADDED LATE CHARGES, ENTRY TYPE 4, SOURCE 6
* PRIOR: 910630 1.0  Set field based on entry type - cash.or.adj.entry
*
* COPYRIGHT        AXION COMPUTER SYSTEMS LTD.
*   1991              ALL RIGHTS RESERVED
*  
* AUTHOR:          DAVID HORSMAN
* DESCRIPTION:     THIS PROGRAM PROCESSES THE XTR BATCHES.
*  
* DATE WRITTEN:    30 JUN 91
* MODIFICATIONS:   DATE       NAME        DESCRIPTION
!  
*
MAX.DESC = 2; DESC.LEN = 30; INPUT.DESC = "Y"
*
BEGIN CASE
*
CASE BATCH.CLASS.CURR EQ ZERO
TITLE = "Adjustments"; DFLT.SOURCE = "A"
TRANS.CLASS = "a"; TRANS.SUB.CLASS = EMPTY
TRANS.ITEM = "TRANS.TYPES.ADJ"
*
CASE BATCH.CLASS.CURR EQ ONE
TITLE = "Payments"; DFLT.SOURCE = "C"
TRANS.CLASS = "p"; TRANS.SUB.CLASS = EMPTY
TRANS.ITEM = "TRANS.TYPES.PMT"
*MAX.DESC = ONE; DESC.LEN = 5; INPUT.DESC = "N"
*
CASE BATCH.CLASS.CURR EQ TWO
TITLE = "Deposits"; DFLT.SOURCE = "D"
TRANS.CLASS = "d"; TRANS.SUB.CLASS = EMPTY
TRANS.ITEM = "TRANS.TYPES.DEP"
*
CASE BATCH.CLASS.CURR EQ 3
TITLE = "Billings"; DFLT.SOURCE = "B"
TRANS.CLASS = 'b'; TRANS.SUB.CLASS = EMPTY
TRANS.ITEM = "TRANS.TYPES.BIL"
*
* JAN 96 **** WHAT FOLLOWS MUST BE WRONG (4 CLASSES ONLY 0-3)
* CASE BATCH.CLASS.CURR EQ 4
* TITLE = "Late Charges"; DFLT.SOURCE = "B"
* TRANS.CLASS = 'a'; TRANS.SUB.CLASS = EMPTY
* TRANS.ITEM = "TRANS.TYPES.ADJ"
*
CASE BATCH.CLASS.CURR EQ 9
TITLE = "All Classes"; DFLT.SOURCE = "C"
TRANS.CLASS = 'p'; TRANS.SUB.CLASS = EMPTY
TRANS.ITEM = "TRANS.TYPES.PMT"
*
CASE TRUE; STAT = 800; DFLT.SOURCE = "?"
*
END CASE
*
*
BEGIN CASE
CASE BATCH.SOURCE.CURR LT "3"
TITLE = "Entered ":TITLE
CASE BATCH.SOURCE.CURR EQ "3"
TITLE = "Counter ":TITLE
CASE BATCH.SOURCE.CURR EQ "4"
TITLE = "Lock Box ":TITLE
CASE BATCH.SOURCE.CURR EQ "5"
TITLE = "Pay-Per-View ":TITLE
CASE BATCH.SOURCE.CURR EQ "6"
TITLE = "Late Chrgs ":TITLE
CASE BATCH.SOURCE.CURR EQ "7"
TITLE = "Write Offs ":TITLE
CASE BATCH.SOURCE.CURR EQ "8"
TITLE = "Generated ":TITLE
CASE BATCH.SOURCE.CURR EQ "9"
TITLE = "All Sources ":TITLE
CASE TRUE
STAT = 999
TITLE = "Unknown ":TITLE
END CASE
*
*
~CASH.INCL.CHECK.BAL~
*CODE.SEGMENT: CASH.INCL.CHECK.BAL
*
*
IF ENTRY.MODE EQ ZERO THEN
PRINT @(69,TWO):OCONV(ENTERED.TOTAL,"MR2ZM") "R#10":
IF ADJUST.TOTAL THEN PRINT @(69,3):OCONV(ADJUST.TOTAL,"MR2ZM") "R#10":
MSG = " ":ITEM.COUNT:" item"; IF ITEM.COUNT - ONE THEN MSG = MSG:"s"
DIFF = BATCH.TOTAL - ENTERED.TOTAL
IF DIFF THEN
IF BATCH.STATUS NE "E" AND BATCH.STATUS NE "R" THEN BATCH.STATUS = "U" ELSE MSG = MSG:" Errors"
MSG = MSG:" - Difference of ":OCONV(DIFF,"MR2M"):" "
END ELSE
IF BATCH.STATUS NE "E" AND BATCH.STATUS NE "R" THEN BATCH.STATUS = "B" ELSE MSG = MSG:" Errors"
MSG = MSG:" - Batch is in balance":" "
END
MSG = STR("*",40 - LEN(MSG) / TWO):MSG:STR("*",40)
PRINT @(ZERO,23):RVB:MSG "L#79":RVE:
END ELSE
IF BATCH.STATUS EQ EMPTY OR BATCH.STATUS EQ "U" THEN BATCH.STATUS = "B"
BATCH.TOTAL = ENTERED.TOTAL
END
*
~CASH.INCL.CLEAR.BATCH~
*CODE.SEGMENT: CASH.INCL.CLEAR.BATCH
*
* COMPANY: Axion Computer System
* Author:  David Horsman
* Date:    20 NOV 91
*
BATCH.TOTAL = ZERO; BATCH.TOTAL.BAD = ZERO
ENTERED.TOTAL = ZERO; ENTERED.TOTAL.BAD = ZERO
ADJUST.TOTAL = ZERO; ADJUST.TOTAL.BAD = ZERO
ITEM.COUNT = ZERO
*
~CASH.INCL.EXT.HDR~
*CODE.SEGMENT: CASH.INCL.EXT.HDR 
* VERSION: 910630 1.0  Extract batch header record - cash.or.adj.entry
*
* COPYRIGHT        AXION COMPUTER SYSTEMS LTD.
*   1991              ALL RIGHTS RESERVED
*  
* AUTHOR:          DAVID HORSMAN
* DESCRIPTION:     THIS PROGRAM PROCESSES THE XTR BATCHES.
*  
* DATE WRITTEN:    30 JUN 91
* MODIFICATIONS:   DATE       NAME        DESCRIPTION
!  
*
BATCH.SOURCE = FIELD(BATCH.HEADER,"*",1)
BATCH.STATUS = FIELD(BATCH.HEADER,"*",2)
ENTRY.DATE = FIELD(BATCH.HEADER,"*",3)
ENTRY.TIME = FIELD(BATCH.HEADER,"*",4)
POST.DATE = FIELD(BATCH.HEADER,"*",5)
POST.TIME = FIELD(BATCH.HEADER,"*",6)
BUS.DATE = FIELD(BATCH.HEADER,"*",7)
EFF.DATE = FIELD(BATCH.HEADER,"*",8)
BATCH.TOTAL = FIELD(BATCH.HEADER,"*",9)
ENTERED.TOTAL = FIELD(BATCH.HEADER,"*",10)
ADJUST.TOTAL = FIELD(BATCH.HEADER,"*",11)
DEFAULT.TYPE = FIELD(BATCH.HEADER,"*",12)
ITEM.COUNT = FIELD(BATCH.HEADER,"*",13)
OPERATOR = FIELD(BATCH.HEADER,"*",14)
BATCH.DEL.STATUS = FIELD(BATCH.HEADER,"*",15)
BATCH.LPT.DT = FIELD(BATCH.HEADER,"*",16)
BATCH.LPT.TM = FIELD(BATCH.HEADER,"*",17)
BATCH.CLASS  = FIELD(BATCH.HEADER,"*",18)
BATCH.INP.SOURCE = FIELD(BATCH.HEADER,"*",19)
BATCH.LST = FIELD(BATCH.HEADER,"*",20)
BATCH.TILL = FIELD(BATCH.HEADER,"*",21)
*
IF BATCH.CLASS THEN BATCH.TOTAL = -BATCH.TOTAL; ENTERED.TOTAL = -ENTERED.TOTAL; ADJUST.TOTAL = -ADJUST.TOTAL
*
~CASH.INCL.IMPRINT~
*CODE.SEGMENT: CASH.INCL.IMPRINT
*
*
!
*
IMPRINT.HEADER: *
*
PRINT @(ZERO,22):CLL:
CALL AUXILLARY.ON(STAT)
PRINT OCONV(BUS.DATE,"D2-")[ONE,5]:BATCH.NUM "R#6":DEFAULT.TYPE "R#3":CR:LF:
CALL AUXILLARY.OFF(STAT)
RETURN
*
!
*
IMPRINT.DETAIL: *
*
PRINT @(ZERO,22):CLL:
CALL AUXILLARY.ON(STAT)
PRINT ACT.ID:CD:OCONV(TRANS<ONE,3>,"MR2ZM") "R#9":CR:LF:
CALL AUXILLARY.OFF(STAT)
RETURN
*
!
*
IMPRINT.TOTAL: *
*
PRINT @(ZERO,22):CLL:
CALL AUXILLARY.ON(STAT)
PRINT "      *":OCONV(ENTERED.TOTAL,"MR2ZM") "R#9":CR:LF:
CALL AUXILLARY.OFF(STAT)
RETURN
*
~CASH.INCL.LCK.APPL~
*CODE.SEGMENT: CASH.INCL.LCK.APPL
*
*
IF LCK.ITM THEN
LCK.DT = DATE(); LCK.TM = TIME()
LOOP
IF NOT(STAT) THEN
LCK.STAT = LCK.TYPE
LCK.ITM.ID = XTR.ID.PREF:".CTL"
CALL LOCK.ITEM(CNT.FILE,"CNT",LCK.ITM.ID,LCK.FILE,LCK.STAT)
IF LCK.STAT THEN
EXECUTE "SLEEP 5"
IF LCK.STAT GT 900 THEN STAT = 999
END
END
WHILE NOT(STAT) AND LCK.STAT DO
DT = DATE(); TM = TIME()
IF ((DT - LCK.DT) * 86400) + (TM - LCK.TM) GT 30 THEN
EXEC.VERB = "BLOCK-PRINT TRANS IN ":ACCT:" ":LCK.ITM.ID:" LOCKED AT ":LCK.STAT:" (P)"
STAT = 999
END
REPEAT
END
*
*
~CASH.INCL.LCK.BATCH~
*CODE.SEGMENT: CASH.INCL.LCK.BATCH
*
* DAVID HORSMAN
*
* 930305
*
*
IF LCK.ITM THEN
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CAJ.FILE,"CAJ",BATCH.NUM,LCK.FILE,LCK.STAT)
IF LCK.STAT EQ 999 AND NOT(STAT) THEN STAT = LCK.STAT
WHILE NOT(STAT) AND LCK.STAT DO REPEAT
END
*
~CASH.INCL.LCK.CNTRL~
*CODE.SEGMENT: CASH.INCL.LCK.CNTRL
*
* Lock Till Info
*
IF LCK.ITM THEN
CNT.CSH.ID = "CASH.CNTRL"
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CNT.FILE,"CNT",CNT.CSH.ID,LCK.FILE,LCK.STAT)
IF LCK.STAT GT 900 AND NOT(STAT) THEN STAT = LCK.STAT
WHILE LCK.STAT AND NOT(STAT) DO REPEAT
END
*
~CASH.INCL.LCK.XTR~
*CODE.SEGMENT: CASH.INCL.LCK.XTR
*
*
IF LCK.ITM THEN
LCK.DT = DATE(); LCK.TM = TIME()
LOOP
IF NOT(STAT) THEN
LCK.STAT = LCK.TYPE
CALL LOCK.ITEM(XTR.FILE,"CNT","XTR.COM.CTL",LCK.FILE,LCK.STAT)
IF LCK.STAT THEN
EXECUTE "SLEEP 5"
IF LCK.STAT GT 900 THEN STAT = 999
END
END
WHILE NOT(STAT) AND LCK.STAT DO
DT = DATE(); TM = TIME()
IF ((DT - LCK.DT) * 86400) + (TM - LCK.TM) GT 15 THEN
EXEC.VERB = "BLOCK-PRINT CASH IN ":ACCT:" XTR LOCKED AT ":LCK.STAT:" (P)"
STAT = 999
END
REPEAT
END
*
*
~CASH.INCL.LOAD.CNTRL~
*CODE.SEGMENT: CASH.INCL.LOAD.CNTRL
*CNT.CSH.ID,MAT CNT.CSH,STAT
*
*
* Load Till Info
*
* 1 - CNT.CSH$PORT             - Ports
* 2 - CNT.CSH$TILL.TYPE        - Till Type
* 3 - CNT.CSH$PORT.USER.VALID  - Users Allowed on this port
* 4 - CNT.CSH$USER.PROMPT      - Prompt For User
* 5 - CNT.CSH$DT.OPEN          - Open Dates
* 6 - CNT.CSH$PORT.USER.CURR   - Current User for this Port
* 7 - CNT.CSH$USER.VALID       - Users allowed to use counter cash
*
* Read Control Record for Counter Cash
*
CNT.CSH.ID = "CASH.CNTRL"
MATREAD CNT.CSH FROM CNT.FILE,CNT.CSH.ID ELSE
IF NOT(PHAN.RUN) THEN PRINT CLB:BELL:"The Cash Control Parameters are missing!":
IF NOT(AUTO.RUN OR PHAN.RUN) THEN PRINT " Enter <cr>: ":; INPUT TMP:
MAT CNT.CSH = EMPTY
STAT = 601
GOTO FINISH
END
*
~CASH.INCL.LOAD.LISTS~
*CODE.SEGMENT: CASH.INCL.LOAD.LISTS
*
*
IF LCK.ITM THEN
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".REG",LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
END
READ XTR.POST.REG FROM CNT.FILE,XTR.ID.PREF:".":XTR.ID.FUNC:".REG" ELSE XTR.POST.REG = EMPTY
*
IF LCK.ITM THEN
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".ERR",LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
END
READ XTR.POST.ERR FROM CNT.FILE,XTR.ID.PREF:".":XTR.ID.FUNC:".ERR" ELSE XTR.POST.ERR = EMPTY
*
IF LCK.ITM THEN
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".OTH",LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
END
READ XTR.POST.OTH FROM CNT.FILE,XTR.ID.PREF:".":XTR.ID.FUNC:".OTH" ELSE XTR.POST.OTH = EMPTY
*
*
~CASH.INCL.NEXT.BATCH~
*CODE.SEGMENT: CASH.INCL.NEXT.BATCH
*
* COMPANY: Axion Computer System
* Author:  David Horsman
* Date:    20 NOV 91
*
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CNT.FILE,"CNT","CASH.BATCH.NUM",LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
IF NOT(LCK.STAT) THEN
READ BATCH.NUM FROM CNT.FILE,"CASH.BATCH.NUM" ELSE BATCH.NUM = ONE
IF ALL.FLAG THEN WRITE BATCH.NUM + ONE ON CNT.FILE,"CASH.BATCH.NUM"
CALL UNLOCK.ITEM(CNT.FILE,"CNT","CASH.BATCH.NUM",LCK.FILE)
END
BATCH.NUM = (BATCH.NUM+100000)[2,5]
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CAJ.FILE,"CAJ",BATCH.NUM,LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
*
~CASH.INCL.OR.ADJ.BG~
*CODE.SEGMENT: CASH.INCL.OR.ADJ.BG
*
*DATE: 20 AUG 91
*
IF ENTRY.MODE EQ ZERO THEN
PRINT @(ZERO,LN.HDR.TOP):CLS:RVB:SCR.CO:RVE:
PRINT @(ZERO,LN.HDR.TOP + ONE):RVB:(" ":TITLE:" Entry") "L#26":" No.":RVE:"     ":RVB:
PRINT " Type ":RVE:SPACE(20):RVB:" Total $":RVE:SPACE(10):RVB:" ":
PRINT @(ZERO,LN.HDR.TOP + TWO):" Bus.date ":RVE:SPACE(9):
PRINT RVB:"  S":RVE:" ":RVB:"s":RVE:" ":RVB:" Per:":RVE:SPACE(5):
***** RVB:"      Entered by ":RVE:SPACE(3):RVB:SPACE(5):"......
PRINT RVB:" Oper:":RVE:SPACE(5):
PRINT RVB:SPACE(14):"Entered $":RVE:SPACE(10):RVB:" ":
PRINT @(ZERO,LN.HDR.TOP + 3):" T#  Account  Customer name" "L#35":"Type  Amount  Description    Adj $" "L#34":RVE:SPACE(10):RVB:" ":RVE:
PRINT @(ZERO,23):RVB:STR("*",79):RVE:
END ELSE
PRINT @(ZERO,LN.HDR.TOP):RVB:" T#  Account  Customer name" "L#35":"Type  Amount  Description    Adj $" "L#45":RVE:
END
*
~CASH.INCL.OR.ADJ.FG~
*CODE.SEGMENT: CASH.INCL.OR.ADJ.FG
~CASH.INCL.OR.ADJ.HDR.FG~
*CODE.SEGMENT: CASH.INCL.OR.ADJ.FG
*
*DATE: 20 AUG 91
*
PRINT @(30,LN.HDR.TOP + ONE):BATCH.NUM:@(69,LN.HDR.TOP + ONE):OCONV(BATCH.TOTAL,"MR2ZM") "R#10":
***PRINT @(10,LN.HDR.TOP + TWO):OCONV(BUS.DATE,"D2"):@(30,LN.HDR.TOP + TWO):ACCTG.PERIOD:@(52,LN.HDR.TOP + TWO):OPERATOR "L#5":@(69,LN.HDR.TOP + TWO):OCONV(ENTERED.TOTAL,"MR2ZM") "R#10":
PRINT @(10,LN.HDR.TOP + TWO):OCONV(BUS.DATE,"D2"):
PRINT @(22,LN.HDR.TOP + TWO):BATCH.SOURCE "L#1":
PRINT @(24,LN.HDR.TOP + TWO):BATCH.INP.SOURCE "L#1":
PRINT @(30,LN.HDR.TOP + TWO):ACCTG.PERIOD "L#5":
PRINT @(41,LN.HDR.TOP + TWO):OPERATOR "L#5"
PRINT @(69,LN.HDR.TOP + TWO):OCONV(ENTERED.TOTAL,"MR2ZM") "R#10":
IF ADJUST.TOTAL THEN PRINT @(69,LN.HDR.TOP + 3):OCONV(ADJUST.TOTAL,"MR2ZM") "R#10":
LOCATE DEFAULT.TYPE IN TRANS.TYPES<ONE> SETTING TMP.LOC THEN
PRINT @(41,LN.HDR.TOP + ONE):TRANS.TYPES<TWO,TMP.LOC> "L#20":
END ELSE NULL
*
~CASH.INCL.OR.ADJ.INIT~
*CODE.SEGMENT: CASH.INCL.OR.ADJ.INIT 
*TITLE,SOURCE,LC.SOURCE,RUN.TRANS.CLASS,TRANS.CLASS,RUN.TRANS.SUB.CLASS,TRANS.SUB.CLASS,RUN.SOURCE,SOURCE,RUN.LC.SOURCE,LC.SOURCE,OPERATORS,TRANS.TYPES,TRANS.TYPES.ADJ,CURR.ACCTG.PERIOD,ACCTG.PERIOD,CURR.ACCTG.DATE,CO.DATA,CO.NAME,CONTROL.DT,CREDIT.CRITERIA,MIN.DELINQ.AMT,MIN.DELINQ.STAT,DOLLAR.EDIT,STAT,POSTED.BATCHES,POST.BATCHES
* VERSION: 910630 1.0  Set field based on entry type - cash.or.adj.entry
*
* COPYRIGHT        AXION COMPUTER SYSTEMS LTD.
*   1991              ALL RIGHTS RESERVED
*  
* AUTHOR:          DAVID HORSMAN
* DESCRIPTION:     THIS PROGRAM PROCESSES THE XTR BATCHES.
*  
* DATE WRITTEN:    30 JUN 91
* MODIFICATIONS:   DATE       NAME        DESCRIPTION
!  
*
TMP = TITLE[ONE,ONE]; TMP1 = INDEX("ECLUG",TMP,ONE)
* SOURCE = TMP; IF TMP1 THEN SOURCE = "CADBL"[TMP1,ONE]
SOURCE = DFLT.SOURCE
LC.SOURCE = CHAR(SEQ(SOURCE)+32)
RUN.TRANS.CLASS = TRANS.CLASS
RUN.TRANS.SUB.CLASS = TRANS.SUB.CLASS
RUN.SOURCE = SOURCE
RUN.LC.SOURCE = LC.SOURCE
*
READ OPERATORS FROM PAR.FILE,"OPERATORS" ELSE OPERATORS = ""
IF OPERATORS = "" THEN OPERATORS = ACCT[1,3]
READ TRANS.TYPES FROM PAR.FILE,TRANS.ITEM ELSE PRINT CLB: "Can't read PAR ":TRANS.ITEM:; INPUT RSP; STOP
READ TRANS.TYPES.ADJ FROM PAR.FILE,"TRANS.TYPES.ADJ" ELSE PRINT CLB: "Can't read PAR TRANS.TYPES.ADJ":; INPUT RSP; STOP
READ CURR.ACCTG.PERIOD FROM CNT.FILE,"CURR.ACCTG.PERIOD" ELSE PRINT CLB: "Can't read CNT CURR.ACCTG.PERIOD":; INPUT RSP; STOP
ACCTG.PERIOD = CURR.ACCTG.PERIOD[1,2]:"-":CURR.ACCTG.PERIOD[3,2]
READ CURR.ACCTG.DATE FROM CNT.FILE,"CURR.ACCTG.DATE" ELSE PRINT CLB: "Can't read CNT CURR.ACCTG.DATE":; INPUT RSP; STOP
READ CO.DATA FROM CNT.FILE,"CO.DATA" ELSE PRINT CLB: "Can't read CNT CO.DATA":; INPUT RSP; STOP
CO.NAME = CO.DATA<1,1,1>; CONTROL.DT = CO.DATA<2,1,1>
READ CREDIT.CRITERIA FROM PAR.FILE,"CREDIT.CRITERIA" ELSE CREDIT.CRITERIA = ""
MIN.DELINQ.AMT = CREDIT.CRITERIA<1>; IF NOT(MIN.DELINQ.AMT) THEN MIN.DELINQ.AMT = 100
MIN.DELINQ.STAT = CREDIT.CRITERIA<2>
DOLLAR.EDIT = ""; STAT = FALSE; POSTED.BATCHES = ""; POST.BATCHES = ""
LIST.ALL = FALSE
*
~CASH.INCL.OR.ADJ.MEMO~
*CODE.SEGMENT: CASH.INCL.OR.ADJ.INIT 
* VERSION: 910630 1.0  Set field based on entry type - cash.or.adj.entry
*
* COPYRIGHT        AXION COMPUTER SYSTEMS LTD.
*   1991              ALL RIGHTS RESERVED
*  
* AUTHOR:          DAVID HORSMAN
* DESCRIPTION:     THIS CODE SEGMENT ANALYZED DELINQUENCY FOR THE CASH BATCHES.
*  
* DATE WRITTEN:    19 MAY 92
* MODIFICATIONS:   DATE       NAME        DESCRIPTION
*
* NOTE: Set DLQ.FL in your program if file is open & used!
*
!  
*
IF DLQ.FL THEN
MATREAD DLQ FROM DLQ.FILE,ACT.ID ELSE MAT DLQ = EMPTY
END ELSE MAT DLQ = EMPTY
*
IF DLQ$MEMO.DATA<ONE,ONE,ONE> NE EMPTY THEN
*
MEMO.ID = FIELD(DLQ$MEMO.DATA<ONE,ONE,ONE>,"*",ONE)
MEMO.ODT = EMPTY
**MEMO.DT = FIELD(DLQ$MEMO.DATA<ONE,ONE,ONE>,"*",TWO); MEMO.DT = ICONV(MEMO.DT,"D")
MEMO.DT = FIELD(DLQ$MEMO.DATA<ONE,ONE,ONE>,"*",TWO)
IF DATE() - MEMO.DT GT MEMO.DAYS THEN
MEMO.ID = EMPTY; MEMO.DT = EMPTY; MEMO.ODT = EMPTY
END ELSE
IF MEMO.DT NE EMPTY THEN MEMO.ODT = OCONV(MEMO.DT,"D2")
END
*
END ELSE
MEMO.SENT = FALSE; MEMO.ID = EMPTY; MEMO.DT = EMPTY; MEMO.ODT = EMPTY
END
*
~CASH.INCL.RELS.APPL~
*CODE.SEGMENT: CASH.INCL.RELS.APPL
*
*
IF LCK.ITM THEN
LCK.ITM.ID = XTR.ID.PREF:".CTL"
CALL UNLOCK.ITEM(LCK.FILE,"CNT",LCK.ITM.ID,LCK.FILE)
END
*
*
~CASH.INCL.RELS.BATCH~
*CODE.SEGMENT: CASH.INCL.RELS.BATCH
*
*
IF LCK.ITM THEN
CALL UNLOCK.ITEM(CNT.FILE,"CAJ",BATCH.NUM,LCK.FILE)
END
*
*
~CASH.INCL.RELS.CNTRL~
*CODE.SEGMENT: CASH.INCL.RELS.CNTRL
*
* Unlock Till Info
*
IF LCK.ITM THEN
CNT.CSH.ID = "CASH.CNTRL"
CALL UNLOCK.ITEM(LCK.FILE,"CNT",CNT.CSH.ID,LCK.FILE)
END
~CASH.INCL.RELS.LISTS~
*CODE.SEGMENT: CASH.INCL.RELS.LISTS
*
*
CALL UNLOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".REG",LCK.FILE)
CALL UNLOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".ERR",LCK.FILE)
CALL UNLOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".OTH",LCK.FILE)
*
~CASH.INCL.RELS.XTR~
*CODE.SEGMENT: CASH.INCL.RELS.XTR
*
*
IF LCK.ITM THEN
CALL UNLOCK.ITEM(LCK.FILE,"CNT","XTR.COM.CTL",LCK.FILE)
END
*
*
~CASH.INCL.UPD.CNTRL~
*CODE.SEGMENT: CASH.INCL.UPD.CNTRL
*
*
CNT.CSH.ID = "CASH.CNTRL"
IF ALL.FLAG THEN MATWRITE CNT.CSH ON CNT.FILE,CNT.CSH.ID
*
~CASH.INCL.UPD.HDR~
*CODE.SEGMENT: CASH.INCL.UPD.HDR 
* VERSION: 910630 1.0  Update batch header record - cash.or.adj.entry
*
* COPYRIGHT        AXION COMPUTER SYSTEMS LTD.
*   1991              ALL RIGHTS RESERVED
*  
* AUTHOR:          DAVID HORSMAN
* DESCRIPTION:     THIS PROGRAM PROCESSES THE XTR BATCHES.
*  
* DATE WRITTEN:    30 JUN 91
* MODIFICATIONS:   DATE       NAME        DESCRIPTION
!  
*
IF BATCH.INP.SOURCE EQ "3" OR BATCH.INP.SOURCE EQ "5" THEN BATCH.TOTAL = ENTERED.TOTAL
*?? JAN 96 ?? HOW ABOUT 6 (LATE CHRGS)????
IF BATCH.CLASS THEN BATCH.TOTAL = -BATCH.TOTAL; ENTERED.TOTAL = -ENTERED.TOTAL; ADJUST.TOTAL = -ADJUST.TOTAL
*
BATCH.HEADER = BATCH.SOURCE:"*":BATCH.STATUS:"*":ENTRY.DATE:"*":ENTRY.TIME:"*":POST.DATE:"*":POST.TIME:"*":BUS.DATE:"*":EFF.DATE
BATCH.HEADER = BATCH.HEADER:"*":BATCH.TOTAL:"*":ENTERED.TOTAL:"*":ADJUST.TOTAL:"*":DEFAULT.TYPE:"*":ITEM.COUNT:"*":OPERATOR
BATCH.HEADER = BATCH.HEADER:"*":BATCH.DEL.STATUS:"*":BATCH.LPT.DT:"*":BATCH.LPT.TM
BATCH.HEADER = BATCH.HEADER:"*":BATCH.CLASS:"*":BATCH.INP.SOURCE:"*":BATCH.LST
BATCH.HEADER = BATCH.HEADER:"*":BATCH.TILL
*
IF BATCH.CLASS THEN BATCH.TOTAL = -BATCH.TOTAL; ENTERED.TOTAL = -ENTERED.TOTAL; ADJUST.TOTAL = -ADJUST.TOTAL
*
IF ALL.FLAG THEN WRITE BATCH.HEADER:AM:CAJ ON CAJ.FILE,BATCH.NUM
*
~CASH.INCL.UPD.LISTS~
*CODE.SEGMENT: CASH.INCL.UPD.LISTS
*
* IF XTR.POST.REG NE EMPTY OR XTR.POST.ERR NE EMPTY OR XTR.POST.OTH NE EMPTY THEN
*
XTR.LIST.ID = XTR.ID.PREF:".LISTS"
*
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CNT.FILE,"CNT",XTR.LIST.ID,LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
*
READ XTR.POST.LIST FROM CNT.FILE,XTR.LIST.ID ELSE XTR.POST.LIST = EMPTY
*
TMP = XTR.ID.PREF:".":XTR.ID.FUNC:".REG"
LOCATE TMP IN XTR.POST.LIST BY "AL" SETTING TMP.LOC THEN
IF XTR.POST.REG EQ EMPTY THEN
DEL XTR.POST.LIST<TMP.LOC>
END
END ELSE
IF XTR.POST.REG NE EMPTY THEN
INS TMP BEFORE XTR.POST.LIST<TMP.LOC>
END
END
*
TMP = XTR.ID.PREF:".":XTR.ID.FUNC:".ERR"
LOCATE TMP IN XTR.POST.LIST BY "AL" SETTING TMP.LOC THEN
IF XTR.POST.ERR EQ EMPTY THEN
DEL XTR.POST.LIST<TMP.LOC>
END
END ELSE
IF XTR.POST.ERR NE EMPTY THEN
INS TMP BEFORE XTR.POST.LIST<TMP.LOC>
END
END
*
TMP = XTR.ID.PREF:".":XTR.ID.FUNC:".OTH"
LOCATE TMP IN XTR.POST.LIST BY "AL" SETTING TMP.LOC THEN
IF XTR.POST.OTH EQ EMPTY THEN
DEL XTR.POST.LIST<TMP.LOC>
END
END ELSE
IF XTR.POST.OTH NE EMPTY THEN
INS TMP BEFORE XTR.POST.LIST<TMP.LOC>
END
END
*
IF ALL.FLAG THEN WRITE XTR.POST.LIST ON CNT.FILE,XTR.LIST.ID
*
CALL UNLOCK.ITEM(CNT.FILE,"CNT",XTR.LIST.ID,LCK.FILE)
*
* END
*
IF ALL.FLAG THEN
WRITE XTR.POST.REG ON CNT.FILE,XTR.ID.PREF:".":XTR.ID.FUNC:".REG"
WRITE XTR.POST.ERR ON CNT.FILE,XTR.ID.PREF:".":XTR.ID.FUNC:".ERR"
WRITE XTR.POST.OTH ON CNT.FILE,XTR.ID.PREF:".":XTR.ID.FUNC:".OTH"
END
*
CALL UNLOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".REG",LCK.FILE)
CALL UNLOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".ERR",LCK.FILE)
CALL UNLOCK.ITEM(CNT.FILE,"CNT",XTR.ID.PREF:".":XTR.ID.FUNC:".OTH",LCK.FILE)
*
~CASH.NEXT.BATCH~
*CODE.SEGMENT: CASH.NEXT.BATCH
*
* COMPANY: Axion Computer System
* Author:  David Horsman
* Date:    20 NOV 91
*
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CNT.FILE,"CNT","CASH.BATCH.NUM",LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
IF NOT(LCK.STAT) THEN
READ BATCH.NUM FROM CNT.FILE,"CASH.BATCH.NUM" ELSE BATCH.NUM = ONE
IF ALL.FLAG THEN WRITE BATCH.NUM + ONE ON CNT.FILE,"CASH.BATCH.NUM"
CALL UNLOCK.ITEM(CNT.FILE,"CNT","CASH.BATCH.NUM",LCK.FILE)
END
BATCH.NUM = (BATCH.NUM+100000)[2,5]
LOOP
LCK.STAT = LCK.TYPE; CALL LOCK.ITEM(CAJ.FILE,"CAJ",BATCH.NUM,LCK.FILE,LCK.STAT)
WHILE LCK.STAT DO REPEAT
*
~CASH.UPD.HDR~
*CODE.SEGMENT: CASH.UPD.HDR 
* VERSION: 910630 1.0  Update batch header record - cash.or.adj.entry
*
* COPYRIGHT        AXION COMPUTER SYSTEMS LTD.
*   1991              ALL RIGHTS RESERVED
*  
* AUTHOR:          DAVID HORSMAN
* DESCRIPTION:     THIS PROGRAM PROCESSES THE XTR BATCHES.
*  
* DATE WRITTEN:    30 JUN 91
* MODIFICATIONS:   DATE       NAME        DESCRIPTION
!  
*
IF ENTRY.TYPE THEN BATCH.TOTAL = -BATCH.TOTAL; ENTERED.TOTAL = -ENTERED.TOTAL; ADJUST.TOTAL = -ADJUST.TOTAL
BATCH.HEADER = SOURCE:"*":BATCH.STATUS:"*":ENTRY.DATE:"*":ENTRY.TIME:"*":POST.DATE:"*":POST.TIME:"*":BUS.DATE:"*":EFF.DATE
BATCH.HEADER = BATCH.HEADER:"*":BATCH.TOTAL:"*":ENTERED.TOTAL:"*":ADJUST.TOTAL:"*":DEFAULT.TYPE:"*":ITEM.COUNT:"*":OPERATOR
IF ENTRY.TYPE THEN BATCH.TOTAL = -BATCH.TOTAL; ENTERED.TOTAL = -ENTERED.TOTAL; ADJUST.TOTAL = -ADJUST.TOTAL
IF ALL.FLAG THEN WRITE BATCH.HEADER:AM:CAJ ON CAJ.FILE,BATCH.NUM
*
